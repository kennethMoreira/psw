function ewExewshared() {
 try {
var ewAr = new Array();
var ewSB = new StringBuilder();
ew_SetLocale();
ew_LoadCurrent();
ewAr[1] = ""+"\r\n"+"<?php"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Shared code for PHPMaker and PHP Report Maker"+"\r\n"+"//"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Functions for converting encoding"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Convert to UTF-8"+"\r\n"+"function ew_ConvertToUtf8($str) {"+"\r\n"+"	return ew_Convert(EW_ENCODING, \"UTF-8\", $str);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert from UTF-8"+"\r\n"+"function ew_ConvertFromUtf8($str) {"+"\r\n"+"	return ew_Convert(\"UTF-8\", EW_ENCODING, $str);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert encoding"+"\r\n"+"function ew_Convert($from, $to, $str) {"+"\r\n"+"	if (is_string($str) && $from != \"\" && $to != \"\" && strtoupper($from) != strtoupper($to)) {"+"\r\n"+"		if (function_exists(\"iconv\")) {"+"\r\n"+"			return iconv($from, $to, $str);"+"\r\n"+"		} elseif (function_exists(\"mb_convert_encoding\")) {"+"\r\n"+"			return mb_convert_encoding($str, $to, $from);"+"\r\n"+"		} else {"+"\r\n"+"			return $str;"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return $str;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert a value to JSON value"+"\r\n"+"// $type: string/boolean"+"\r\n"+"function ew_VarToJson($val, $type = \"\", $sep = \"\\\"\") {"+"\r\n"+"	$type = strtolower($type);"+"\r\n"+"	if (is_null($val)) {"+"\r\n"+"		return \"null\";"+"\r\n"+"	} elseif ($type == \"number\") {"+"\r\n"+"		return $val;"+"\r\n"+"	} elseif ($type == \"boolean\" || is_bool($val)) {"+"\r\n"+"		return (ew_ConvertToBool($val)) ? \"true\" : \"false\";"+"\r\n"+"	} elseif ($type == \"string\" || is_string($val)) {"+"\r\n"+"		if ($sep == \"'\")"+"\r\n"+"			return \"'\" . ew_JsEncode3($val) . \"'\";"+"\r\n"+"		else"+"\r\n"+"			return \"\\\"\" . ew_JsEncode2($val) . \"\\\"\";"+"\r\n"+"	}"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert rows (array) to JSON"+"\r\n"+"function ew_ArrayToJson($ar, $offset = 0) {"+"\r\n"+"	$arOut = array();"+"\r\n"+"	$array = FALSE;"+"\r\n"+"	if (count($ar) > 0) {"+"\r\n"+"		$keys = array_keys($ar[0]);"+"\r\n"+"		foreach ($keys as $key) {"+"\r\n"+"			if (is_int($key)) {"+"\r\n"+"				$array = TRUE;"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	foreach ($ar as $row) {"+"\r\n"+"		$arwrk = array();"+"\r\n"+"		foreach ($row as $key => $val) {"+"\r\n"+"			if (($array && is_string($key)) || (!$array && is_int($key)))"+"\r\n"+"				continue;"+"\r\n"+"			$key = ($array) ? \"\" : \"\\\"\" . ew_JsEncode2($key) . \"\\\":\";"+"\r\n"+"			$arwrk[] = $key . ew_VarToJson($val);"+"\r\n"+"		}"+"\r\n"+"		if ($array) { // Array"+"\r\n"+"			$arOut[] = \"[\" . implode(\",\", $arwrk) . \"]\";"+"\r\n"+"		} else { // Object"+"\r\n"+"			$arOut[] = \"{\" . implode(\",\", $arwrk) . \"}\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if ($offset > 0)"+"\r\n"+"		$arOut = array_slice($arOut, $offset);"+"\r\n"+"	return \"[\" . implode(\",\", $arOut) . \"]\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Langauge class"+"\r\n"+" */"+"\r\n"+"class cLanguage {"+"\r\n"+"	var $LanguageId;"+"\r\n"+"	var $Phrases = NULL;"+"\r\n"+"	var $LanguageFolder = EW_LANGUAGE_FOLDER;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($langfolder = \"\", $langid = \"\") {"+"\r\n"+"		global $gsLanguage;"+"\r\n"+"		if ($langfolder <> \"\")"+"\r\n"+"			$this->LanguageFolder = $langfolder;"+"\r\n"+"		$this->LoadFileList(); // Set up file list"+"\r\n"+"		if ($langid <> \"\") { // Set up language id"+"\r\n"+"			$this->LanguageId = $langid;"+"\r\n"+"			$_SESSION[EW_SESSION_LANGUAGE_ID] = $this->LanguageId;"+"\r\n"+"		} elseif (@$_GET[\"language\"] <> \"\") {"+"\r\n"+"			$this->LanguageId = $_GET[\"language\"];"+"\r\n"+"			$_SESSION[EW_SESSION_LANGUAGE_ID] = $this->LanguageId;"+"\r\n"+"		} elseif (@$_SESSION[EW_SESSION_LANGUAGE_ID] <> \"\") {"+"\r\n"+"			$this->LanguageId = $_SESSION[EW_SESSION_LANGUAGE_ID];"+"\r\n"+"		} else {"+"\r\n"+"			$this->LanguageId = EW_LANGUAGE_DEFAULT_ID;"+"\r\n"+"		}"+"\r\n"+"		$gsLanguage = $this->LanguageId;"+"\r\n"+"		$this->Load($this->LanguageId);"+"\r\n"+""+"\r\n"+"		";
ewAr[2] = ""+"\r\n"+"		// Call Language Load event"+"\r\n"+"		$this->Language_Load();"+"\r\n"+"		";
ewAr[3] = ""+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language file list"+"\r\n"+"	function LoadFileList() {"+"\r\n"+"		global $EW_LANGUAGE_FILE;"+"\r\n"+"		if (is_array($EW_LANGUAGE_FILE)) {"+"\r\n"+"			$cnt = count($EW_LANGUAGE_FILE);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++)"+"\r\n"+"				$EW_LANGUAGE_FILE[$i][1] = $this->LoadFileDesc($this->LanguageFolder . $EW_LANGUAGE_FILE[$i][2]);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language file description"+"\r\n"+"	function LoadFileDesc($File) {"+"\r\n"+"		if (EW_USE_DOM_XML) {"+"\r\n"+"			$this->Phrases = new cXMLDocument();"+"\r\n"+"			if ($this->Phrases->Load($File))"+"\r\n"+"				return $this->GetNodeAtt($this->Phrases->DocumentElement(), \"desc\");"+"\r\n"+"		} else {"+"\r\n"+"			$ar = ew_Xml2Array(substr(file_get_contents($File), 0, 512)); // Just read the first part"+"\r\n"+"			return (is_array($ar)) ? @$ar['ew-language']['attr']['desc'] : \"\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language file"+"\r\n"+"	function Load($id) {"+"\r\n"+"		global $DEFAULT_DECIMAL_POINT, $DEFAULT_THOUSANDS_SEP, $DEFAULT_MON_DECIMAL_POINT, $DEFAULT_MON_THOUSANDS_SEP,"+"\r\n"+"			$DEFAULT_CURRENCY_SYMBOL, $DEFAULT_POSITIVE_SIGN, $DEFAULT_NEGATIVE_SIGN, $DEFAULT_FRAC_DIGITS,"+"\r\n"+"			$DEFAULT_P_CS_PRECEDES, $DEFAULT_P_SEP_BY_SPACE, $DEFAULT_N_CS_PRECEDES, $DEFAULT_N_SEP_BY_SPACE,"+"\r\n"+"			$DEFAULT_P_SIGN_POSN, $DEFAULT_N_SIGN_POSN, $USE_DEFAULT_LOCALE, $DEFAULT_LOCALE, $DEFAULT_TIME_ZONE;"+"\r\n"+"		"+"\r\n"+"		$sFileName = $this->GetFileName($id);"+"\r\n"+"		if ($sFileName == \"\")"+"\r\n"+"			$sFileName = $this->GetFileName(EW_LANGUAGE_DEFAULT_ID);"+"\r\n"+"		if ($sFileName == \"\")"+"\r\n"+"			return;"+"\r\n"+"		if (EW_USE_DOM_XML) {"+"\r\n"+"			$this->Phrases = new cXMLDocument();"+"\r\n"+"			$this->Phrases->Load($sFileName);"+"\r\n"+"		} else {"+"\r\n"+"			if (is_array(@$_SESSION[EW_PROJECT_NAME . \"_\" . $sFileName])) {"+"\r\n"+"				$this->Phrases = $_SESSION[EW_PROJECT_NAME . \"_\" . $sFileName];"+"\r\n"+"			} else {"+"\r\n"+"				$this->Phrases = ew_Xml2Array(file_get_contents($sFileName));"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Set up locale / currency format for language"+"\r\n"+"		if ($this->LocalePhrase(\"use_system_locale\") == \"1\") { // Use system locale"+"\r\n"+"			$langLocale = $this->LocalePhrase(\"locale\");"+"\r\n"+"			if ($langLocale <> \"\")"+"\r\n"+"				@setlocale(LC_ALL, $langLocale); // Set language locale"+"\r\n"+"			extract(ew_LocaleConv());"+"\r\n"+"			if (!empty($decimal_point)) $DEFAULT_DECIMAL_POINT = $decimal_point;"+"\r\n"+"			if (!empty($thousands_sep)) $DEFAULT_THOUSANDS_SEP = $thousands_sep;"+"\r\n"+"			if (!empty($mon_decimal_point)) $DEFAULT_MON_DECIMAL_POINT = $mon_decimal_point;"+"\r\n"+"			if (empty($DEFAULT_MON_DECIMAL_POINT)) $DEFAULT_MON_DECIMAL_POINT = $DEFAULT_DECIMAL_POINT;"+"\r\n"+"			if (!empty($mon_thousands_sep)) $DEFAULT_MON_THOUSANDS_SEP = $mon_thousands_sep;"+"\r\n"+"			if (empty($DEFAULT_MON_THOUSANDS_SEP)) $DEFAULT_MON_THOUSANDS_SEP = $DEFAULT_THOUSANDS_SEP;"+"\r\n"+"			if (!empty($currency_symbol)) {"+"\r\n"+"				if (EW_CHARSET == \"utf-8\") {"+"\r\n"+"					if ($int_curr_symbol == \"EUR\" && ord($currency_symbol) == 128) {"+"\r\n"+"						$currency_symbol = \"\\xe2\\x82\\xac\";"+"\r\n"+"					} elseif ($int_curr_symbol == \"GBP\" && ord($currency_symbol) == 163) {"+"\r\n"+"						$currency_symbol = \"\\xc2\\xa3\";"+"\r\n"+"					} elseif ($int_curr_symbol == \"JPY\" && ord($currency_symbol) == 92) {"+"\r\n"+"						$currency_symbol = \"\\xc2\\xa5\";"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$DEFAULT_CURRENCY_SYMBOL = $currency_symbol;"+"\r\n"+"			}"+"\r\n"+"			if (!empty($positive_sign)) $DEFAULT_POSITIVE_SIGN = $positive_sign;"+"\r\n"+"			if (!empty($negative_sign)) $DEFAULT_NEGATIVE_SIGN = $negative_sign;"+"\r\n"+"			if (!empty($frac_digits) && $frac_digits <> CHAR_MAX) $DEFAULT_FRAC_DIGITS = $frac_digits;"+"\r\n"+"			if (!empty($p_cs_precedes) && $p_cs_precedes <> CHAR_MAX) $DEFAULT_P_CS_PRECEDES = $p_cs_precedes;"+"\r\n"+"			if (!empty($p_sep_by_space) && $p_sep_by_space <> CHAR_MAX) $DEFAULT_P_SEP_BY_SPACE = $p_sep_by_space;"+"\r\n"+"			if (!empty($n_cs_precedes) && $n_cs_precedes <> CHAR_MAX) $DEFAULT_N_CS_PRECEDES = $n_cs_precedes;"+"\r\n"+"			if (!empty($n_sep_by_space) && $n_sep_by_space <> CHAR_MAX) $DEFAULT_N_SEP_BY_SPACE = $n_sep_by_space;"+"\r\n"+"			if (!empty($p_sign_posn) && $p_sign_posn <> CHAR_MAX) $DEFAULT_P_SIGN_POSN = $p_sign_posn;"+"\r\n"+"			if (!empty($n_sign_posn) && $n_sign_posn <> CHAR_MAX) $DEFAULT_N_SIGN_POSN = $n_sign_posn;"+"\r\n"+"		} else { // Use language file"+"\r\n"+"			$ar = array(\"p_cs_precedes\", \"p_sep_by_space\", \"n_cs_precedes\", \"n_sep_by_space\");"+"\r\n"+"			foreach ($DEFAULT_LOCALE as $key => $value) {"+"\r\n"+"				if ($this->LocalePhrase($key) <> \"\")"+"\r\n"+"					$DEFAULT_LOCALE[$key] = in_array($key, $ar) ? $this->LocalePhrase($key) == \"1\" : $this->LocalePhrase($key);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	";
ewAr[4] = ""+"\r\n"+"		/**"+"\r\n"+"		 * Time zone"+"\r\n"+"		 * Read http://www.php.net/date_default_timezone_set for details"+"\r\n"+"		 * and http://www.php.net/timezones for supported time zones"+"\r\n"+"		*/"+"\r\n"+"		// Set up time zone from language file for multi-language site"+"\r\n"+"		if ($this->LocalePhrase(\"time_zone\") <> \"\") $DEFAULT_TIME_ZONE = $this->LocalePhrase(\"time_zone\");"+"\r\n"+"		if (function_exists(\"date_default_timezone_set\") && $DEFAULT_TIME_ZONE <> \"\")"+"\r\n"+"			date_default_timezone_set($DEFAULT_TIME_ZONE);"+"\r\n"+"	";
ewAr[5] = ""+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get language file name"+"\r\n"+"	function GetFileName($Id) {"+"\r\n"+"		global $EW_LANGUAGE_FILE;"+"\r\n"+"		if (is_array($EW_LANGUAGE_FILE)) {"+"\r\n"+"			$cnt = count($EW_LANGUAGE_FILE);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++)"+"\r\n"+"				if ($EW_LANGUAGE_FILE[$i][0] == $Id) {"+"\r\n"+"					return $this->LanguageFolder . $EW_LANGUAGE_FILE[$i][2];"+"\r\n"+"				}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get node attribute"+"\r\n"+"	function GetNodeAtt($Nodes, $Att) {"+"\r\n"+"		$value = ($Nodes) ? $this->Phrases->GetAttribute($Nodes, $Att) : \"\";"+"\r\n"+"		//return ew_ConvertFromUtf8($value);"+"\r\n"+"		return $value;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set node attribute"+"\r\n"+"	function SetNodeAtt($Nodes, $Att, $Value) {"+"\r\n"+"		if ($Nodes)"+"\r\n"+"			$this->Phrases->SetAttribute($Nodes, $Att, $Value);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get locale phrase"+"\r\n"+"	function LocalePhrase($Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//locale/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ew_ConvertFromUtf8(@$this->Phrases['ew-language']['locale']['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set locale phrase"+"\r\n"+"	function setLocalePhrase($Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//locale/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['locale']['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get phrase"+"\r\n"+"	function Phrase($Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$ImageUrl = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"imageurl\");"+"\r\n"+"			$ImageWidth = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"imagewidth\");"+"\r\n"+"			$ImageHeight = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"imageheight\");"+"\r\n"+"			$ImageClass = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"class\");"+"\r\n"+"			$Text = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$ImageUrl = ew_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['imageurl']);"+"\r\n"+"			$ImageWidth = ew_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['imagewidth']);"+"\r\n"+"			$ImageHeight = ew_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['imageheight']);"+"\r\n"+"			$ImageClass = ew_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['class']);"+"\r\n"+"			$Text = ew_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"		if ($ImageClass <> \"\") {"+"\r\n"+"			return \"<span data-phrase=\\\"\" . $Id . \"\\\" class=\\\"\" . $ImageClass . \"\\\" data-caption=\\\"\" . ew_HtmlEncode($Text) . \"\\\"></span>\";"+"\r\n"+"		} elseif ($ImageUrl <> \"\") {"+"\r\n"+"			$style = ($ImageWidth <> \"\") ? \" width: \" . $ImageWidth . \"px;\" : \"\";"+"\r\n"+"			$style .= ($ImageHeight <> \"\") ? \" height: \" . $ImageHeight . \"px;\" : \"\";"+"\r\n"+"			return \"<img data-phrase=\\\"\" . $Id . \"\\\" src=\\\"\" . ew_HtmlEncode($ImageUrl) . \"\\\" style=\\\"\" . trim($style) . \"\\\" alt=\\\"\" . ew_HtmlEncode($Text) . \"\\\" title=\\\"\" . ew_HtmlEncode($Text) . \"\\\">\";"+"\r\n"+"		} else {"+"\r\n"+"			return $Text;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set phrase"+"\r\n"+"	function setPhrase($Id, $Value) {"+"\r\n"+"		$this->setPhraseAttr($Id, \"value\", $Value);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get project phrase"+"\r\n"+"	function ProjectPhrase($Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ew_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set project phrase"+"\r\n"+"	function setProjectPhrase($Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get menu phrase"+"\r\n"+"	function MenuPhrase($MenuId, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/menu[@id='\" . $MenuId . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ew_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['menu'][$MenuId]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set menu phrase"+"\r\n"+"	function setMenuPhrase($MenuId, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/menu[@id='\" . $MenuId . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['menu'][$MenuId]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get table phrase"+"\r\n"+"	function TablePhrase($TblVar, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ew_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set table phrase"+"\r\n"+"	function setTablePhrase($TblVar, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get field phrase"+"\r\n"+"	function FieldPhrase($TblVar, $FldVar, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/field[@id='\" . strtolower($FldVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ew_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['field'][strtolower($FldVar)]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set field phrase"+"\r\n"+"	function setFieldPhrase($TblVar, $FldVar, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/field[@id='\" . strtolower($FldVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['field'][strtolower($FldVar)]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get phrase attribute"+"\r\n"+"	function PhraseAttr($Id, $Name) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), strtolower($Name));"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ew_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr'][strtolower($Name)]);"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set phrase attribute"+"\r\n"+"	function setPhraseAttr($Id, $Name, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$Node = $this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\");"+"\r\n"+"			if (!$Node) { // Create new phrase"+"\r\n"+"				$Node = $this->Phrases->XmlDoc->createElement(\"phrase\");"+"\r\n"+"				$Node->setAttribute(\"id\", $Id);"+"\r\n"+"				$this->Phrases->SelectSingleNode(\"//global\")->appendChild($Node);"+"\r\n"+"			}"+"\r\n"+"			$this->SetNodeAtt($Node, strtolower($Name), $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr'][strtolower($Name)] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get phrase class"+"\r\n"+"	function PhraseClass($Id) {"+"\r\n"+"		return $this->PhraseAttr($Id, \"class\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set phrase attribute"+"\r\n"+"	function setPhraseClass($Id, $Value) {"+"\r\n"+"		$this->setPhraseAttr($Id, \"class\", $Value);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output XML as JSON"+"\r\n"+"	function XmlToJSON($XPath) {"+"\r\n"+"		$NodeList = $this->Phrases->SelectNodes($XPath);"+"\r\n"+"		$Str = \"{\";"+"\r\n"+"		foreach ($NodeList as $Node) {"+"\r\n"+"			$Id = $this->GetNodeAtt($Node, \"id\");"+"\r\n"+"			$Value = $this->GetNodeAtt($Node, \"value\");"+"\r\n"+"			$Str .= \"\\\"\" . ew_JsEncode2($Id) . \"\\\":\\\"\" . ew_JsEncode2($Value) . \"\\\",\";"+"\r\n"+"		}"+"\r\n"+"		if (substr($Str, -1) == \",\") $Str = substr($Str, 0, strlen($Str)-1);"+"\r\n"+"		$Str .= \"}\";"+"\r\n"+"		return $Str;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Output array as JSON"+"\r\n"+"	function ArrayToJSON($client) {"+"\r\n"+"		$ar = @$this->Phrases['ew-language']['global']['phrase'];"+"\r\n"+"		$Str = \"{\";"+"\r\n"+"		if (is_array($ar)) {"+"\r\n"+"			foreach ($ar as $id => $node) {"+"\r\n"+"				$is_client = @$node['attr']['client'] == '1';"+"\r\n"+"				$value = ew_ConvertFromUtf8(@$node['attr']['value']);"+"\r\n"+"				if (!$client || ($client && $is_client))"+"\r\n"+"					$Str .= \"\\\"\" . ew_JsEncode2($id) . \"\\\":\\\"\" . ew_JsEncode2($value) . \"\\\",\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (substr($Str, -1) == \",\") $Str = substr($Str, 0, strlen($Str)-1);"+"\r\n"+"		$Str .= \"}\";"+"\r\n"+"		return $Str;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output all phrases as JSON"+"\r\n"+"	function AllToJSON() {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ew_Language(\" . $this->XmlToJSON(\"//global/phrase\") . \");\";"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ew_Language(\" . $this->ArrayToJSON(FALSE) . \");\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output client phrases as JSON"+"\r\n"+"	function ToJSON() {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ew_Language(\" . $this->XmlToJSON(\"//global/phrase[@client='1']\") . \");\";"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ew_Language(\" . $this->ArrayToJSON(TRUE) . \");\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// SELECT template"+"\r\n"+"//	var $SelectTemplate = '<select class=\"form-control\" id=\"ewLanguage\" name=\"ewLanguage\" onchange=\"ew_SetLanguage(this);\">{options}</select>'; // SELECT tag template"+"\r\n"+"//	var $OptionTemplate = '<option value=\"{langid}\">{langdesc}</option>'; // OPTION tag template"+"\r\n"+"//	var $SelectedOptionTemplate = '<option value=\"{langid}\" selected>{langdesc}</option>'; // Selected OPTION tag template"+"\r\n"+"	"+"\r\n"+"	// RADIO template"+"\r\n"+"	var $SelectTemplate = '<div class=\"btn-group\" data-toggle=\"buttons\">{options}</div>'; // DIV tag template"+"\r\n"+"	var $OptionTemplate = '<label class=\"btn btn-default ewTooltip\" data-container=\"body\" data-placement=\"bottom\" title=\"{langdesc}\"><input type=\"radio\" name=\"ewLanguage\" autocomplete=\"off\" onchange=\"ew_SetLanguage(this);\" value=\"{langid}\">{langid}</label>'; // INPUT tag template"+"\r\n"+"	var $SelectedOptionTemplate = '<label class=\"btn btn-default ewTooltip active\" data-container=\"body\" data-placement=\"bottom\" title=\"{langdesc}\"><input type=\"radio\" name=\"ewLanguage\" autocomplete=\"off\" onchange=\"ew_SetLanguage(this);\" value=\"{langid}\" checked>{langid}</label>'; // Selected INPUT tag template"+"\r\n"+"	"+"\r\n"+"	// Output language selection form"+"\r\n"+"	function SelectionForm() {"+"\r\n"+"		global $EW_LANGUAGE_FILE, $gsLanguage;"+"\r\n"+"		$form = \"\";"+"\r\n"+"		if (is_array($EW_LANGUAGE_FILE)) {"+"\r\n"+"			$cnt = count($EW_LANGUAGE_FILE);"+"\r\n"+"			if ($cnt > 1) {"+"\r\n"+"				for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"					$langid = $EW_LANGUAGE_FILE[$i][0];"+"\r\n"+"					$phrase = $this->Phrase($langid) ?: $EW_LANGUAGE_FILE[$i][1];"+"\r\n"+"					$option = ($langid == $gsLanguage) ? $this->SelectedOptionTemplate : $this->OptionTemplate;"+"\r\n"+"					$form .= str_replace(array(\"{langid}\", \"{langdesc}\"), array($langid, $phrase), $option);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($form <> \"\")"+"\r\n"+"			$form = '<div class=\"ewLanguageOption\">' . str_replace(\"{options}\", $form, $this->SelectTemplate) . '</div>';"+"\r\n"+"		return $form;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[6] = ""+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * XML document class"+"\r\n"+" */"+"\r\n"+"class cXMLDocument {"+"\r\n"+"	var $Encoding = \"utf-8\";"+"\r\n"+"	var $RootTagName;"+"\r\n"+"	var $SubTblName = '';"+"\r\n"+"	var $RowTagName;"+"\r\n"+"	var $XmlDoc = FALSE;"+"\r\n"+"	var $XmlTbl;"+"\r\n"+"	var $XmlSubTbl;"+"\r\n"+"	var $XmlRow;"+"\r\n"+"	var $NullValue = 'NULL';"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($encoding = \"\") {"+"\r\n"+""+"\r\n"+"		if ($encoding <> \"\")"+"\r\n"+"			$this->Encoding = $encoding;"+"\r\n"+"		if ($this->Encoding <> \"\") {"+"\r\n"+"			$this->XmlDoc = new DOMDocument(\"1.0\", strval($this->Encoding));"+"\r\n"+"		} else {"+"\r\n"+"			$this->XmlDoc = new DOMDocument(\"1.0\");"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load"+"\r\n"+"	function Load($filename) {"+"\r\n"+"		$filepath = realpath($filename);"+"\r\n"+"		return file_exists($filepath) ? $this->XmlDoc->load($filepath) : FALSE;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get document element"+"\r\n"+"	function &DocumentElement() {"+"\r\n"+"		$de = $this->XmlDoc->documentElement;"+"\r\n"+"		return $de;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get attribute"+"\r\n"+"	function GetAttribute($element, $name) {"+"\r\n"+"		return ($element) ? ew_ConvertFromUtf8($element->getAttribute($name)) : \"\";"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Set attribute"+"\r\n"+"	function SetAttribute($element, $name, $value) {"+"\r\n"+"		if ($element)"+"\r\n"+"			$element->setAttribute($name, ew_ConvertToUtf8($value));"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Select single node"+"\r\n"+"	function SelectSingleNode($query) {"+"\r\n"+"		$elements = $this->SelectNodes($query);"+"\r\n"+"		return ($elements->length > 0) ? $elements->item(0) : NULL;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Select nodes"+"\r\n"+"	function SelectNodes($query) {"+"\r\n"+"		$xpath = new DOMXPath($this->XmlDoc);"+"\r\n"+"		return $xpath->query($query);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Add root"+"\r\n"+"	function AddRoot($roottagname = 'table') {"+"\r\n"+"		$this->RootTagName = ew_XmlTagName($roottagname);"+"\r\n"+"		$this->XmlTbl = $this->XmlDoc->createElement($this->RootTagName);"+"\r\n"+"		$this->XmlDoc->appendChild($this->XmlTbl);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add row"+"\r\n"+"	function AddRow($tabletagname = '', $rowtagname = 'row') {"+"\r\n"+"		$this->RowTagName = ew_XmlTagName($rowtagname);"+"\r\n"+"		$this->XmlRow = $this->XmlDoc->createElement($this->RowTagName);"+"\r\n"+"		if ($tabletagname == '') {"+"\r\n"+"			if ($this->XmlTbl)"+"\r\n"+"				$this->XmlTbl->appendChild($this->XmlRow);"+"\r\n"+"		} else {"+"\r\n"+"			if ($this->SubTblName == '' || $this->SubTblName != $tabletagname) {"+"\r\n"+"				$this->SubTblName = ew_XmlTagName($tabletagname);"+"\r\n"+"				$this->XmlSubTbl = $this->XmlDoc->createElement($this->SubTblName);"+"\r\n"+"				$this->XmlTbl->appendChild($this->XmlSubTbl);"+"\r\n"+"			}"+"\r\n"+"			if ($this->XmlSubTbl)"+"\r\n"+"				$this->XmlSubTbl->appendChild($this->XmlRow);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add field"+"\r\n"+"	function AddField($name, $value) {"+"\r\n"+"		if (is_null($value)) $value = $this->NullValue;"+"\r\n"+"		$value = ew_ConvertToUtf8($value); // Convert to UTF-8"+"\r\n"+"		$xmlfld = $this->XmlDoc->createElement(ew_XmlTagName($name));"+"\r\n"+"		$this->XmlRow->appendChild($xmlfld);"+"\r\n"+"		$xmlfld->appendChild($this->XmlDoc->createTextNode($value));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get XML"+"\r\n"+"	function XML() {"+"\r\n"+"		return $this->XmlDoc->saveXML();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Menu class"+"\r\n"+" */"+"\r\n"+"class cMenu {"+"\r\n"+""+"\r\n"+"	var $Id;"+"\r\n"+"	var $MenuBarClassName = EW_MENUBAR_CLASSNAME;"+"\r\n"+"	var $MenuClassName = EW_MENU_CLASSNAME;"+"\r\n"+"	var $SubMenuClassName = EW_SUBMENU_CLASSNAME;"+"\r\n"+"	var $SubMenuDropdownImage = EW_SUBMENU_DROPDOWN_IMAGE;"+"\r\n"+"	var $SubMenuDropdownIconClassName = EW_SUBMENU_DROPDOWN_ICON_CLASSNAME;"+"\r\n"+"	var $MenuDividerClassName = EW_MENU_DIVIDER_CLASSNAME;"+"\r\n"+"	var $MenuItemClassName = EW_MENU_ITEM_CLASSNAME;"+"\r\n"+"	var $SubMenuItemClassName = EW_SUBMENU_ITEM_CLASSNAME;"+"\r\n"+"	var $MenuActiveItemClassName = EW_MENU_ACTIVE_ITEM_CLASS;"+"\r\n"+"	var $SubMenuActiveItemClassName = EW_SUBMENU_ACTIVE_ITEM_CLASS;"+"\r\n"+"	var $MenuRootGroupTitleAsSubMenu = EW_MENU_ROOT_GROUP_TITLE_AS_SUBMENU;"+"\r\n"+"	var $ShowRightMenu = EW_SHOW_RIGHT_MENU;"+"\r\n"+"	var $MenuLinkDropdownClass = \"\";"+"\r\n"+"	var $MenuLinkClassName = \"\";"+"\r\n"+"	var $IsMobile = FALSE;"+"\r\n"+"	var $IsRoot = FALSE;"+"\r\n"+"	var $NoItem = NULL;"+"\r\n"+"	var $ItemData = array();"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($id, $mobile = FALSE) {"+"\r\n"+"		$this->Id = $id;"+"\r\n"+"		$this->IsMobile = $mobile;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add a menu item"+"\r\n"+"	function AddMenuItem($id, $name, $text, $url, $parentid = -1, $src = \"\", $allowed = TRUE, $grouptitle = FALSE, $customurl = FALSE) {"+"\r\n"+""+"\r\n"+"		if (is_int($url) && is_bool($src)) { // For backward compatibility (without the $name argument)"+"\r\n"+"			list($text, $url, $parentid, $src, $allowed, $grouptitle, $customurl) = array($name, $text, $url, $parentid, $src, $allowed, $grouptitle);"+"\r\n"+"			$name = \"mi_\" . $id;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		$item = new cMenuItem($id, $name, $text, $url, $parentid, $src, $allowed, $grouptitle, $customurl);"+"\r\n"+"		$item->Parent = &$this;"+"\r\n"+""+"\r\n"+"		// Fire MenuItem_Adding event"+"\r\n"+"		if (function_exists(\"MenuItem_Adding\") && !MenuItem_Adding($item))"+"\r\n"+"			return;"+"\r\n"+""+"\r\n"+"		if ($item->ParentId < 0) {"+"\r\n"+"			$this->AddItem($item);"+"\r\n"+"		} else {"+"\r\n"+"			if ($oParentMenu = &$this->FindItem($item->ParentId))"+"\r\n"+"				$oParentMenu->AddItem($item, $this->IsMobile);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add item to internal array"+"\r\n"+"	function AddItem($item) {"+"\r\n"+"		$this->ItemData[] = $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Clear all menu items"+"\r\n"+"	function Clear() {"+"\r\n"+"		$this->ItemData = array();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Find item"+"\r\n"+"	function &FindItem($id) {"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			$item = &$this->ItemData[$i];"+"\r\n"+"			if ($item->Id == $id) {"+"\r\n"+"				return $item;"+"\r\n"+"			} elseif (!is_null($item->SubMenu)) {"+"\r\n"+"				if ($subitem = &$item->SubMenu->FindItem($id))"+"\r\n"+"					return $subitem;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$noitem = $this->NoItem;"+"\r\n"+"		return $noitem;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Find item by menu text"+"\r\n"+"	function &FindItemByText($txt) {"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			$item = &$this->ItemData[$i];"+"\r\n"+"			if ($item->Text == $txt) {"+"\r\n"+"				return $item;"+"\r\n"+"			} elseif (!is_null($item->SubMenu)) {"+"\r\n"+"				if ($subitem = &$item->SubMenu->FindItemByText($txt))"+"\r\n"+"					return $subitem;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$noitem = $this->NoItem;"+"\r\n"+"		return $noitem;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get menu item count"+"\r\n"+"	function Count() {"+"\r\n"+"		return count($this->ItemData);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Move item to position"+"\r\n"+"	function MoveItem($Text, $Pos) {"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		if ($Pos < 0) {"+"\r\n"+"			$Pos = 0;"+"\r\n"+"		} elseif ($Pos >= $cnt) {"+"\r\n"+"			$Pos = $cnt - 1;"+"\r\n"+"		}"+"\r\n"+"		$item = NULL;"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($this->ItemData[$i]->Text == $Text) {"+"\r\n"+"				$item = $this->ItemData[$i];"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($item) {"+"\r\n"+"			unset($this->ItemData[$i]);"+"\r\n"+"			$this->ItemData = array_merge(array_slice($this->ItemData, 0, $Pos),"+"\r\n"+"				array($item), array_slice($this->ItemData, $Pos));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if sub menu should be shown"+"\r\n"+"	function RenderSubMenu($item) {"+"\r\n"+"		if (!is_null($item->SubMenu)) {"+"\r\n"+"			foreach ($item->SubMenu->ItemData as $subitem) {"+"\r\n"+"				if ($item->SubMenu->RenderItem($subitem))"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if a menu item should be shown"+"\r\n"+"	function RenderItem($item) {"+"\r\n"+"		if (!is_null($item->SubMenu)) {"+"\r\n"+"			foreach ($item->SubMenu->ItemData as $subitem) {"+"\r\n"+"				if ($item->SubMenu->RenderItem($subitem))"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return ($item->Allowed && $item->Url <> \"\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Check if this menu should be rendered"+"\r\n"+"	function RenderMenu() {"+"\r\n"+"		foreach ($this->ItemData as $item) {"+"\r\n"+"			if ($this->RenderItem($item))"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render the menu"+"\r\n"+"	function Render($ret = FALSE) {"+"\r\n"+"		if (function_exists(\"Menu_Rendering\") && $this->IsRoot) Menu_Rendering($this);"+"\r\n"+"		if (!$this->RenderMenu())"+"\r\n"+"			return;"+"\r\n"+"		if (!$this->IsMobile) {"+"\r\n"+"			if ($this->IsRoot) {"+"\r\n"+"				$str = \"<ul\";"+"\r\n"+"				if ($this->Id <> \"\") {"+"\r\n"+"					if (is_numeric($this->Id)) {"+"\r\n"+"						$str .= \" id=\\\"menu_\" . $this->Id . \"\\\"\";"+"\r\n"+"					} else {"+"\r\n"+"						$str .= \" id=\\\"\" . $this->Id . \"\\\"\";"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$str .= \" class=\\\"\" . $this->MenuClassName . \"\\\">\\n\";"+"\r\n"+"			} else {"+"\r\n"+"				$str = \"<ul class=\\\"\" . $this->SubMenuClassName . \"\\\" role=\\\"menu\\\">\\n\";"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$str = \"\";"+"\r\n"+"		}"+"\r\n"+"		$gcnt = 0; // Group count"+"\r\n"+"		$gtitle = FALSE; // Last item is group title"+"\r\n"+"		$i = 0; // Menu item count"+"\r\n"+"		$cururl = substr(ew_CurrentUrl(), strrpos(ew_CurrentUrl(), \"/\")+1);"+"\r\n"+"		foreach ($this->ItemData as $item) {"+"\r\n"+"			if ($this->RenderItem($item)) {"+"\r\n"+"				$i++;"+"\r\n"+"				if (!$this->IsMobile && $gtitle && ($gcnt >= 1 || $this->IsRoot)) // add divider for previous group"+"\r\n"+"					$str .= \"<li class=\\\"\" . $this->MenuDividerClassName . \"\\\"></li>\\n\";"+"\r\n"+"				if ($item->GroupTitle && (!$this->IsRoot || !$this->MenuRootGroupTitleAsSubMenu)) { // Group title"+"\r\n"+"					$gtitle = TRUE;"+"\r\n"+"					$gcnt += 1;"+"\r\n"+"					if (strval($item->Text) <> \"\") {"+"\r\n"+"						if ($this->IsMobile)"+"\r\n"+"							$str .= \"<li data-role=\\\"list-divider\\\">\" . $item->Text . \"</li>\\n\";"+"\r\n"+"						else"+"\r\n"+"							$str .= \"<li class=\\\"dropdown-header\\\">\" . $item->Text . \"</li>\\n\";"+"\r\n"+"					}"+"\r\n"+"					if (!is_null($item->SubMenu)) {"+"\r\n"+"						foreach ($item->SubMenu->ItemData as $subitem) {"+"\r\n"+"							$liclass = !is_null($subitem->SubMenu) && $this->RenderSubMenu($subitem) ? $this->SubMenuItemClassName : \"\";"+"\r\n"+"							$aclass = \"\";"+"\r\n"+"							if (!$subitem->IsCustomUrl && ew_CurrentPage() == ew_GetPageName($subitem->Url) || $subitem->IsCustomUrl && $cururl == $subitem->Url) {"+"\r\n"+"								ew_AppendClass($liclass, $this->MenuActiveItemClassName);"+"\r\n"+"								$subitem->Url = \"javascript:void(0);\";"+"\r\n"+"							}"+"\r\n"+"							if ($this->RenderItem($subitem)) {"+"\r\n"+"								if ($this->IsMobile && $item->GroupTitle)"+"\r\n"+"									ew_AppendClass($aclass, \"ewIndent\");"+"\r\n"+"								$str .= $subitem->Render($aclass, $liclass, $this->IsMobile) . \"\\n\"; // Create <LI>"+"\r\n"+"							}"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"				} else {"+"\r\n"+"					$gtitle = FALSE;"+"\r\n"+"					$liclass = !is_null($item->SubMenu) && $this->RenderSubMenu($item) ? ($this->IsRoot ? $this->MenuItemClassName : $this->SubMenuItemClassName) : \"\";"+"\r\n"+"					$aclass = \"\";"+"\r\n"+"					if (!$item->IsCustomUrl && ew_CurrentPage() == ew_GetPageName($item->Url) || $item->IsCustomUrl && $cururl == $item->Url) {"+"\r\n"+"						if ($this->IsRoot)"+"\r\n"+"							ew_AppendClass($liclass, $this->MenuActiveItemClassName);"+"\r\n"+"						else"+"\r\n"+"							ew_AppendClass($liclass, $this->SubMenuActiveItemClassName);"+"\r\n"+"						$item->Url = \"javascript:void(0);\";"+"\r\n"+"					}"+"\r\n"+"					$str .= $item->Render($aclass, $liclass, $this->IsMobile) . \"\\n\"; // Create <LI>"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($this->IsMobile) {"+"\r\n"+"			$str = \"<ul data-role=\\\"listview\\\" data-filter=\\\"true\\\">\" . $str . \"</ul>\\n\";"+"\r\n"+"		} elseif ($this->IsRoot) {"+"\r\n"+"			$str .= \"</ul>\\n\";"+"\r\n"+"			if (EW_MENUBAR_BRAND <> \"\") {"+"\r\n"+"				$brandhref = (EW_MENUBAR_BRAND_HYPERLINK == \"\") ? \"#\" : EW_MENUBAR_BRAND_HYPERLINK;"+"\r\n"+"				$str = \"<a class=\\\"navbar-brand hidden-xs\\\" href=\\\"\" . ew_HtmlEncode($brandhref) . \"\\\">\" . EW_MENUBAR_BRAND . \"</a>\" . $str;"+"\r\n"+"			}"+"\r\n"+"			// Add right menu"+"\r\n"+"			if ($this->ShowRightMenu)"+"\r\n"+"				$str .= \"<ul class=\\\"nav navbar-nav navbar-right\\\"></ul>\";"+"\r\n"+"			if ($this->MenuBarClassName <> \"\")"+"\r\n"+"				$str = \"<div class=\\\"\" . $this->MenuBarClassName . \"\\\">\" . $str . \"</div>\";"+"\r\n"+"		} else {"+"\r\n"+"			$str .= \"</ul>\\n\";"+"\r\n"+"		}"+"\r\n"+"		if ($ret) // Return as string"+"\r\n"+"			return $str;"+"\r\n"+"		echo $str; // Output"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Menu item class"+"\r\n"+"class cMenuItem {"+"\r\n"+""+"\r\n"+"	var $Id;"+"\r\n"+"	var $Name;"+"\r\n"+"	var $Text;"+"\r\n"+"	var $Url;"+"\r\n"+"	var $ParentId; "+"\r\n"+"	var $SubMenu = NULL; // Data type = cMenu"+"\r\n"+"	var $Source;"+"\r\n"+"	var $Allowed = TRUE;"+"\r\n"+"	var $Target;"+"\r\n"+"	var $GroupTitle;"+"\r\n"+"	var $IsCustomUrl;"+"\r\n"+"	var $Parent;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($id, $name, $text, $url, $parentid = -1, $src = \"\", $allowed = TRUE, $grouptitle = FALSE, $customurl = FALSE) {"+"\r\n"+"		$this->Id = $id;"+"\r\n"+"		$this->Name = $name;"+"\r\n"+"		$this->Text = $text;"+"\r\n"+"		$this->Url = $url;"+"\r\n"+"		$this->ParentId = $parentid;"+"\r\n"+"		$this->Source = $src;"+"\r\n"+"		$this->Allowed = $allowed;"+"\r\n"+"		$this->GroupTitle = $grouptitle;"+"\r\n"+"		$this->IsCustomUrl = $customurl;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add submenu item"+"\r\n"+"	function AddItem($item, $mobile = FALSE) {"+"\r\n"+"		if (is_null($this->SubMenu)) {"+"\r\n"+"			$this->SubMenu = new cMenu($this->Id, $mobile);"+"\r\n"+"			$this->SubMenu->MenuBarClassName = $this->Parent->MenuBarClassName;"+"\r\n"+"			$this->SubMenu->MenuClassName = $this->Parent->MenuClassName;"+"\r\n"+"			$this->SubMenu->SubMenuClassName = $this->Parent->SubMenuClassName;"+"\r\n"+"			$this->SubMenu->SubMenuDropdownImage = $this->Parent->SubMenuDropdownImage;"+"\r\n"+"			$this->SubMenu->SubMenuDropdownIconClassName = $this->Parent->SubMenuDropdownIconClassName;"+"\r\n"+"			$this->SubMenu->MenuDividerClassName = $this->Parent->MenuDividerClassName;"+"\r\n"+"			$this->SubMenu->MenuItemClassName = $this->Parent->MenuItemClassName;"+"\r\n"+"			$this->SubMenu->SubMenuItemClassName = $this->Parent->SubMenuItemClassName;"+"\r\n"+"			$this->SubMenu->MenuActiveItemClassName = $this->Parent->MenuActiveItemClassName;"+"\r\n"+"			$this->SubMenu->SubMenuActiveItemClassName = $this->Parent->SubMenuActiveItemClassName;"+"\r\n"+"			$this->SubMenu->MenuRootGroupTitleAsSubMenu = $this->Parent->MenuRootGroupTitleAsSubMenu;"+"\r\n"+"			$this->SubMenu->MenuLinkDropdownClass = $this->Parent->MenuLinkDropdownClass;"+"\r\n"+"			$this->SubMenu->MenuLinkClassName = $this->Parent->MenuLinkClassName;"+"\r\n"+"		}"+"\r\n"+"		$this->SubMenu->AddItem($item);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Render"+"\r\n"+"	function Render($aclass = \"\", $liclass = \"\", $mobile = FALSE) {"+"\r\n"+"		// Create <A>"+"\r\n"+"		$url = ew_GetUrl($this->Url);"+"\r\n"+"		if (!is_null($this->SubMenu))"+"\r\n"+"			$submenuhtml = $this->SubMenu->Render(TRUE);"+"\r\n"+"		else"+"\r\n"+"			$submenuhtml = \"\";"+"\r\n"+"		if ($mobile) {"+"\r\n"+"			$url = str_replace(\"#\",\"?chart=\",$url);"+"\r\n"+"			if ($url == \"\") $url = \"#\";"+"\r\n"+"			$attrs = array(\"class\" => $aclass, \"rel\" => ($url != \"#\") ? \"external\" : \"\", \"href\" => $url, \"target\" => $this->Target);"+"\r\n"+"		} else {"+"\r\n"+"			if ($url == \"\") $url = \"#\";"+"\r\n"+"			if (!is_null($this->SubMenu) && $this->SubMenu->MenuLinkDropdownClass <> \"\" && $submenuhtml <> \"\")"+"\r\n"+"				ew_PrependClass($aclass, $this->SubMenu->MenuLinkDropdownClass);"+"\r\n"+"			$attrs = array(\"class\" => $aclass, \"href\" => $url, \"target\" => $this->Target);"+"\r\n"+"		}"+"\r\n"+"		$text = $this->Text;"+"\r\n"+"		if (!is_null($this->SubMenu) && $submenuhtml <> \"\") {"+"\r\n"+"			if ($this->Parent->SubMenuDropdownIconClassName <> \"\")"+"\r\n"+"				$text .= \"<span class=\\\"\" . $this->Parent->SubMenuDropdownIconClassName . \"\\\"></span>\";"+"\r\n"+"			if ($this->Parent->SubMenuDropdownImage <> \"\" && $this->ParentId == -1)"+"\r\n"+"				$text .= $this->Parent->SubMenuDropdownImage;"+"\r\n"+"		}"+"\r\n"+"		$innerhtml = ew_HtmlElement(\"a\", $attrs, $text);"+"\r\n"+"		if (!is_null($this->SubMenu)) {"+"\r\n"+"			if ($url <> \"#\" && $this->SubMenu->MenuLinkClassName <> \"\" && $submenuhtml <> \"\") { // Add click link for mobile menu"+"\r\n"+"				$attrs2 = array(\"class\" => \"ewMenuLink\", \"href\" => $url);"+"\r\n"+"				$text2 = \"<span class=\\\"\" . $this->SubMenu->MenuLinkClassName . \"\\\"></span>\";"+"\r\n"+"				$innerhtml = ew_HtmlElement(\"a\", $attrs2, $text2) . $innerhtml;"+"\r\n"+"			}"+"\r\n"+"			if ($mobile && $this->Url <> \"#\")"+"\r\n"+"				$innerhtml .= $innerhtml;"+"\r\n"+"			$innerhtml .= $submenuhtml;"+"\r\n"+"		}"+"\r\n"+"		// Create <LI>"+"\r\n"+"		return ew_HtmlElement(\"li\", array(\"id\" => $this->Name, \"class\" => $liclass), $innerhtml);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Menu Rendering event"+"\r\n"+"";
ewAr[7] = ""+"\r\n"+"// MenuItem Adding event"+"\r\n"+"";
ewAr[8] = ""+"\r\n"+""+"\r\n"+"// Output SCRIPT tag"+"\r\n"+"function ew_AddClientScript($src, $attrs = NULL) {"+"\r\n"+"	$atts = array(\"type\"=>\"text/javascript\", \"src\"=>$src);"+"\r\n"+"	if (is_array($attrs))"+"\r\n"+"		$atts = array_merge($atts, $attrs);"+"\r\n"+"	echo ew_HtmlElement(\"script\", $atts, \"\") . \"\\n\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Output LINK tag"+"\r\n"+"function ew_AddStylesheet($href, $attrs = NULL) {"+"\r\n"+"	$atts = array(\"rel\"=>\"stylesheet\", \"type\"=>\"text/css\", \"href\"=>$href);"+"\r\n"+"	if (is_array($attrs))"+"\r\n"+"		$atts = array_merge($atts, $attrs);"+"\r\n"+"	echo ew_HtmlElement(\"link\", $atts, \"\", FALSE) . \"\\n\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is Boolean attribute"+"\r\n"+"function ew_IsBooleanAttr($attr) {"+"\r\n"+"	global $EW_BOOLEAN_HTML_ATTRIBUTES;"+"\r\n"+"	return in_array(strtolower($attr), $EW_BOOLEAN_HTML_ATTRIBUTES);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Build HTML element"+"\r\n"+"function ew_HtmlElement($tagname, $attrs, $innerhtml = \"\", $endtag = TRUE) {"+"\r\n"+"	$html = \"<\" . $tagname;"+"\r\n"+"	if (is_array($attrs)) {"+"\r\n"+"		foreach ($attrs as $k => $v) {"+"\r\n"+"			$k = trim($k);"+"\r\n"+"			$v = trim($v);"+"\r\n"+"			if ($k <> \"\" && ($v <> \"\" || ew_IsBooleanAttr($k))) { // Allow boolean attributes, e.g. \"disabled\""+"\r\n"+"				$html .= \" \" . $k;"+"\r\n"+"				if ($v <> \"\")"+"\r\n"+"					$html .= \"=\\\"\" . ew_HtmlEncode($v) . \"\\\"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$html .= \">\";"+"\r\n"+"	if (strval($innerhtml) <> \"\")"+"\r\n"+"		$html .= $innerhtml;"+"\r\n"+"	if ($endtag)"+"\r\n"+"		$html .= \"</\" . $tagname . \">\";"+"\r\n"+"	return $html;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode html"+"\r\n"+"function ew_HtmlEncode($exp) {"+"\r\n"+"	return @htmlspecialchars(strval($exp), ENT_COMPAT | ENT_HTML5, EW_ENCODING);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get title"+"\r\n"+"function ew_HtmlTitle($name) {"+"\r\n"+"	if (preg_match('/\\s+title\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $name, $matches)) { // Match title='title'"+"\r\n"+"		return $matches[1];"+"\r\n"+"	} elseif (preg_match('/\\s+data-caption\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $name, $matches)) { // Match data-caption='caption'"+"\r\n"+"		return $matches[1];"+"\r\n"+"	} else {"+"\r\n"+"		return $name;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get title and image"+"\r\n"+"function ew_HtmlImageAndText($name) {"+"\r\n"+"	if (preg_match('/<span([^>]*)>([\\s\\S]*?)<\\/span\\s*>/i', $name) || preg_match('/<img([^>]*)>/i', $name))"+"\r\n"+"		$title = ew_HtmlTitle($name);"+"\r\n"+"	else"+"\r\n"+"		$title = $name;"+"\r\n"+"	return ($title <> $name) ? $name . \"&nbsp;\" . $title : $name;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// XML tag name"+"\r\n"+"function ew_XmlTagName($name) {"+"\r\n"+"	if (!preg_match('/\\A(?!XML)[a-z][\\w0-9-]*/i', $name))"+"\r\n"+"		$name = \"_\" . $name;"+"\r\n"+"	return $name;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Debug timer"+"\r\n"+"class cTimer {"+"\r\n"+"	var $StartTime;"+"\r\n"+"	var $EndTime;"+"\r\n"+"	"+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($start = TRUE) {"+"\r\n"+"		if ($start)"+"\r\n"+"			$this->Start();"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get time"+"\r\n"+"	function GetTime() {"+"\r\n"+"		list($usec, $sec) = explode(\" \", microtime());"+"\r\n"+"		return ((float)$usec + (float)$sec);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get script start time"+"\r\n"+"	function Start() {"+"\r\n"+"		if (EW_DEBUG_ENABLED)"+"\r\n"+"			$this->StartTime = $this->GetTime();"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Display elapsed time (in seconds)"+"\r\n"+"	function Stop() {"+"\r\n"+"		if (EW_DEBUG_ENABLED)"+"\r\n"+"			$this->EndTime = $this->GetTime();"+"\r\n"+"		if (isset($this->EndTime) && isset($this->StartTime) &&"+"\r\n"+"			$this->EndTime > $this->StartTime)"+"\r\n"+"			echo \"<div class=\\\"alert alert-info ewAlert\\\">Page processing time: \" . ($this->EndTime - $this->StartTime) . \" seconds</div>\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert XML to array"+"\r\n"+"function ew_Xml2Array($contents) {"+"\r\n"+"	if (!$contents) return array(); "+"\r\n"+"	"+"\r\n"+"	if (!function_exists('xml_parser_create')) return FALSE;"+"\r\n"+"	"+"\r\n"+"	$get_attributes = 1; // Always get attributes. DO NOT CHANGE!"+"\r\n"+""+"\r\n"+"	// Get the XML Parser of PHP"+"\r\n"+"	$parser = xml_parser_create();"+"\r\n"+"	xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, \"UTF-8\"); // Always return in utf-8"+"\r\n"+"	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);"+"\r\n"+"	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);"+"\r\n"+"	xml_parse_into_struct($parser, trim($contents), $xml_values);"+"\r\n"+"	xml_parser_free($parser);"+"\r\n"+"	"+"\r\n"+"	if (!$xml_values) return;"+"\r\n"+"	"+"\r\n"+"	$xml_array = array();"+"\r\n"+"	$parents = array();"+"\r\n"+"	$opened_tags = array();"+"\r\n"+"	$arr = array();"+"\r\n"+"	"+"\r\n"+"	$current = &$xml_array;"+"\r\n"+"	"+"\r\n"+"	$repeated_tag_index = array(); // Multiple tags with same name will be turned into an array"+"\r\n"+"	"+"\r\n"+"	foreach ($xml_values as $data) {"+"\r\n"+"	"+"\r\n"+"		unset($attributes, $value); // Remove existing values"+"\r\n"+"		"+"\r\n"+"		// Extract these variables into the foreach scope"+"\r\n"+"		// - tag(string), type(string), level(int), attributes(array)"+"\r\n"+"		extract($data);"+"\r\n"+"		"+"\r\n"+"		$result = array();"+"\r\n"+"		 "+"\r\n"+"		if (isset($value))"+"\r\n"+"			$result['value'] = $value; // Put the value in a assoc array"+"\r\n"+"		"+"\r\n"+"		// Set the attributes"+"\r\n"+"		if (isset($attributes) and $get_attributes) {"+"\r\n"+"			foreach ($attributes as $attr => $val)"+"\r\n"+"				$result['attr'][$attr] = $val; // Set all the attributes in a array called 'attr'"+"\r\n"+"		} "+"\r\n"+"		"+"\r\n"+"		// See tag status and do the needed"+"\r\n"+"		if ($type == \"open\") { // The starting of the tag '<tag>'"+"\r\n"+"		"+"\r\n"+"			$parent[$level-1] = &$current;"+"\r\n"+"			if (!is_array($current) || !in_array($tag, array_keys($current))) { // Insert New tag"+"\r\n"+"				if ($tag <> 'ew-language' && @$result['attr']['id'] <> '') { // "+"\r\n"+"					$last_item_index = $result['attr']['id'];"+"\r\n"+"					$current[$tag][$last_item_index] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level] = 1;"+"\r\n"+"					$current = &$current[$tag][$last_item_index];"+"\r\n"+"				} else {"+"\r\n"+"					$current[$tag] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level] = 0;"+"\r\n"+"					$current = &$current[$tag];"+"\r\n"+"				}"+"\r\n"+"			} else { // Another element with the same tag name"+"\r\n"+"				if ($repeated_tag_index[$tag.'_'.$level] > 0) { // If there is a 0th element it is already an array"+"\r\n"+"					if (@$result['attr']['id'] <> '') {"+"\r\n"+"						$last_item_index = $result['attr']['id'];"+"\r\n"+"					} else {"+"\r\n"+"						$last_item_index = $repeated_tag_index[$tag.'_'.$level];"+"\r\n"+"					}"+"\r\n"+"					$current[$tag][$last_item_index] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level]++;"+"\r\n"+"				} else { // Make the value an array if multiple tags with the same name appear together"+"\r\n"+"					$temp = $current[$tag];"+"\r\n"+"					$current[$tag] = array();"+"\r\n"+"					if (@$temp['attr']['id'] <> '') {"+"\r\n"+"						$current[$tag][$temp['attr']['id']] = $temp;"+"\r\n"+"					} else {"+"\r\n"+"						$current[$tag][] = $temp;"+"\r\n"+"					}"+"\r\n"+"					if (@$result['attr']['id'] <> '') {"+"\r\n"+"						$last_item_index = $result['attr']['id'];"+"\r\n"+"					} else {"+"\r\n"+"						$last_item_index = 1;"+"\r\n"+"					}"+"\r\n"+"					$current[$tag][$last_item_index] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level] = 2;"+"\r\n"+"				} "+"\r\n"+"				$current = &$current[$tag][$last_item_index];"+"\r\n"+"			}"+"\r\n"+"		"+"\r\n"+"		} elseif ($type == \"complete\") { // Tags that ends in one line '<tag />'"+"\r\n"+"		"+"\r\n"+"			if (!isset($current[$tag])) { // New key"+"\r\n"+"				$current[$tag] = array(); // Always use array for \"complete\" type"+"\r\n"+"				if (@$result['attr']['id'] <> '') {"+"\r\n"+"					$current[$tag][$result['attr']['id']] = $result;"+"\r\n"+"				} else {"+"\r\n"+"					$current[$tag][] = $result;"+"\r\n"+"				}"+"\r\n"+"				$repeated_tag_index[$tag.'_'.$level] = 1;"+"\r\n"+"			} else { // Existing key"+"\r\n"+"				if (@$result['attr']['id'] <> '') {"+"\r\n"+"					$current[$tag][$result['attr']['id']] = $result;"+"\r\n"+"				} else {"+"\r\n"+"					$current[$tag][$repeated_tag_index[$tag.'_'.$level]] = $result;"+"\r\n"+"				}"+"\r\n"+"				$repeated_tag_index[$tag.'_'.$level]++;"+"\r\n"+"			}"+"\r\n"+"		"+"\r\n"+"		} elseif ($type == 'close') { // End of tag '</tag>'"+"\r\n"+"			$current = &$parent[$level-1];"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	 "+"\r\n"+"	return($xml_array);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode value for double-quoted Javascript string"+"\r\n"+"function ew_JsEncode2($val) {"+"\r\n"+"	$val = strval($val);"+"\r\n"+"	if (EW_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ew_ConvertToUtf8($val);"+"\r\n"+"	$val = str_replace(\"\\\\\", \"\\\\\\\\\", $val);"+"\r\n"+"	$val = str_replace(\"\\\"\", \"\\\\\\\"\", $val);"+"\r\n"+"	$val = str_replace(\"\\t\", \"\\\\t\", $val);"+"\r\n"+"	$val = str_replace(\"\\r\", \"\\\\r\", $val);"+"\r\n"+"	$val = str_replace(\"\\n\", \"\\\\n\", $val);"+"\r\n"+"	if (EW_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ew_ConvertFromUtf8($val);"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode value to single-quoted Javascript string for HTML attributes"+"\r\n"+"function ew_JsEncode3($val) {"+"\r\n"+"	$val = strval($val);"+"\r\n"+"	if (EW_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ew_ConvertToUtf8($val);"+"\r\n"+"	$val = str_replace(\"\\\\\", \"\\\\\\\\\", $val);"+"\r\n"+"	$val = str_replace(\"'\", \"\\\\'\", $val);"+"\r\n"+"	$val = str_replace(\"\\\"\", \"&quot;\", $val);"+"\r\n"+"	if (EW_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ew_ConvertFromUtf8($val);"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert array to JSON for HTML attributes"+"\r\n"+"function ew_ArrayToJsonAttr($ar) {"+"\r\n"+"	$Str = \"{\";"+"\r\n"+"	foreach ($ar as $key => $val)"+"\r\n"+"		$Str .= $key . \":'\" . ew_JsEncode3($val) . \"',\";"+"\r\n"+"	if (substr($Str, -1) == \",\") $Str = substr($Str, 0, strlen($Str)-1);"+"\r\n"+"	$Str .= \"}\";"+"\r\n"+"	return $Str;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current page name"+"\r\n"+"function ew_CurrentPage() {"+"\r\n"+"	return ew_GetPageName(ew_ScriptName());"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get page name"+"\r\n"+"function ew_GetPageName($url) {"+"\r\n"+"	$PageName = \"\";"+"\r\n"+"	if ($url <> \"\") {"+"\r\n"+"		$PageName = $url;"+"\r\n"+"		$p = strpos($PageName, \"?\");"+"\r\n"+"		if ($p !== FALSE)"+"\r\n"+"			$PageName = substr($PageName, 0, $p); // Remove QueryString"+"\r\n"+"		$p = strrpos($PageName, \"/\");"+"\r\n"+"		if ($p !== FALSE)"+"\r\n"+"			$PageName = substr($PageName, $p+1); // Remove path"+"\r\n"+"	}"+"\r\n"+"	return $PageName;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user levels as array of user level IDs"+"\r\n"+"function CurrentUserLevels() {"+"\r\n"+"	global $Security;"+"\r\n"+"	if (isset($Security)) {"+"\r\n"+"		return $Security->UserLevelID;"+"\r\n"+"	} else {"+"\r\n"+"		if (isset($_SESSION[EW_SESSION_USER_LEVEL_ID])) {"+"\r\n"+"			return array($_SESSION[EW_SESSION_USER_LEVEL_ID]);"+"\r\n"+"		} else {"+"\r\n"+"			return array();"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if menu item is allowed for current user level"+"\r\n"+"function AllowListMenu($TableName) {"+"\r\n"+"	if (IsLoggedIn()) { // Get user level ID list as array"+"\r\n"+"		$userlevels = CurrentUserLevels(); // Get user level ID list as array"+"\r\n"+"	} else { // Get anonymous user id"+"\r\n"+"		$userlevels = array(-2);"+"\r\n"+"	}"+"\r\n"+"	if (in_array(\"-1\", $userlevels)) {"+"\r\n"+"		return TRUE;"+"\r\n"+"	} else {"+"\r\n"+"		$priv = 0;"+"\r\n"+"		if (is_array(@$_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV])) {"+"\r\n"+"			foreach ($_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV] as $row) {"+"\r\n"+"				if (strval($row[0]) == strval($TableName) &&"+"\r\n"+"					in_array($row[1], $userlevels)) {"+"\r\n"+"					$thispriv = $row[2];"+"\r\n"+"					if (is_null($thispriv))"+"\r\n"+"						$thispriv = 0;"+"\r\n"+"					$thispriv = intval($thispriv);"+"\r\n"+"					$priv = $priv | $thispriv;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return ($priv & EW_ALLOW_LIST);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get script name"+"\r\n"+"if (!function_exists(\"ew_ScriptName\")) {"+"\r\n"+"	function ew_ScriptName() {"+"\r\n"+"		$sn = ew_ServerVar(\"SCRIPT_NAME\");"+"\r\n"+"		if (empty($sn)) $sn = ew_ServerVar(\"URL\");"+"\r\n"+"		if (empty($sn)) $sn = ew_ServerVar(\"PHP_SELF\");"+"\r\n"+"		if (empty($sn)) $sn = ew_ServerVar(\"ORIG_PATH_INFO\");"+"\r\n"+"		//if (empty($sn)) $sn = ew_ServerVar(\"ORIG_SCRIPT_NAME\");"+"\r\n"+"		if (empty($sn)) $sn = ew_ServerVar(\"REQUEST_URI\");"+"\r\n"+"		if (empty($sn)) $sn = \"UNKNOWN\";"+"\r\n"+"		return $sn;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get server variable by name"+"\r\n"+"function ew_ServerVar($Name) {"+"\r\n"+"	$str = @$_SERVER[$Name];"+"\r\n"+"	if (empty($str)) $str = @$_ENV[$Name];"+"\r\n"+"	return $str;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get jQuery files host"+"\r\n"+"function ew_jQueryHost() {"+"\r\n"+"	return \"jquery/\"; // Use local files"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get css file"+"\r\n"+"function ew_CssFile($f) {"+"\r\n"+"	if (EW_CSS_FLIP)"+"\r\n"+"		return preg_replace('/(.css)$/i', \"-rtl.css\", $f);"+"\r\n"+"	else"+"\r\n"+"		return $f;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if HTTPS"+"\r\n"+"function ew_IsHttps() {"+"\r\n"+"	return (ew_ServerVar(\"HTTPS\") <> \"\" && ew_ServerVar(\"HTTPS\") <> \"off\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get domain URL"+"\r\n"+"function ew_DomainUrl() {"+"\r\n"+"	$sUrl = \"http\";"+"\r\n"+"	$bSSL = ew_IsHttps();"+"\r\n"+"	$sPort = strval(ew_ServerVar(\"SERVER_PORT\"));"+"\r\n"+"	$defPort = ($bSSL) ? \"443\" : \"80\";"+"\r\n"+"	$sPort = ($sPort == $defPort) ? \"\" : \":$sPort\";"+"\r\n"+"	$sUrl .= ($bSSL) ? \"s\" : \"\";"+"\r\n"+"	$sUrl .= \"://\";"+"\r\n"+"	$sUrl .= ew_ServerVar(\"SERVER_NAME\") . $sPort;"+"\r\n"+"	return $sUrl;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get full URL"+"\r\n"+"function ew_FullUrl() {"+"\r\n"+"	return ew_DomainUrl() . ew_ScriptName();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current URL"+"\r\n"+"function ew_CurrentUrl() {"+"\r\n"+"	$s = ew_ScriptName();"+"\r\n"+"	$q = ew_ServerVar(\"QUERY_STRING\");"+"\r\n"+"	if ($q <> \"\") $s .= \"?\" . $q;"+"\r\n"+"	return $s;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert to full URL"+"\r\n"+"function ew_ConvertFullUrl($url) {"+"\r\n"+"	if ($url == \"\") return \"\";"+"\r\n"+"	$sUrl = ew_FullUrl();"+"\r\n"+"	return substr($sUrl, 0, strrpos($sUrl, \"/\")+1) . $url;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get relative url"+"\r\n"+"function ew_GetUrl($url) {"+"\r\n"+"	global $EW_RELATIVE_PATH;"+"\r\n"+"	if ($url != \"\" && strpos($url, \"://\") === FALSE && strpos($url, \"\\\\\") === FALSE && strpos($url, \"javascript:\") === FALSE) {"+"\r\n"+"		$path = \"\";"+"\r\n"+"		if (strrpos($url, \"/\") !== FALSE) {"+"\r\n"+"			$path = substr($url, 0, strrpos($url, \"/\"));"+"\r\n"+"			$url = substr($url, strrpos($url, \"/\")+1); "+"\r\n"+"		}"+"\r\n"+"		$path = ew_PathCombine($EW_RELATIVE_PATH, $path, FALSE);"+"\r\n"+"		if ($path <> \"\") $path = ew_IncludeTrailingDelimiter($path, FALSE);"+"\r\n"+"		return $path . $url;"+"\r\n"+"	} else {"+"\r\n"+"		return $url;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Include mobiledetect.php"+"\r\n"+"include_once(\"";
ewAr[9] = "\");"+"\r\n"+""+"\r\n"+"// Check if mobile device"+"\r\n"+"function ew_IsMobile() {"+"\r\n"+"	global $MobileDetect;"+"\r\n"+"	if (!isset($MobileDetect))"+"\r\n"+"		$MobileDetect = new Mobile_Detect;"+"\r\n"+"	return $MobileDetect->isMobile();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if responsive layout"+"\r\n"+"function ew_IsResponsiveLayout() {"+"\r\n"+"	return $GLOBALS['EW_USE_RESPONSIVE_LAYOUT'];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Execute UPDATE, INSERT, or DELETE statements"+"\r\n"+"if (!function_exists('ew_Execute')) {"+"\r\n"+"	function ew_Execute($SQL, $fn = NULL, $c = NULL) {"+"\r\n"+"		if (is_null($c) && is_object($fn) && method_exists($fn, \"Execute\"))"+"\r\n"+"			$c = $fn;"+"\r\n"+"		$conn = ($c) ? $c : $GLOBALS[\"conn\"];"+"\r\n"+"		$conn->raiseErrorFn = $GLOBALS[\"EW_ERROR_FN\"];"+"\r\n"+"		$rs = $conn->Execute($SQL);"+"\r\n"+"		$conn->raiseErrorFn = '';"+"\r\n"+"		if (is_callable($fn) && $rs) {"+"\r\n"+"			while (!$rs->EOF) {"+"\r\n"+"				$fn($rs->fields);"+"\r\n"+"				$rs->MoveNext();"+"\r\n"+"			}"+"\r\n"+"			$rs->MoveFirst();"+"\r\n"+"		}"+"\r\n"+"		return $rs;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the first column of the first row"+"\r\n"+"if (!function_exists('ew_ExecuteScalar')) {"+"\r\n"+"	function ew_ExecuteScalar($SQL, $c = NULL) {"+"\r\n"+"		$res = FALSE;"+"\r\n"+"		$rs = ew_LoadRecordset($SQL, $c);"+"\r\n"+"		if ($rs && !$rs->EOF && $rs->FieldCount() > 0) {"+"\r\n"+"			$res = $rs->fields[0];"+"\r\n"+"			$rs->Close();"+"\r\n"+"		}"+"\r\n"+"		return $res;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the first row"+"\r\n"+"if (!function_exists('ew_ExecuteRow')) {"+"\r\n"+"	function ew_ExecuteRow($SQL, $c = NULL) {"+"\r\n"+"		$res = FALSE;"+"\r\n"+"		$rs = ew_LoadRecordset($SQL, $c);"+"\r\n"+"		if ($rs && !$rs->EOF) {"+"\r\n"+"			$res = $rs->fields;"+"\r\n"+"			$rs->Close();"+"\r\n"+"		}"+"\r\n"+"		return $res;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get result in HTML table"+"\r\n"+"// options: fieldcaption(bool|array), horizontal(bool), tablename(string|array), tableclass(string)"+"\r\n"+"if (!function_exists('ew_ExecuteHtml')) {"+"\r\n"+"	// Get result in HTML table"+"\r\n"+"	function ew_ExecuteHtml($SQL, $options = NULL, $c = NULL) {"+"\r\n"+"		$TableClass = \"table table-bordered table-striped ewDbTable\"; // Table CSS class name"+"\r\n"+"		$ar = is_array($options) ? $options : array();"+"\r\n"+"		$horizontal = (array_key_exists(\"horizontal\", $ar) && $ar[\"horizontal\"]);"+"\r\n"+"		$rs = ew_LoadRecordset($SQL, $c);"+"\r\n"+"		if (!$rs || $rs->EOF || $rs->FieldCount() < 1)"+"\r\n"+"			return \"\";"+"\r\n"+"		$html = \"\";"+"\r\n"+"		$class = (array_key_exists(\"tableclass\", $ar) && $ar[\"tableclass\"]) ? $ar[\"tableclass\"] : $TableClass;"+"\r\n"+"		if ($rs->RecordCount() > 1 || $horizontal) { // Horizontal table"+"\r\n"+"			$cnt = $rs->FieldCount();"+"\r\n"+"			$html = \"<table class=\\\"\" . $class . \"\\\">\";"+"\r\n"+"			$html .= \"<thead><tr>\";"+"\r\n"+"			$row = &$rs->fields;"+"\r\n"+"			foreach ($row as $key => $value) {"+"\r\n"+"				if (!is_numeric($key))"+"\r\n"+"					$html .= \"<th>\" . ew_GetFieldCaption($key, $ar) . \"</th>\";"+"\r\n"+"			}"+"\r\n"+"			$html .= \"</tr></thead>\";"+"\r\n"+"			$html .= \"<tbody>\";"+"\r\n"+"			$rowcnt = 0;"+"\r\n"+"			while (!$rs->EOF) {"+"\r\n"+"				$html .= \"<tr>\";"+"\r\n"+"				$row = &$rs->fields;"+"\r\n"+"				foreach ($row as $key => $value) {"+"\r\n"+"					if (!is_numeric($key))"+"\r\n"+"						$html .= \"<td>\" . $value . \"</td>\";"+"\r\n"+"				}"+"\r\n"+"				$html .= \"</tr>\";"+"\r\n"+"				$rs->MoveNext();"+"\r\n"+"			}"+"\r\n"+"			$html .= \"</tbody></table>\";"+"\r\n"+"		} else { // Single row, vertical table"+"\r\n"+"			$html = \"<table class=\\\"\" . $class . \"\\\"><tbody>\";"+"\r\n"+"			$row = &$rs->fields;"+"\r\n"+"			foreach ($row as $key => $value) {"+"\r\n"+"				if (!is_numeric($key)) {"+"\r\n"+"					$html .= \"<tr>\";"+"\r\n"+"					$html .= \"<td>\" . ew_GetFieldCaption($key, $ar) . \"</td>\";"+"\r\n"+"					$html .= \"<td>\" . $value . \"</td></tr>\";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$html .= \"</tbody></table>\";"+"\r\n"+"		}"+"\r\n"+"		return $html;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get field caption"+"\r\n"+"	function ew_GetFieldCaption($key, $ar) {"+"\r\n"+"		global $Language;"+"\r\n"+"		$caption = \"\";"+"\r\n"+"		if (!is_array($ar))"+"\r\n"+"			return $key;"+"\r\n"+"		$tablename = @$ar[\"tablename\"];"+"\r\n"+"		$usecaption = (array_key_exists(\"fieldcaption\", $ar) && $ar[\"fieldcaption\"]);"+"\r\n"+"		if ($usecaption) {"+"\r\n"+"			if (is_array($ar[\"fieldcaption\"])) {"+"\r\n"+"				$caption = @$ar[\"fieldcaption\"][$key];"+"\r\n"+"			} elseif (isset($Language)) {"+"\r\n"+"				if (is_array($tablename)) {"+"\r\n"+"					foreach ($tablename as $tbl) {"+"\r\n"+"						$caption = @$Language->FieldPhrase($tbl, $key, \"FldCaption\");"+"\r\n"+"						if ($caption <> \"\")"+"\r\n"+"							break;"+"\r\n"+"					}"+"\r\n"+"				} elseif ($tablename <> \"\") {"+"\r\n"+"					$caption = @$Language->FieldPhrase($tablename, $key, \"FldCaption\");"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return ($caption <> \"\") ? $caption : $key;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load recordset"+"\r\n"+"if (!function_exists('ew_LoadRecordset')) {"+"\r\n"+"	function &ew_LoadRecordset($SQL, $c = NULL) {"+"\r\n"+"		$conn = ($c) ? $c : $GLOBALS[\"conn\"];"+"\r\n"+"		$conn->raiseErrorFn = $GLOBALS[\"EW_ERROR_FN\"];"+"\r\n"+"		$rs = $conn->Execute($SQL);"+"\r\n"+"		$conn->raiseErrorFn = '';"+"\r\n"+"		return $rs;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Prepend CSS class name"+"\r\n"+"function ew_PrependClass(&$attr, $classname) {"+"\r\n"+"	$classname = trim($classname);"+"\r\n"+"	if ($classname <> \"\") {"+"\r\n"+"		$attr = trim($attr);"+"\r\n"+"		if ($attr <> \"\")"+"\r\n"+"			$attr = \" \" . $attr;"+"\r\n"+"		$attr = $classname . $attr;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Append CSS class name"+"\r\n"+"function ew_AppendClass(&$attr, $classname) {"+"\r\n"+"	$classname = trim($classname);"+"\r\n"+"	if ($classname <> \"\") {"+"\r\n"+"		$attr = trim($attr);"+"\r\n"+"		if ($attr <> \"\")"+"\r\n"+"			$attr .= \" \";"+"\r\n"+"		$attr .= $classname;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get numeric formatting information"+"\r\n"+"function ew_LocaleConv() {"+"\r\n"+"	$info = defined(\"EW_DEFAULT_LOCALE\") ? json_decode(EW_DEFAULT_LOCALE, TRUE) : NULL;"+"\r\n"+"	return ($info) ? $info : localeconv();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get path relative to a base path"+"\r\n"+"function ew_PathCombine($BasePath, $RelPath, $PhyPath) {"+"\r\n"+"	if (preg_match('/^(http|ftp)s?\\:\\/\\//i', $RelPath)) // Allow remote file"+"\r\n"+"		return $RelPath;"+"\r\n"+"	$Delimiter = ($PhyPath) ? EW_PATH_DELIMITER : '/';"+"\r\n"+"	if ($BasePath <> $Delimiter) // If BasePath = root, do not remove delimiter"+"\r\n"+"		$BasePath = ew_RemoveTrailingDelimiter($BasePath, $PhyPath);"+"\r\n"+"	$RelPath = ($PhyPath) ? str_replace(array('/', '\\\\'), EW_PATH_DELIMITER, $RelPath) : str_replace('\\\\', '/', $RelPath);"+"\r\n"+"	$RelPath = ew_IncludeTrailingDelimiter($RelPath, $PhyPath);"+"\r\n"+"	$p1 = strpos($RelPath, $Delimiter);"+"\r\n"+"	$Path2 = \"\";"+"\r\n"+"	while ($p1 !== FALSE) {"+"\r\n"+"		$Path = substr($RelPath, 0, $p1 + 1);"+"\r\n"+"		if ($Path == $Delimiter || $Path == '.' . $Delimiter) {"+"\r\n"+"			// Skip"+"\r\n"+"		} elseif ($Path == '..' . $Delimiter) {"+"\r\n"+"			$p2 = strrpos($BasePath, $Delimiter);"+"\r\n"+"			if ($p2 === 0) // BasePath = \"/xxx\", cannot move up"+"\r\n"+"				$BasePath = $Delimiter;"+"\r\n"+"			elseif ($p2 !== FALSE && substr($BasePath, -2) <> \"..\")"+"\r\n"+"				$BasePath = substr($BasePath, 0, $p2);"+"\r\n"+"			elseif ($BasePath <> \"\" && $BasePath <> \".\" && $BasePath <> \"..\")"+"\r\n"+"				$BasePath = \"\";"+"\r\n"+"			else"+"\r\n"+"				$Path2 .= \"..\" . $Delimiter;"+"\r\n"+"		} else {"+"\r\n"+"			$Path2 .= $Path;"+"\r\n"+"		}"+"\r\n"+"		$RelPath = substr($RelPath, $p1+1);"+"\r\n"+"		if ($RelPath === FALSE)"+"\r\n"+"			$RelPath = \"\";"+"\r\n"+"		$p1 = strpos($RelPath, $Delimiter);"+"\r\n"+"	}"+"\r\n"+"	return (($BasePath === \"\" || $BasePath === \".\") ? \"\" : ew_IncludeTrailingDelimiter($BasePath, $PhyPath)) . $Path2 . $RelPath;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove the last delimiter for a path"+"\r\n"+"function ew_RemoveTrailingDelimiter($Path, $PhyPath) {"+"\r\n"+"	$Delimiter = ($PhyPath) ? EW_PATH_DELIMITER : '/';"+"\r\n"+"	while (substr($Path, -1) == $Delimiter)"+"\r\n"+"		$Path = substr($Path, 0, strlen($Path)-1);"+"\r\n"+"	return $Path;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Include the last delimiter for a path"+"\r\n"+"function ew_IncludeTrailingDelimiter($Path, $PhyPath) {"+"\r\n"+"	$Path = ew_RemoveTrailingDelimiter($Path, $PhyPath);"+"\r\n"+"	$Delimiter = ($PhyPath) ? EW_PATH_DELIMITER : '/';"+"\r\n"+"	return $Path . $Delimiter;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get session timeout time (seconds)"+"\r\n"+"function ew_SessionTimeoutTime() {"+"\r\n"+"	if (EW_SESSION_TIMEOUT > 0) // User specified timeout time"+"\r\n"+"		$mlt = EW_SESSION_TIMEOUT * 60;"+"\r\n"+"	else // Get max life time from php.ini"+"\r\n"+"		$mlt = intval(ini_get(\"session.gc_maxlifetime\"));"+"\r\n"+"	if ($mlt <= 0)"+"\r\n"+"		$mlt = 1440; // PHP default (1440s = 24min)"+"\r\n"+"	return $mlt - 30; // Add some safety margin"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is auto login (login with option \"Auto login until I logout explicitly\")"+"\r\n"+"function IsAutoLogin() {"+"\r\n"+"	return (@$_SESSION[EW_SESSION_USER_LOGIN_TYPE] == \"a\");"+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";

// *** Start Session sharedfunction (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[1]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Language_Load")) { 
ewSB.Append(ewAr[2]);
 } 
ewSB.Append(ewAr[3]);

		bMultiLanguage = PROJ.MultiLanguage;
		if (bMultiLanguage) {
	
ewSB.Append(ewAr[4]);

		}
	
ewSB.Append(ewAr[5]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Language_Load"));
ewSB.Append(ewAr[6]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Menu_Rendering"));
ewSB.Append(ewAr[7]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","MenuItem_Adding"));
ewSB.Append(ewAr[8]);
ewSB.Append(ew_GetFileNameByCtrlID("mobiledetect"));
ewSB.Append(ewAr[9]);
// *** End Session sharedfunction (key, 2/14/2016 9:08:34 PM)

return ewSB.ToString();
 } catch(e) {
  throw e;
 }
}
