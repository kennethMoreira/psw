function ewExphpmkrfn() {
 try {
var ewAr = new Array();
var ewSB = new StringBuilder();
ew_SetLocale();
ew_LoadCurrent();
ewAr[1] = ""+"\r\n"+"";
ewAr[2] = ""+"\r\n"+"";
ewAr[3] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * PHPMaker Common classes and functions"+"\r\n"+" * (C) 2002-2016 e.World Technology Limited. All rights reserved."+"\r\n"+"*/"+"\r\n"+""+"\r\n"+"";
ewAr[4] = ""+"\r\n"+"// Autoload class"+"\r\n"+"function ew_AutoLoad($class) {"+"\r\n"+"	global $EW_RELATIVE_PATH;"+"\r\n"+"	$file = \"\";"+"\r\n"+"	if ($class == \"GD\") {"+"\r\n"+"		$file = \"phpinc/PHPThumb.php\";"+"\r\n"+"	} elseif ($class == \"Html2Text\\Html2Text\") {"+"\r\n"+"		$file = \"html2text/html2text.php\";"+"\r\n"+"	";
ewAr[5] = ""+"\r\n"+"	} elseif (preg_match('/^c\\w+_db$/', $class)) {"+"\r\n"+"		$file = \"";
ewAr[6] = "\";"+"\r\n"+"	";
ewAr[7] = ""+"\r\n"+"	} elseif (ew_StartsStr(\"c\", $class)) {"+"\r\n"+"		$file = str_replace(\"%cls%\", substr($class, 1), \"";
ewAr[8] = "\");"+"\r\n"+"	";
ewAr[9] = ""+"\r\n"+"		$file = strtolower($file);"+"\r\n"+"	";
ewAr[10] = ""+"\r\n"+"	}"+"\r\n"+"	if ($file <> \"\" && file_exists($EW_RELATIVE_PATH . $file))"+"\r\n"+"		include_once $EW_RELATIVE_PATH . $file;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"";
ewAr[11] = ""+"\r\n"+"// Create Database helper class"+"\r\n"+"function &DbHelper($dbid = \"\") {"+"\r\n"+"";
ewAr[12] = ""+"\r\n"+"	";
ewAr[13] = " ($dbid == \"";
ewAr[14] = "\" || $dbid === ";
ewAr[15] = ") // ";
ewAr[16] = ""+"\r\n"+"		$dbclass = \"c";
ewAr[17] = "_db\";"+"\r\n"+"";
ewAr[18] = ""+"\r\n"+"	else // DB"+"\r\n"+"		$dbclass = \"c";
ewAr[19] = "_db\";"+"\r\n"+"";
ewAr[20] = ""+"\r\n"+"	$dbclass = \"c";
ewAr[21] = "_db\";"+"\r\n"+"";
ewAr[22] = ""+"\r\n"+"	$dbhelper = new $dbclass();"+"\r\n"+"	return $dbhelper;"+"\r\n"+"}"+"\r\n"+"";
ewAr[23] = ""+"\r\n"+""+"\r\n"+"spl_autoload_register(\"ew_AutoLoad\");"+"\r\n"+""+"\r\n"+"// Get page object"+"\r\n"+"function &Page($tblname = \"\") {"+"\r\n"+"	if (!$tblname)"+"\r\n"+"		return $GLOBALS[\"Page\"];"+"\r\n"+"	foreach ($GLOBALS as $k => $v) {"+"\r\n"+"		if (is_object($v) && $k == $tblname)"+"\r\n"+"			return $GLOBALS[$k];"+"\r\n"+"	}"+"\r\n"+"	$res = NULL;"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current language ID"+"\r\n"+"function CurrentLanguageID() {"+"\r\n"+"	return $GLOBALS[\"gsLanguage\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current project ID"+"\r\n"+"function CurrentProjectID() {"+"\r\n"+"	if (isset($GLOBALS[\"Page\"]))"+"\r\n"+"		return $GLOBALS[\"Page\"]->ProjectID;"+"\r\n"+"	return \"";
ewAr[24] = "\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current page object"+"\r\n"+"function &CurrentPage() {"+"\r\n"+"	return $GLOBALS[\"Page\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get user table object"+"\r\n"+"function &UserTable() {"+"\r\n"+"	return $GLOBALS[\"UserTable\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current main table object"+"\r\n"+"function &CurrentTable() {"+"\r\n"+"	return $GLOBALS[\"Table\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current master table object"+"\r\n"+"function &CurrentMasterTable() {"+"\r\n"+"	$res = NULL;"+"\r\n"+"	$tbl = &CurrentTable();"+"\r\n"+"	if ($tbl && method_exists($tbl, \"getCurrentMasterTable\") && $tbl->getCurrentMasterTable() <> \"\")"+"\r\n"+"		$res = $GLOBALS[$tbl->getCurrentMasterTable()];"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current detail table object"+"\r\n"+"function &CurrentDetailTable() {"+"\r\n"+"	return $GLOBALS[\"Grid\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get PHP errors"+"\r\n"+"function ew_ErrorHandler($errno, $errstr, $errfile, $errline) {"+"\r\n"+"	switch ($errno) {"+"\r\n"+"		case E_USER_ERROR:"+"\r\n"+"		case E_RECOVERABLE_ERROR:"+"\r\n"+"			ew_AddMessage($_SESSION[EW_SESSION_FAILURE_MESSAGE], $errstr . \", file: \" . $errfile . \", line: \" . $errline);"+"\r\n"+"			break;"+"\r\n"+"		case E_WARNING:"+"\r\n"+"		case E_USER_WARNING:"+"\r\n"+"			ew_AddMessage($_SESSION[EW_SESSION_WARNING_MESSAGE], $errstr . \", file: \" . $errfile . \", line: \" . $errline);"+"\r\n"+"			break;"+"\r\n"+"		//case E_NOTICE: // Skip"+"\r\n"+"		case E_USER_NOTICE:"+"\r\n"+"		case E_STRICT:"+"\r\n"+"		case E_DEPRECATED:"+"\r\n"+"		case E_USER_DEPRECATED:"+"\r\n"+"			ew_AddMessage($_SESSION[EW_SESSION_MESSAGE], $errstr . \", file: \" . $errfile . \", line: \" . $errline);"+"\r\n"+"			break;"+"\r\n"+"		default:"+"\r\n"+"			break;"+"\r\n"+"	}"+"\r\n"+"	return FALSE; // Restore standard PHP error handler"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Export document classes"+"\r\n"+" */"+"\r\n"+" "+"\r\n"+"// Get export document object"+"\r\n"+"function &ew_ExportDocument(&$tbl, $style) {"+"\r\n"+"	global $EW_EXPORT;"+"\r\n"+"	$inst = NULL;"+"\r\n"+"	$type = strtolower($tbl->Export);"+"\r\n"+"	$class = $EW_EXPORT[$type];"+"\r\n"+"	if (class_exists($class))"+"\r\n"+"		$inst = new $class($tbl, $style);"+"\r\n"+"	return $inst;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Base class for export"+"\r\n"+"//"+"\r\n"+"class cExportBase {"+"\r\n"+"	var $Table;"+"\r\n"+"	var $Text;"+"\r\n"+"	var $Line = \"\";"+"\r\n"+"	var $Header = \"\";"+"\r\n"+"	var $Style = \"h\"; // \"v\"(Vertical) or \"h\"(Horizontal)"+"\r\n"+"	var $Horizontal = TRUE; // Horizontal"+"\r\n"+"	var $RowCnt = 0;"+"\r\n"+"	var $FldCnt = 0;"+"\r\n"+"	var $ExportCustom = FALSE;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct(&$tbl = NULL, $style = \"\") {"+"\r\n"+"		$this->Table = $tbl;"+"\r\n"+"		$this->SetStyle($style);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Style"+"\r\n"+"	function SetStyle($style) {"+"\r\n"+"		if (strtolower($style) == \"v\" || strtolower($style) == \"h\")"+"\r\n"+"			$this->Style = strtolower($style);		"+"\r\n"+"		$this->Horizontal = ($this->Style <> \"v\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Field caption"+"\r\n"+"	function ExportCaption(&$fld) {"+"\r\n"+"		$this->FldCnt++;"+"\r\n"+"		$this->ExportValueEx($fld, $fld->ExportCaption());"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field value"+"\r\n"+"	function ExportValue(&$fld) {"+"\r\n"+"		$this->ExportValueEx($fld, $fld->ExportValue());"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field aggregate"+"\r\n"+"	function ExportAggregate(&$fld, $type) {"+"\r\n"+"		$this->FldCnt++;"+"\r\n"+"		if ($this->Horizontal) {"+"\r\n"+"			global $Language;"+"\r\n"+"			$val = \"\";"+"\r\n"+"			if (in_array($type, array(\"TOTAL\", \"COUNT\", \"AVERAGE\")))"+"\r\n"+"				$val = $Language->Phrase($type) . \": \" . $fld->ExportValue();"+"\r\n"+"			$this->ExportValueEx($fld, $val);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get meta tag for charset"+"\r\n"+"	function CharsetMetaTag() {"+"\r\n"+"		return \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=\" . EW_CHARSET . \"\\\">\\r\\n\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table header"+"\r\n"+"	function ExportTableHeader() {"+"\r\n"+"		$this->Text .= \"<table class=\\\"ewExportTable\\\">\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Cell styles"+"\r\n"+"	function CellStyles($fld, $usestyle = TRUE) {"+"\r\n"+"		return ($usestyle && EW_EXPORT_CSS_STYLES) ? $fld->CellStyles() : \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Row styles"+"\r\n"+"	function RowStyles($usestyle = TRUE) {"+"\r\n"+"		return ($usestyle && EW_EXPORT_CSS_STYLES) ? $this->Table->RowStyles() : \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export a value (caption, field value, or aggregate)"+"\r\n"+"	function ExportValueEx(&$fld, $val, $usestyle = TRUE) {"+"\r\n"+"		$this->Text .= \"<td\" . $this->CellStyles($fld, $usestyle) . \">\";"+"\r\n"+"		$this->Text .= strval($val);"+"\r\n"+"		$this->Text .= \"</td>\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Begin a row"+"\r\n"+"	function BeginExportRow($rowcnt = 0, $usestyle = TRUE) {"+"\r\n"+"		$this->RowCnt++;"+"\r\n"+"		$this->FldCnt = 0;"+"\r\n"+"		if ($this->Horizontal) {"+"\r\n"+"			if ($rowcnt == -1) {"+"\r\n"+"				$this->Table->CssClass = \"ewExportTableFooter\";"+"\r\n"+"			} elseif ($rowcnt == 0) {"+"\r\n"+"				$this->Table->CssClass = \"ewExportTableHeader\";"+"\r\n"+"			} else {"+"\r\n"+"				$this->Table->CssClass = (($rowcnt % 2) == 1) ? \"ewExportTableRow\" : \"ewExportTableAltRow\";"+"\r\n"+"			}"+"\r\n"+"			$this->Text .= \"<tr\" . $this->RowStyles($usestyle) . \">\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// End a row"+"\r\n"+"	function EndExportRow() {"+"\r\n"+"		if ($this->Horizontal)"+"\r\n"+"			$this->Text .= \"</tr>\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Empty row"+"\r\n"+"	function ExportEmptyRow() {"+"\r\n"+"		$this->RowCnt++;"+"\r\n"+"		$this->Text .= \"<br>\";"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Page break"+"\r\n"+"	function ExportPageBreak() {"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export a field"+"\r\n"+"	function ExportField(&$fld) {"+"\r\n"+"		$this->FldCnt++;"+"\r\n"+"		$wrkExportValue = \"\";"+"\r\n"+"		if ($fld->HrefValue2 <> \"\" && is_object($fld->Upload)) { // Upload field"+"\r\n"+"			if (!ew_Empty($fld->Upload->DbValue))"+"\r\n"+"				$wrkExportValue = ew_GetFileATag($fld, $fld->HrefValue2);"+"\r\n"+"		} else {"+"\r\n"+"			$wrkExportValue = $fld->ExportValue();"+"\r\n"+"		}"+"\r\n"+"		if ($this->Horizontal) {"+"\r\n"+"			$this->ExportValueEx($fld, $wrkExportValue);"+"\r\n"+"		} else { // Vertical, export as a row"+"\r\n"+"			$this->RowCnt++;"+"\r\n"+"			$this->Text .= \"<tr class=\\\"\" . (($this->FldCnt % 2 == 1) ? \"ewExportTableRow\" : \"ewExportTableAltRow\") . \"\\\">\" ."+"\r\n"+"				\"<td>\" . $fld->ExportCaption() . \"</td>\";"+"\r\n"+"			$this->Text .= \"<td\" . $this->CellStyles($fld) . \">\" . $wrkExportValue . \"</td></tr>\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table Footer"+"\r\n"+"	function ExportTableFooter() {"+"\r\n"+"		$this->Text .= \"</table>\";"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Add HTML tags"+"\r\n"+"	function ExportHeaderAndFooter() {"+"\r\n"+"		$header = \"<html><head>\\r\\n\";"+"\r\n"+"		$header .= $this->CharsetMetaTag();"+"\r\n"+"		if (EW_EXPORT_CSS_STYLES && EW_PROJECT_STYLESHEET_FILENAME <> \"\")"+"\r\n"+"			$header .= \"<style type=\\\"text/css\\\">\" . file_get_contents(EW_PROJECT_STYLESHEET_FILENAME) . \"</style>\\r\\n\";"+"\r\n"+"		$header .= \"</\" . \"head>\\r\\n<body>\\r\\n\";"+"\r\n"+"		$this->Text = $header . $this->Text . \"</body></html>\";"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		if (!EW_DEBUG_ENABLED && ob_get_length())"+"\r\n"+"			ob_end_clean();"+"\r\n"+"		if (strtolower(EW_CHARSET) == \"utf-8\")"+"\r\n"+"			echo \"\\xEF\\xBB\\xBF\";"+"\r\n"+"		echo $this->Text;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get file img tag"+"\r\n"+"function ew_GetFileImgTag($fld, $fn) {"+"\r\n"+"	$html = \"\";"+"\r\n"+"	if ($fn <> \"\") {"+"\r\n"+"		if ($fld->UploadMultiple) {"+"\r\n"+"			$wrkfiles = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $fn);"+"\r\n"+"			foreach ($wrkfiles as $wrkfile) {"+"\r\n"+"				if ($wrkfile <> \"\") {"+"\r\n"+"					if ($html <> \"\")"+"\r\n"+"						$html .= \"<br>\";"+"\r\n"+"					$html .= \"<img class=\\\"ewImage\\\" src=\\\"\" . $wrkfile . \"\\\" alt=\\\"\\\">\";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$html = \"<img class=\\\"ewImage\\\" src=\\\"\" . $fn . \"\\\" alt=\\\"\\\">\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return $html;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get file A tag"+"\r\n"+"function ew_GetFileATag($fld, $fn) {"+"\r\n"+"	$wrkfiles = array();"+"\r\n"+"	$wrkpath = \"\";"+"\r\n"+"	$html = \"\";"+"\r\n"+"	if ($fld->FldDataType == EW_DATATYPE_BLOB) {"+"\r\n"+"		if (!ew_Empty($fld->Upload->DbValue))"+"\r\n"+"			$wrkfiles = array($fn);"+"\r\n"+"	} elseif ($fld->UploadMultiple) {"+"\r\n"+"		$wrkfiles = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $fn);"+"\r\n"+"		$pos = strrpos($wrkfiles[0], '/');"+"\r\n"+"		if ($pos !== FALSE) {"+"\r\n"+"			$wrkpath = substr($wrkfiles[0], 0, $pos+1); // Get path from first file name"+"\r\n"+"			$wrkfiles[0] = substr($wrkfiles[0], $pos+1);"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		if (!ew_Empty($fld->Upload->DbValue))"+"\r\n"+"			$wrkfiles = array($fn);"+"\r\n"+"	}"+"\r\n"+"	foreach ($wrkfiles as $wrkfile) {"+"\r\n"+"		if ($wrkfile <> \"\") {"+"\r\n"+"			if ($html <> \"\")"+"\r\n"+"				$html .= \"<br>\";"+"\r\n"+"			$attrs = array(\"href\" => ew_ConvertFullUrl($wrkpath . $wrkfile));"+"\r\n"+"			$html .= ew_HtmlElement(\"a\", $attrs, $fld->FldCaption());"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return $html;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get file temp image"+"\r\n"+"function ew_GetFileTempImage($fld, $val) {"+"\r\n"+"	if ($fld->UploadMultiple) {"+"\r\n"+"		$files = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $val);"+"\r\n"+"		$cnt = count($files);"+"\r\n"+"		$images = \"\";"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($files[$i] <> \"\") {"+"\r\n"+"				$tmpimage = file_get_contents(ew_GetFileUploadUrl($fld, $files[$i], FALSE, FALSE, FALSE));"+"\r\n"+"				if ($fld->ImageResize)"+"\r\n"+"					ew_ResizeBinary($tmpimage, $fld->ImageWidth, $fld->ImageHeight);"+"\r\n"+"				if ($images <> \"\") $images .= EW_MULTIPLE_UPLOAD_SEPARATOR;"+"\r\n"+"				$images .= ew_TmpImage($tmpimage);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $images;"+"\r\n"+"	} else {"+"\r\n"+"		$tmpimage = file_get_contents(ew_GetFileUploadUrl($fld, $val, FALSE, FALSE, FALSE));"+"\r\n"+"		if ($fld->ImageResize)"+"\r\n"+"			ew_ResizeBinary($tmpimage, $fld->ImageWidth, $fld->ImageHeight);"+"\r\n"+"		return ew_TmpImage($tmpimage);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get file upload url"+"\r\n"+"function ew_GetFileUploadUrl($fld, $val, $resize = FALSE, $encrypt = EW_ENCRYPT_FILE_PATH, $urlencode = TRUE) {"+"\r\n"+"	if (!ew_EmptyStr($val)) {"+"\r\n"+"		$path = ($encrypt || $resize) ? ew_IncludeTrailingDelimiter($fld->UploadPath, FALSE) : ew_UploadPathEx(FALSE, $fld->UploadPath);"+"\r\n"+"		if ($encrypt) {"+"\r\n"+"			$key = EW_RANDOM_KEY . session_id();"+"\r\n"+"			$fn = \"";
ewAr[25] = "?t=\" . ew_Encrypt($fld->TblName, $key) .\"&fn=\" . ew_Encrypt($path . $val, $key);"+"\r\n"+"			if ($resize)"+"\r\n"+"				$fn .= \"&width=\" . $fld->ImageWidth . \"&height=\" . $fld->ImageHeight;"+"\r\n"+"		} elseif ($resize) {"+"\r\n"+"			$fn = \"";
ewAr[26] = "?t=\" . rawurlencode($fld->TblName) . \"&fn=\" . ew_UrlEncodeFilePath($path . $val) ."+"\r\n"+"				\"&width=\" . $fld->ImageWidth . \"&height=\" . $fld->ImageHeight;"+"\r\n"+"		} else {"+"\r\n"+"			$fn = $path . $val;"+"\r\n"+"			if ($urlencode)"+"\r\n"+"				$fn = ew_UrlEncodeFilePath($fn);"+"\r\n"+"		}"+"\r\n"+"		return $fn;"+"\r\n"+"	} else {"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// URL Encode file path"+"\r\n"+"function ew_UrlEncodeFilePath($path) {"+"\r\n"+"	$ar = explode(\"/\", $path);"+"\r\n"+"	$cnt = count($ar);"+"\r\n"+"	for ($i = 0; $i < $cnt; $i++)"+"\r\n"+"		$ar[$i] = rawurlencode($ar[$i]);"+"\r\n"+"	return implode(\"/\", $ar);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get file view tag"+"\r\n"+"function ew_GetFileViewTag(&$fld, $val) {"+"\r\n"+"	global $Page;"+"\r\n"+"	if (!ew_EmptyStr($val)) {"+"\r\n"+"		if ($fld->FldDataType == EW_DATATYPE_BLOB) {"+"\r\n"+"			$wrknames = array($val);"+"\r\n"+"			$wrkfiles = array($val);"+"\r\n"+"		} elseif ($fld->UploadMultiple) {"+"\r\n"+"			$wrknames = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $val);"+"\r\n"+"			$wrkfiles = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $fld->Upload->DbValue);"+"\r\n"+"		} else {"+"\r\n"+"			$wrknames = array($val);"+"\r\n"+"			$wrkfiles = array($fld->Upload->DbValue);"+"\r\n"+"		}"+"\r\n"+"		$bMultiple = (count($wrkfiles) > 1);"+"\r\n"+"		$href = $fld->HrefValue;"+"\r\n"+"		$images = \"\";"+"\r\n"+"		$wrkcnt = 0;"+"\r\n"+"		foreach ($wrkfiles as $wrkfile) {"+"\r\n"+"			$image = \"\";"+"\r\n"+"			if ($fld->FldDataType == EW_DATATYPE_BLOB)"+"\r\n"+"				$fn = $val;"+"\r\n"+"			elseif ($Page && ($Page->TableType == \"REPORT\" && ($Page->Export == \"excel\" && defined('EW_USE_PHPEXCEL') || $Page->Export == \"word\" && defined('EW_USE_PHPWORD')) || $Page->TableType <> \"REPORT\" && ($Page->CustomExport == \"pdf\" || $Page->CustomExport == \"email\")))"+"\r\n"+"				$fn = ew_GetFileTempImage($fld, $wrkfile);"+"\r\n"+"			else"+"\r\n"+"				$fn = ew_GetFileUploadUrl($fld, $wrkfile, $fld->ImageResize);"+"\r\n"+"			if ($fld->FldViewTag == \"IMAGE\" && ($fld->IsBlobImage || ew_IsImageFile($wrkfile))) {"+"\r\n"+"				if ($href == \"\" && !$fld->UseColorbox) {"+"\r\n"+"					if ($fn <> \"\")"+"\r\n"+"						$image = \"<img class=\\\"ewImage img-thumbnail\\\" alt=\\\"\\\" src=\\\"\" . $fn . \"\\\"\" . $fld->ViewAttributes() . \">\";"+"\r\n"+"				} else {"+"\r\n"+"					if ($fld->UploadMultiple && strpos($href, \"%u\") !== FALSE)"+"\r\n"+"						$fld->HrefValue = str_replace(\"%u\", ew_GetFileUploadUrl($fld, $wrkfile), $href);"+"\r\n"+"					if ($fn <> \"\")"+"\r\n"+"						$image = \"<a\" . $fld->LinkAttributes() . \"><img class=\\\"ewImage img-thumbnail\\\" alt=\\\"\\\" src=\\\"\" . $fn . \"\\\"\" . $fld->ViewAttributes() . \"></a>\";"+"\r\n"+"				}"+"\r\n"+"			} else {"+"\r\n"+"				if ($fld->FldDataType == EW_DATATYPE_BLOB) {"+"\r\n"+"					$url = $href;"+"\r\n"+"					$name = ($fld->Upload->FileName <> \"\") ? $fld->Upload->FileName : $fld->FldCaption();"+"\r\n"+"				} else {"+"\r\n"+"					$url = ew_GetFileUploadUrl($fld, $wrkfile);"+"\r\n"+"					$cnt = count($wrknames);"+"\r\n"+"					$name = ($wrkcnt < $cnt) ? $wrknames[$wrkcnt] : $wrknames[$cnt-1];"+"\r\n"+"				}"+"\r\n"+"				if ($url <> \"\") {"+"\r\n"+"					if ($fld->UploadMultiple && strpos($href, \"%u\") !== FALSE)"+"\r\n"+"						$fld->HrefValue = str_replace(\"%u\", $url, $href);"+"\r\n"+"					$image = \"<a\" . $fld->LinkAttributes() . \">\" . $name . \"</a>\";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if ($image <> \"\") {"+"\r\n"+"				if ($bMultiple)"+"\r\n"+"					$images .= \"<li>\" . $image . \"</li>\";"+"\r\n"+"				else"+"\r\n"+"					$images .= $image;"+"\r\n"+"			}"+"\r\n"+"			$wrkcnt += 1;"+"\r\n"+"		}"+"\r\n"+"		if ($bMultiple && $images <> \"\")"+"\r\n"+"			$images = \"<ul class=\\\"list-inline\\\">\" . $images . \"</ul>\";"+"\r\n"+"		return $images;"+"\r\n"+"	} else {"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if image file"+"\r\n"+"function ew_IsImageFile($fn) {"+"\r\n"+"	if ($fn <> \"\") {"+"\r\n"+"		$ar = parse_url($fn);"+"\r\n"+"		if ($ar && array_key_exists('query', $ar)) { // Thumbnail url"+"\r\n"+" 			if ($q = parse_str($ar['query']))"+"\r\n"+"				$fn = $q['fn'];"+"\r\n"+"		}"+"\r\n"+"		$pathinfo = pathinfo($fn);"+"\r\n"+"		$ext = strtolower(@$pathinfo[\"extension\"]);"+"\r\n"+"		return in_array($ext, explode(\",\", EW_IMAGE_ALLOWED_FILE_EXT));"+"\r\n"+"	} else {"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Class for export to email"+"\r\n"+"// "+"\r\n"+"class cExportEmail extends cExportBase {"+"\r\n"+""+"\r\n"+"	// Table border styles"+"\r\n"+"	var $cellStyles = \"border: 1px solid #dddddd; padding: 5px;\";"+"\r\n"+""+"\r\n"+"	// Table header"+"\r\n"+"	function ExportTableHeader() {"+"\r\n"+"		$this->Text .= \"<table style=\\\"border-collapse: collapse;\\\">\"; // Use inline style for Gmail"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Cell styles"+"\r\n"+"	function CellStyles($fld, $usestyle = TRUE) {"+"\r\n"+"		$fld->CellAttrs[\"style\"] = ew_Concat($this->cellStyles, @$fld->CellAttrs[\"style\"], \";\"); // Use inline style for Gmail"+"\r\n"+"		return ($usestyle && EW_EXPORT_CSS_STYLES) ? $fld->CellStyles() : \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export a field"+"\r\n"+"	function ExportField(&$fld) {"+"\r\n"+"		$this->FldCnt++;"+"\r\n"+"		$ExportValue = $fld->ExportValue();"+"\r\n"+"		if ($fld->FldViewTag == \"IMAGE\") {"+"\r\n"+"			if ($fld->ImageResize) {"+"\r\n"+"				$ExportValue = ew_GetFileImgTag($fld, $fld->GetTempImage());"+"\r\n"+"			} elseif ($fld->HrefValue2 <> \"\" && is_object($fld->Upload)) {"+"\r\n"+"				if (!ew_Empty($fld->Upload->DbValue))"+"\r\n"+"					$ExportValue = ew_GetFileATag($fld, $fld->HrefValue2);"+"\r\n"+"			}"+"\r\n"+"		} elseif (is_array($fld->HrefValue2)) { // Export custom view tag"+"\r\n"+"			$ar = $fld->HrefValue2;"+"\r\n"+"			$fn = is_array($ar) ? @$ar[\"exportfn\"] : \"\"; // Get export function name"+"\r\n"+"			if (is_callable($fn)) $ExportValue = $fn($ar);"+"\r\n"+"		}"+"\r\n"+"		if ($this->Horizontal) {"+"\r\n"+"			$this->ExportValueEx($fld, $ExportValue);"+"\r\n"+"		} else { // Vertical, export as a row"+"\r\n"+"			$this->RowCnt++;"+"\r\n"+"			$this->Text .= \"<tr class=\\\"\" . (($this->FldCnt % 2 == 1) ? \"ewExportTableRow\" : \"ewExportTableAltRow\") . \"\\\">\" ."+"\r\n"+"				\"<td>\" . $fld->ExportCaption() . \"</td>\";"+"\r\n"+"			$this->Text .= \"<td\" . $this->CellStyles($fld) . \">\" . $ExportValue . \"</td></tr>\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		if (!EW_DEBUG_ENABLED && ob_get_length())"+"\r\n"+"			ob_end_clean();"+"\r\n"+"		echo $this->Text;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Destructor"+"\r\n"+"	function __destruct() {"+"\r\n"+"		ew_DeleteTmpImages();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Class for export to HTML"+"\r\n"+"// "+"\r\n"+"class cExportHtml extends cExportBase {"+"\r\n"+"	// Same as base class"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Class for export to Word"+"\r\n"+"// "+"\r\n"+"class cExportWord extends cExportBase {"+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		global $gsExportFile;"+"\r\n"+"		if (!EW_DEBUG_ENABLED && ob_get_length())"+"\r\n"+"			ob_end_clean();"+"\r\n"+"		header('Content-Type: application/vnd.ms-word' . ((EW_CHARSET <> \"\") ? \";charset=\" . EW_CHARSET : \"\"));"+"\r\n"+"		header('Content-Disposition: attachment; filename=' . $gsExportFile . '.doc');"+"\r\n"+"		if (strtolower(EW_CHARSET) == \"utf-8\")"+"\r\n"+"			echo \"\\xEF\\xBB\\xBF\";"+"\r\n"+"		echo $this->Text;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Class for export to Excel"+"\r\n"+"// "+"\r\n"+"class cExportExcel extends cExportBase {"+"\r\n"+""+"\r\n"+"	// Export a value (caption, field value, or aggregate)"+"\r\n"+"	function ExportValueEx(&$fld, $val, $usestyle = TRUE) {"+"\r\n"+"		if (($fld->FldDataType == EW_DATATYPE_STRING || $fld->FldDataType == EW_DATATYPE_MEMO) && is_numeric($val))"+"\r\n"+"			$val = \"=\\\"\" . strval($val) . \"\\\"\";"+"\r\n"+"		$this->Text .= parent::ExportValueEx($fld, $val, $usestyle);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		global $gsExportFile;"+"\r\n"+"		if (!EW_DEBUG_ENABLED && ob_get_length())"+"\r\n"+"			ob_end_clean();"+"\r\n"+"		header('Content-Type: application/vnd.ms-excel' . ((EW_CHARSET <> \"\") ? \";charset=\" . EW_CHARSET : \"\"));"+"\r\n"+"		header('Content-Disposition: attachment; filename=' . $gsExportFile . '.xls');"+"\r\n"+"		if (strtolower(EW_CHARSET) == \"utf-8\")"+"\r\n"+"			echo \"\\xEF\\xBB\\xBF\";"+"\r\n"+"		echo $this->Text;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Class for export to CSV"+"\r\n"+"// "+"\r\n"+"class cExportCsv extends cExportBase {"+"\r\n"+""+"\r\n"+"	var $QuoteChar = \"\\\"\";"+"\r\n"+"	"+"\r\n"+"	// Style"+"\r\n"+"	function ChangeStyle($style) {"+"\r\n"+"		$this->Horizontal = TRUE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table header"+"\r\n"+"	function ExportTableHeader() {"+"\r\n"+"		// Skip"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export a value (caption, field value, or aggregate)"+"\r\n"+"	function ExportValueEx(&$fld, $val, $usestyle = TRUE) {"+"\r\n"+"		if ($fld->FldDataType <> EW_DATATYPE_BLOB) {"+"\r\n"+"			if ($this->Line <> \"\")"+"\r\n"+"				$this->Line .= \",\";"+"\r\n"+"			$this->Line .= $this->QuoteChar . str_replace($this->QuoteChar, $this->QuoteChar . $this->QuoteChar, strval($val)) . $this->QuoteChar;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Begin a row"+"\r\n"+"	function BeginExportRow($rowcnt = 0, $usestyle = TRUE) {"+"\r\n"+"		$this->Line = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// End a row"+"\r\n"+"	function EndExportRow() {"+"\r\n"+"		$this->Line .= \"\\r\\n\";"+"\r\n"+"		$this->Text .= $this->Line;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Empty line"+"\r\n"+"	function ExportEmptyLine() {"+"\r\n"+"		// Skip"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export a field"+"\r\n"+"	function ExportField(&$fld) {"+"\r\n"+"		if ($fld->UploadMultiple)"+"\r\n"+"			$this->ExportValueEx($fld, $fld->Upload->DbValue);"+"\r\n"+"		else"+"\r\n"+"			$this->ExportValue($fld);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table Footer"+"\r\n"+"	function ExportTableFooter() {"+"\r\n"+"		// Skip"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Add HTML tags"+"\r\n"+"	function ExportHeaderAndFooter() {"+"\r\n"+"		// Skip"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		global $gsExportFile;"+"\r\n"+"		if (!EW_DEBUG_ENABLED && ob_get_length())"+"\r\n"+"			ob_end_clean();"+"\r\n"+"		header('Content-Type: text/csv');"+"\r\n"+"		header('Content-Disposition: attachment; filename=' . $gsExportFile . '.csv');"+"\r\n"+"		if (strtolower(EW_CHARSET) == \"utf-8\")"+"\r\n"+"			echo \"\\xEF\\xBB\\xBF\";"+"\r\n"+"		echo $this->Text;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Class for export to XML"+"\r\n"+"//"+"\r\n"+"class cExportXml extends cExportBase {"+"\r\n"+""+"\r\n"+"	var $XmlDoc;"+"\r\n"+"	var $HasParent;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct(&$tbl = NULL, $style = \"\") {"+"\r\n"+"		parent::__construct($tbl, $style);"+"\r\n"+"		$this->XmlDoc = new cXMLDocument(EW_XML_ENCODING);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Style"+"\r\n"+"	function SetStyle($style) {}"+"\r\n"+"	"+"\r\n"+"	// Field caption"+"\r\n"+"	function ExportCaption(&$fld) {}"+"\r\n"+""+"\r\n"+"	// Field value"+"\r\n"+"	function ExportValue(&$fld) {}"+"\r\n"+""+"\r\n"+"	// Field aggregate"+"\r\n"+"	function ExportAggregate(&$fld, $type) {}"+"\r\n"+"	"+"\r\n"+"	// Get meta tag for charset"+"\r\n"+"	function CharsetMetaTag() {}"+"\r\n"+"	"+"\r\n"+"	// Table header"+"\r\n"+"	function ExportTableHeader() {"+"\r\n"+"		$this->HasParent = is_object($this->XmlDoc->DocumentElement());"+"\r\n"+"		if (!$this->HasParent)"+"\r\n"+"			$this->XmlDoc->AddRoot($this->Table->TableVar);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export a value (caption, field value, or aggregate)"+"\r\n"+"	function ExportValueEx(&$fld, $val, $usestyle = TRUE) {}"+"\r\n"+""+"\r\n"+"	// Begin a row"+"\r\n"+"	function BeginExportRow($rowcnt = 0, $usestyle = TRUE) {"+"\r\n"+"		if ($rowcnt <= 0)"+"\r\n"+"			return; "+"\r\n"+"		if ($this->HasParent)"+"\r\n"+"			$this->XmlDoc->AddRow($this->Table->TableVar);"+"\r\n"+"		else"+"\r\n"+"			$this->XmlDoc->AddRow();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// End a row"+"\r\n"+"	function EndExportRow() {}"+"\r\n"+""+"\r\n"+"	// Empty row"+"\r\n"+"	function ExportEmptyRow() {}"+"\r\n"+"	"+"\r\n"+"	// Page break"+"\r\n"+"	function ExportPageBreak() {}"+"\r\n"+""+"\r\n"+"	// Export a field"+"\r\n"+"	function ExportField(&$fld) {"+"\r\n"+"		if ($fld->FldDataType <> EW_DATATYPE_BLOB) {"+"\r\n"+"			if ($fld->UploadMultiple)"+"\r\n"+"				$ExportValue = $fld->Upload->DbValue;"+"\r\n"+"			else"+"\r\n"+"				$ExportValue = $fld->ExportValue();"+"\r\n"+"			if (is_null($ExportValue))"+"\r\n"+"				$ExportValue = \"<Null>\";"+"\r\n"+"			$this->XmlDoc->AddField(substr($fld->FldVar, 2), $ExportValue);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table Footer"+"\r\n"+"	function ExportTableFooter() {}"+"\r\n"+"	"+"\r\n"+"	// Add HTML tags"+"\r\n"+"	function ExportHeaderAndFooter() {}"+"\r\n"+"	"+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		global $gsExportFile;"+"\r\n"+"		if (!EW_DEBUG_ENABLED && ob_get_length())"+"\r\n"+"			ob_end_clean();"+"\r\n"+"		header('Content-Type: text/xml');"+"\r\n"+"		//header('Content-Disposition: attachment; filename=' . $gsExportFile . '.xml');"+"\r\n"+"		echo $this->XmlDoc->XML();"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"";
ewAr[27] = ""+"\r\n"+"//"+"\r\n"+"// Class for export to PDF"+"\r\n"+"//"+"\r\n"+"class cExportPdf extends cExportBase {"+"\r\n"+""+"\r\n"+"	var $PageOrientation = \"portrait\"; // To be setup after creating an instance"+"\r\n"+"	var $PageSize = \"a4\"; // To be setup after creating an instance"+"\r\n"+""+"\r\n"+"	// Export"+"\r\n"+"	function Export() {"+"\r\n"+"		echo $this->Text;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+"";
ewAr[28] = ""+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Email class"+"\r\n"+" */"+"\r\n"+"class cEmail {"+"\r\n"+""+"\r\n"+"	// Class properties"+"\r\n"+"	var $Sender = \"\"; // Sender"+"\r\n"+"	var $Recipient = \"\"; // Recipient"+"\r\n"+"	var $Cc = \"\"; // Cc"+"\r\n"+"	var $Bcc = \"\"; // Bcc"+"\r\n"+"	var $Subject = \"\"; // Subject"+"\r\n"+"	var $Format = \"\"; // Format"+"\r\n"+"	var $Content = \"\"; // Content"+"\r\n"+"	var $Attachments = array(); // Attachments"+"\r\n"+"	var $EmbeddedImages = array(); // Embedded image"+"\r\n"+"	var $Charset = EW_EMAIL_CHARSET; // Charset"+"\r\n"+"	var $SendErrDescription; // Send error description"+"\r\n"+"	var $SmtpSecure = EW_SMTP_SECURE_OPTION; // Send secure option"+"\r\n"+"	var $Prop = array(); // PHPMailer properties"+"\r\n"+""+"\r\n"+"	// Set PHPMailer property"+"\r\n"+"	function __set($name, $value) {"+"\r\n"+"		$this->Prop[$name] = $value;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to load email from template"+"\r\n"+"	function Load($fn, $langid = \"\") {"+"\r\n"+"		global $gsLanguage;"+"\r\n"+"		$langid = ($langid == \"\") ? $gsLanguage : $langid;"+"\r\n"+"		$pos = strrpos($fn, '.');"+"\r\n"+"		if ($pos !== FALSE) {"+"\r\n"+"			$wrkname = substr($fn, 0, $pos); // Get file name"+"\r\n"+"			$wrkext = substr($fn, $pos+1); // Get file extension"+"\r\n"+"			$wrkpath = ew_ScriptFolder() . EW_PATH_DELIMITER . EW_EMAIL_TEMPLATE_PATH . EW_PATH_DELIMITER; // Get file path"+"\r\n"+"			$ar = ($langid <> \"\") ? array(\"_\" . $langid, \"-\" . $langid, \"\") : array(\"\");"+"\r\n"+"			$exist = FALSE;"+"\r\n"+"			foreach ($ar as $suffix) {"+"\r\n"+"				$wrkfile = $wrkpath . $wrkname . $suffix . \".\" . $wrkext;"+"\r\n"+"				$exist = file_exists($wrkfile);"+"\r\n"+"				if ($exist) break;"+"\r\n"+"			}"+"\r\n"+"			if (!$exist) return;"+"\r\n"+"			$sWrk = file_get_contents($wrkfile); // Load template file content"+"\r\n"+"			if (ew_StartsStr(\"\\xEF\\xBB\\xBF\", $sWrk)) // UTF-8 BOM"+"\r\n"+"				$sWrk = substr($sWrk, 3);"+"\r\n"+"			$wrkid = $wrkname . \"_content\";"+"\r\n"+"			if (ew_ContainsStr($sWrk, $wrkid)) { // Replace content"+"\r\n"+"				$wrkfile = $wrkpath . $wrkid . \".\" . $wrkext;"+"\r\n"+"				if (file_exists($wrkfile)) {"+"\r\n"+"					$sContent = file_get_contents($wrkfile);"+"\r\n"+"					if (ew_StartsStr(\"\\xEF\\xBB\\xBF\", $sContent)) // UTF-8 BOM"+"\r\n"+"						$sContent = substr($sContent, 3);"+"\r\n"+"					$sWrk = str_replace(\"<!--\" . $wrkid . \"-->\", $sContent, $sWrk);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($sWrk <> \"\" && preg_match('/\\n\\n|\\r\\n\\r\\n/', $sWrk, $m, PREG_OFFSET_CAPTURE)) { // Locate Header & Mail Content"+"\r\n"+"			$i = $m[0][1];"+"\r\n"+"			$sHeader = trim(substr($sWrk, 0, $i)) . \"\\r\\n\"; // Add last CrLf for matching"+"\r\n"+"			$this->Content = trim(substr($sWrk, $i));"+"\r\n"+"			if (preg_match_all('/^\\s*(Subject|From|To|Cc|Bcc|Format)\\s*:([^\\r\\n]*)[\\r\\n]/m', $sHeader, $m)) {"+"\r\n"+"				$ar = array_combine($m[1], $m[2]);"+"\r\n"+"				$this->Subject = trim(@$ar[\"Subject\"]);"+"\r\n"+"				$this->Sender = trim(@$ar[\"From\"]);"+"\r\n"+"				$this->Recipient = trim(@$ar[\"To\"]);"+"\r\n"+"				$this->Cc = trim(@$ar[\"Cc\"]);"+"\r\n"+"				$this->Bcc = trim(@$ar[\"Bcc\"]);"+"\r\n"+"				$this->Format = trim(@$ar[\"Format\"]);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace sender"+"\r\n"+"	function ReplaceSender($ASender) {"+"\r\n"+"		if (ew_ContainsStr($this->Sender, '<!--$From-->'))"+"\r\n"+"			$this->Sender = str_replace('<!--$From-->', $ASender, $this->Sender);"+"\r\n"+"		else"+"\r\n"+"			$this->Sender = $ASender;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace recipient"+"\r\n"+"	function ReplaceRecipient($ARecipient) {"+"\r\n"+"		if (ew_ContainsStr($this->Recipient, '<!--$To-->'))"+"\r\n"+"			$this->Recipient = str_replace('<!--$To-->', $ARecipient, $this->Recipient);"+"\r\n"+"		else"+"\r\n"+"			$this->AddRecipient($ARecipient);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add recipient"+"\r\n"+"	function AddRecipient($ARecipient) {"+"\r\n"+"		$this->Recipient = ew_Concat($this->Recipient, $ARecipient, \";\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add Cc email"+"\r\n"+"	function AddCc($ACc) {"+"\r\n"+"		$this->Cc = ew_Concat($this->Cc, $ACc, \";\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add Bcc email"+"\r\n"+"	function AddBcc($ABcc) {"+"\r\n"+"		$this->Bcc = ew_Concat($this->Bcc, $ABcc, \";\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace subject"+"\r\n"+"	function ReplaceSubject($ASubject) {"+"\r\n"+"		if (ew_ContainsStr($this->Subject, '<!--$Subject-->'))"+"\r\n"+"			$this->Subject = str_replace('<!--$Subject-->', $ASubject, $this->Subject);"+"\r\n"+"		else"+"\r\n"+"			$this->Subject = $ASubject;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace content"+"\r\n"+"	function ReplaceContent($Find, $ReplaceWith) {"+"\r\n"+"		$this->Content = str_replace($Find, $ReplaceWith, $this->Content);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add embedded image"+"\r\n"+"	function AddEmbeddedImage($image) {"+"\r\n"+"		if ($image <> \"\")"+"\r\n"+"			$this->EmbeddedImages[] = $image;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add attachment"+"\r\n"+"	function AddAttachment($filename, $content = \"\") {"+"\r\n"+"		if ($filename <> \"\")"+"\r\n"+"			$this->Attachments[] = array(\"filename\" => $filename, \"content\" => $content);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to send email"+"\r\n"+"	function Send() {"+"\r\n"+"		global $gsEmailErrDesc;"+"\r\n"+"		$result = ew_SendEmail($this->Sender, $this->Recipient, $this->Cc, $this->Bcc,"+"\r\n"+"			$this->Subject, $this->Content, $this->Format, $this->Charset, $this->SmtpSecure,"+"\r\n"+"			$this->Attachments, $this->EmbeddedImages, $this->Prop);"+"\r\n"+"		$this->SendErrDescription = $gsEmailErrDesc;"+"\r\n"+"		return $result;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Pager item class"+"\r\n"+" */"+"\r\n"+"class cPagerItem {"+"\r\n"+"	var $Start;"+"\r\n"+"	var $Text;"+"\r\n"+"	var $Enabled;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Numeric pager class"+"\r\n"+" */"+"\r\n"+"class cNumericPager {"+"\r\n"+"	var $Items = array();"+"\r\n"+"	var $Count, $FromIndex, $ToIndex, $RecordCount, $PageSize, $Range;"+"\r\n"+"	var $FirstButton, $PrevButton, $NextButton, $LastButton;"+"\r\n"+"	var $ButtonCount = 0;"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($StartRec, $DisplayRecs, $TotalRecs, $RecRange)"+"\r\n"+"	{"+"\r\n"+"		$this->FirstButton = new cPagerItem;"+"\r\n"+"		$this->PrevButton = new cPagerItem;"+"\r\n"+"		$this->NextButton = new cPagerItem;"+"\r\n"+"		$this->LastButton = new cPagerItem;"+"\r\n"+"		$this->FromIndex = intval($StartRec);"+"\r\n"+"		$this->PageSize = intval($DisplayRecs);"+"\r\n"+"		$this->RecordCount = intval($TotalRecs);"+"\r\n"+"		$this->Range = intval($RecRange);"+"\r\n"+"		if ($this->PageSize == 0) return;"+"\r\n"+"		if ($this->FromIndex > $this->RecordCount)"+"\r\n"+"			$this->FromIndex = $this->RecordCount;"+"\r\n"+"		$this->ToIndex = $this->FromIndex + $this->PageSize - 1;"+"\r\n"+"		if ($this->ToIndex > $this->RecordCount)"+"\r\n"+"			$this->ToIndex = $this->RecordCount;"+"\r\n"+"		// Setup"+"\r\n"+"		$this->SetupNumericPager();"+"\r\n"+"		// Update button count"+"\r\n"+"		if ($this->FirstButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		if ($this->PrevButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		if ($this->NextButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		if ($this->LastButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		$this->ButtonCount += count($this->Items);"+"\r\n"+"  }"+"\r\n"+""+"\r\n"+"	// Add pager item"+"\r\n"+"	function AddPagerItem($StartIndex, $Text, $Enabled)"+"\r\n"+"	{"+"\r\n"+"		$Item = new cPagerItem;"+"\r\n"+"		$Item->Start = $StartIndex;"+"\r\n"+"		$Item->Text = $Text;"+"\r\n"+"		$Item->Enabled = $Enabled;"+"\r\n"+"		$this->Items[] = $Item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Setup pager items"+"\r\n"+"	function SetupNumericPager()"+"\r\n"+"	{"+"\r\n"+"		if ($this->RecordCount > $this->PageSize) {"+"\r\n"+"			$Eof = ($this->RecordCount < ($this->FromIndex + $this->PageSize));"+"\r\n"+"			$HasPrev = ($this->FromIndex > 1);"+"\r\n"+""+"\r\n"+"			// First Button"+"\r\n"+"			$TempIndex = 1;"+"\r\n"+"			$this->FirstButton->Start = $TempIndex;"+"\r\n"+"			$this->FirstButton->Enabled = ($this->FromIndex > $TempIndex);"+"\r\n"+""+"\r\n"+"			// Prev Button"+"\r\n"+"			$TempIndex = $this->FromIndex - $this->PageSize;"+"\r\n"+"			if ($TempIndex < 1) $TempIndex = 1;"+"\r\n"+"			$this->PrevButton->Start = $TempIndex;"+"\r\n"+"			$this->PrevButton->Enabled = $HasPrev;"+"\r\n"+""+"\r\n"+"			// Page links"+"\r\n"+"			if ($HasPrev || !$Eof) {"+"\r\n"+"				$x = 1;"+"\r\n"+"				$y = 1;"+"\r\n"+"				$dx1 = intval(($this->FromIndex-1)/($this->PageSize*$this->Range))*$this->PageSize*$this->Range + 1;"+"\r\n"+"				$dy1 = intval(($this->FromIndex-1)/($this->PageSize*$this->Range))*$this->Range + 1;"+"\r\n"+"				if (($dx1+$this->PageSize*$this->Range-1) > $this->RecordCount) {"+"\r\n"+"					$dx2 = intval($this->RecordCount/$this->PageSize)*$this->PageSize + 1;"+"\r\n"+"					$dy2 = intval($this->RecordCount/$this->PageSize) + 1;"+"\r\n"+"				} else {"+"\r\n"+"					$dx2 = $dx1 + $this->PageSize*$this->Range - 1;"+"\r\n"+"					$dy2 = $dy1 + $this->Range - 1;"+"\r\n"+"				}"+"\r\n"+"				while ($x <= $this->RecordCount) {"+"\r\n"+"					if ($x >= $dx1 && $x <= $dx2) {"+"\r\n"+"						$this->AddPagerItem($x, $y, $this->FromIndex<>$x);"+"\r\n"+"						$x += $this->PageSize;"+"\r\n"+"						$y++;"+"\r\n"+"					} elseif ($x >= ($dx1-$this->PageSize*$this->Range) && $x <= ($dx2+$this->PageSize*$this->Range)) {"+"\r\n"+"						if ($x+$this->Range*$this->PageSize < $this->RecordCount) {"+"\r\n"+"							$this->AddPagerItem($x, $y . \"-\" . ($y+$this->Range-1), TRUE);"+"\r\n"+"						} else {"+"\r\n"+"							$ny = intval(($this->RecordCount-1)/$this->PageSize) + 1;"+"\r\n"+"							if ($ny == $y) {"+"\r\n"+"								$this->AddPagerItem($x, $y, TRUE);"+"\r\n"+"							} else {"+"\r\n"+"								$this->AddPagerItem($x, $y . \"-\" . $ny, TRUE);"+"\r\n"+"							}"+"\r\n"+"						}"+"\r\n"+"						$x += $this->Range*$this->PageSize;"+"\r\n"+"						$y += $this->Range;"+"\r\n"+"					} else {"+"\r\n"+"						$x += $this->Range*$this->PageSize;"+"\r\n"+"						$y += $this->Range;"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Next Button"+"\r\n"+"			$TempIndex = $this->FromIndex + $this->PageSize;"+"\r\n"+"			$this->NextButton->Start = $TempIndex;"+"\r\n"+"			$this->NextButton->Enabled = !$Eof;"+"\r\n"+""+"\r\n"+"			// Last Button"+"\r\n"+"			$TempIndex = intval(($this->RecordCount-1)/$this->PageSize)*$this->PageSize + 1;"+"\r\n"+"			$this->LastButton->Start = $TempIndex;"+"\r\n"+"			$this->LastButton->Enabled = ($this->FromIndex < $TempIndex);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * PrevNext pager class"+"\r\n"+" */"+"\r\n"+"class cPrevNextPager {"+"\r\n"+"	var $FirstButton, $PrevButton, $NextButton, $LastButton;"+"\r\n"+"	var $CurrentPage, $PageCount, $FromIndex, $ToIndex, $RecordCount;"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($StartRec, $DisplayRecs, $TotalRecs)"+"\r\n"+"	{"+"\r\n"+"		$this->FirstButton = new cPagerItem;"+"\r\n"+"		$this->PrevButton = new cPagerItem;"+"\r\n"+"		$this->NextButton = new cPagerItem;"+"\r\n"+"		$this->LastButton = new cPagerItem;"+"\r\n"+"		$this->FromIndex = intval($StartRec);"+"\r\n"+"		$this->PageSize = intval($DisplayRecs);"+"\r\n"+"		$this->RecordCount = intval($TotalRecs);"+"\r\n"+"		if ($this->PageSize == 0) return;"+"\r\n"+"		"+"\r\n"+"		$this->CurrentPage = intval(($this->FromIndex-1)/$this->PageSize) + 1;"+"\r\n"+"		$this->PageCount = intval(($this->RecordCount-1)/$this->PageSize) + 1;"+"\r\n"+"		if ($this->FromIndex > $this->RecordCount)"+"\r\n"+"			$this->FromIndex = $this->RecordCount;"+"\r\n"+"		$this->ToIndex = $this->FromIndex + $this->PageSize - 1;"+"\r\n"+"		if ($this->ToIndex > $this->RecordCount)"+"\r\n"+"			$this->ToIndex = $this->RecordCount;"+"\r\n"+""+"\r\n"+"		// First Button"+"\r\n"+"		$TempIndex = 1;"+"\r\n"+"		$this->FirstButton->Start = $TempIndex;"+"\r\n"+"		$this->FirstButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+""+"\r\n"+"		// Prev Button"+"\r\n"+"		$TempIndex = $this->FromIndex - $this->PageSize;"+"\r\n"+"		if ($TempIndex < 1) $TempIndex = 1;"+"\r\n"+"		$this->PrevButton->Start = $TempIndex;"+"\r\n"+"		$this->PrevButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+""+"\r\n"+"		// Next Button"+"\r\n"+"		$TempIndex = $this->FromIndex + $this->PageSize;"+"\r\n"+"		if ($TempIndex > $this->RecordCount)"+"\r\n"+"			$TempIndex = $this->FromIndex;"+"\r\n"+"		$this->NextButton->Start = $TempIndex;"+"\r\n"+"		$this->NextButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+""+"\r\n"+"		// Last Button"+"\r\n"+"		$TempIndex = intval(($this->RecordCount-1)/$this->PageSize)*$this->PageSize + 1;"+"\r\n"+"		$this->LastButton->Start = $TempIndex;"+"\r\n"+"		$this->LastButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+"  }"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Breadcrumb class"+"\r\n"+" */"+"\r\n"+"class cBreadcrumb {"+"\r\n"+"	var $Links = array();"+"\r\n"+"	var $SessionLinks = array();"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct() {"+"\r\n"+"		global $Language;"+"\r\n"+"		$this->Links[] = array(\"home\", \"HomePage\", \"";
ewAr[29] = "\", \"ewHome\", \"\", FALSE); // Home"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if an item exists"+"\r\n"+"	function Exists($pageid, $table, $pageurl) {"+"\r\n"+"		if (is_array($this->Links)) {"+"\r\n"+"			$cnt = count($this->Links);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				@list($id, $title, $url, $tablevar, $cur) = $this->Links[$i];"+"\r\n"+"				if ($pageid == $id && $table == $tablevar && $pageurl == $url)"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add breadcrumb"+"\r\n"+"	function Add($pageid, $pagetitle, $pageurl, $pageurlclass = \"\", $table = \"\", $current = FALSE) {"+"\r\n"+""+"\r\n"+"		// Load session links"+"\r\n"+"		$this->LoadSession();"+"\r\n"+""+"\r\n"+"		// Get list of master tables"+"\r\n"+"		$mastertable = array();"+"\r\n"+"		if ($table <> \"\") {"+"\r\n"+"			$tablevar = $table;"+"\r\n"+"			while (@$_SESSION[EW_PROJECT_NAME . \"_\" . $tablevar . \"_\" . EW_TABLE_MASTER_TABLE] <> \"\") {"+"\r\n"+"				$tablevar = $_SESSION[EW_PROJECT_NAME . \"_\" . $tablevar . \"_\" . EW_TABLE_MASTER_TABLE];"+"\r\n"+"				if (in_array($tablevar, $mastertable))"+"\r\n"+"					break;"+"\r\n"+"				$mastertable[] = $tablevar;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Add master links first"+"\r\n"+"		if (is_array($this->SessionLinks)) {"+"\r\n"+"			$cnt = count($this->SessionLinks);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				@list($id, $title, $url, $cls, $tbl, $cur) = $this->SessionLinks[$i];"+"\r\n"+"				//if ((in_array($tbl, $mastertable) || $tbl == $table) && $id == \"list\") {"+"\r\n"+"				if (in_array($tbl, $mastertable) && $id == \"list\") {"+"\r\n"+"					if ($url == $pageurl)"+"\r\n"+"						break;"+"\r\n"+"					if (!$this->Exists($id, $tbl, $url))"+"\r\n"+"						$this->Links[] = array($id, $title, $url, $cls, $tbl, FALSE);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Add this link"+"\r\n"+"		if (!$this->Exists($pageid, $table, $pageurl))"+"\r\n"+"			$this->Links[] = array($pageid, $pagetitle, $pageurl, $pageurlclass, $table, $current);"+"\r\n"+""+"\r\n"+"		// Save session links"+"\r\n"+"		$this->SaveSession();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save links to Session"+"\r\n"+"	function SaveSession() {"+"\r\n"+"		$_SESSION[EW_SESSION_BREADCRUMB] = $this->Links;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load links from Session"+"\r\n"+"	function LoadSession() {"+"\r\n"+"		if (is_array(@$_SESSION[EW_SESSION_BREADCRUMB]))"+"\r\n"+"			$this->SessionLinks = $_SESSION[EW_SESSION_BREADCRUMB];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language phrase"+"\r\n"+"	function LanguagePhrase($title, $table, $current) {"+"\r\n"+"		global $Language;"+"\r\n"+"		$wrktitle = ($title == $table) ? $Language->TablePhrase($title, \"TblCaption\") : $Language->Phrase($title);"+"\r\n"+"		if ($current)"+"\r\n"+"			$wrktitle = \"<span id=\\\"ewPageCaption\\\">\" . $wrktitle . \"</span>\";"+"\r\n"+"		return $wrktitle;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render"+"\r\n"+"	function Render() {"+"\r\n"+"		if (!$this->Visible)"+"\r\n"+"			return;"+"\r\n"+"		$nav = \"<ul class=\\\"breadcrumb ewBreadcrumbs\\\">\";"+"\r\n"+"		if (is_array($this->Links)) {"+"\r\n"+"			$cnt = count($this->Links);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				list($id, $title, $url, $cls, $table, $cur) = $this->Links[$i];"+"\r\n"+"				if ($i < $cnt - 1) {"+"\r\n"+"					$nav .= \"<li id=\\\"ewBreadcrumb\" . ($i + 1) . \"\\\">\";"+"\r\n"+"				} else {"+"\r\n"+"					$nav .= \"<li id=\\\"ewBreadcrumb\" . ($i + 1) . \"\\\" class=\\\"active\\\">\";"+"\r\n"+"					$url = \"\"; // No need to show URL for current page"+"\r\n"+"				}"+"\r\n"+"				$text = $this->LanguagePhrase($title, $table, $cur);"+"\r\n"+"				$title = ew_HtmlTitle($text);"+"\r\n"+"				if ($url <> \"\") {"+"\r\n"+"					$nav .= \"<a href=\\\"\" . ew_GetUrl($url) . \"\\\"\";"+"\r\n"+"					if ($title <> \"\" && $title <> $text)"+"\r\n"+"						$nav .= \" title=\\\"\" . ew_HtmlEncode($title) . \"\\\"\";"+"\r\n"+"					if ($cls <> \"\")"+"\r\n"+"						$nav .= \" class=\\\"\" . $cls . \"\\\"\";"+"\r\n"+"					$nav .= \">\" . $text . \"</a>\";"+"\r\n"+"				} else {"+"\r\n"+"					$nav .= $text;"+"\r\n"+"				}"+"\r\n"+"				$nav .= \"</li>\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$nav .= \"</ul>\";"+"\r\n"+"		echo $nav;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Table classes"+"\r\n"+" */"+"\r\n"+"// Common class for table and report"+"\r\n"+"class cTableBase {"+"\r\n"+""+"\r\n"+"	var $TableVar;"+"\r\n"+"	var $TableName;"+"\r\n"+"	var $TableType;"+"\r\n"+""+"\r\n"+"	var $DBID = \"DB\"; // Table database id"+"\r\n"+"	var $UseSelectLimit = TRUE;"+"\r\n"+""+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	var $fields = array();"+"\r\n"+"	var $UseTokenInUrl = EW_USE_TOKEN_IN_URL;"+"\r\n"+"	var $Export; // Export"+"\r\n"+"	var $CustomExport; // Custom export"+"\r\n"+"	var $ExportAll;"+"\r\n"+"	var $ExportPageBreakCount; // Page break per every n record (PDF only)"+"\r\n"+"	var $ExportPageOrientation; // Page orientation (PDF only)"+"\r\n"+"	var $ExportPageSize; // Page size (PDF only)"+"\r\n"+"	var $ExportExcelPageOrientation; // Page orientation (PHPExcel only)"+"\r\n"+"	var $ExportExcelPageSize; // Page size (PHPExcel only)"+"\r\n"+"	var $SendEmail; // Send email"+"\r\n"+"	var $TableCustomInnerHtml; // Custom inner HTML"+"\r\n"+""+"\r\n"+"	var $BasicSearch; // Basic search"+"\r\n"+""+"\r\n"+"	var $CurrentFilter; // Current filter"+"\r\n"+"	var $CurrentOrder; // Current order"+"\r\n"+"	var $CurrentOrderType; // Current order type"+"\r\n"+""+"\r\n"+"	var $RowType; // Row type"+"\r\n"+"	var $CssClass; // CSS class"+"\r\n"+"	var $CssStyle; // CSS style"+"\r\n"+"	var $RowAttrs = array(); // Row custom attributes"+"\r\n"+""+"\r\n"+"	var $CurrentAction; // Current action"+"\r\n"+"	var $LastAction; // Last action"+"\r\n"+""+"\r\n"+"	var $UserIDAllowSecurity = 0; // User ID Allow"+"\r\n"+""+"\r\n"+"	// Update Table"+"\r\n"+"	var $UpdateTable = \"\";"+"\r\n"+""+"\r\n"+"	// Connection"+"\r\n"+"	function &Connection() {"+"\r\n"+"		return Conn($this->DBID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Build filter from array"+"\r\n"+"	function ArrayToFilter(&$rs) {"+"\r\n"+"		$filter = \"\";"+"\r\n"+"		foreach ($rs as $name => $value) {"+"\r\n"+"			if (array_key_exists($name, $this->fields))"+"\r\n"+"				ew_AddFilter($filter, ew_QuotedName($this->fields[$name]->FldName, $this->DBID) . '=' . ew_QuotedValue($value, $this->fields[$name]->FldDataType, $this->DBID));"+"\r\n"+"		}"+"\r\n"+"		return $filter;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Build UPDATE statement with WHERE clause"+"\r\n"+"	// $rs (array) array of field to be updated"+"\r\n"+"	// $where (string|array) WHERE clause as string or array of field"+"\r\n"+"	function UpdateSQL(&$rs, $where) {"+"\r\n"+"		if (empty($this->UpdateTable) || empty($where))"+"\r\n"+"			return \"\"; // Does not allow updating all records"+"\r\n"+"		$sql = \"UPDATE \" . $this->UpdateTable . \" SET \";"+"\r\n"+"		foreach ($rs as $name => $value) {"+"\r\n"+"			if (!isset($this->fields[$name]) || $this->fields[$name]->FldIsCustom)"+"\r\n"+"				continue;"+"\r\n"+"			$sql .= $this->fields[$name]->FldExpression . \"=\";"+"\r\n"+"			$sql .= ew_QuotedValue($value, $this->fields[$name]->FldDataType, $this->DBID) . \",\";"+"\r\n"+"		}"+"\r\n"+"		while (substr($sql, -1) == \",\")"+"\r\n"+"			$sql = substr($sql, 0, -1);"+"\r\n"+"		$filter = is_array($where) ? $this->ArrayToFilter($where) : $where;"+"\r\n"+"		return $sql . \" WHERE \" . $filter;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Update"+"\r\n"+"	function Update(&$rs, $where) {"+"\r\n"+"		if (empty($this->UpdateTable) || empty($where))"+"\r\n"+"			return FALSE; // Does not allow updating all records"+"\r\n"+"		$conn = &$this->Connection();"+"\r\n"+"		return $conn->Execute($this->UpdateSQL($rs, $where));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Build DELETE statement"+"\r\n"+"	// $where (string|array) WHERE clause as string or array of field"+"\r\n"+"	function DeleteSQL(&$where) {"+"\r\n"+"		if (empty($this->UpdateTable) || empty($where))"+"\r\n"+"			return \"\"; // Does not allow deleting all records"+"\r\n"+"		$sql = \"DELETE FROM \" . $this->UpdateTable;"+"\r\n"+"		$filter = is_array($where) ? $this->ArrayToFilter($where) : $where;"+"\r\n"+"		return $sql . \" WHERE \" . $filter;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete"+"\r\n"+"	// $where (string|array) WHERE clause as string or array of field"+"\r\n"+"	function Delete(&$where) {"+"\r\n"+"		if (empty($this->UpdateTable) || empty($where))"+"\r\n"+"			return FALSE; // Does not allow deleting all records"+"\r\n"+"		$conn = &$this->Connection();"+"\r\n"+"		return $conn->Execute($this->DeleteSQL($rs));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Reset attributes for table object"+"\r\n"+"	function ResetAttrs() {"+"\r\n"+"		$this->CssClass = \"\";"+"\r\n"+"		$this->CssStyle = \"\";"+"\r\n"+"    	$this->RowAttrs = array();"+"\r\n"+"		foreach ($this->fields as $fld) {"+"\r\n"+"			$fld->ResetAttrs();"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Setup field titles"+"\r\n"+"	function SetupFieldTitles() {"+"\r\n"+"		foreach ($this->fields as &$fld) {"+"\r\n"+"			if (strval($fld->FldTitle()) <> \"\") {"+"\r\n"+"				$fld->EditAttrs[\"data-toggle\"] = \"tooltip\";"+"\r\n"+"				$fld->EditAttrs[\"title\"] = ew_HtmlEncode($fld->FldTitle());"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $TableFilter = \"\";"+"\r\n"+""+"\r\n"+"	// Get field values"+"\r\n"+"	function GetFieldValues($propertyname) {"+"\r\n"+"		$values = array();"+"\r\n"+"		foreach ($this->fields as $fldname => $fld)"+"\r\n"+"			$values[$fldname] = $fld->$propertyname;"+"\r\n"+"		return $values;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $TableCaption = \"\";"+"\r\n"+""+"\r\n"+"	// Set table caption"+"\r\n"+"	function setTableCaption($v) {"+"\r\n"+"		$this->TableCaption = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table caption"+"\r\n"+"	function TableCaption() {"+"\r\n"+"		global $Language;"+"\r\n"+"		if ($this->TableCaption <> \"\")"+"\r\n"+"			return $this->TableCaption;"+"\r\n"+"		else"+"\r\n"+"			return $Language->TablePhrase($this->TableVar, \"TblCaption\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $PgCaption = array();"+"\r\n"+""+"\r\n"+"	// Set page caption"+"\r\n"+"	function setPageCaption($Page, $v) {"+"\r\n"+"		$this->PgCaption[$Page] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Page caption"+"\r\n"+"	function PageCaption($Page) {"+"\r\n"+"		global $Language;"+"\r\n"+"		$Caption = @$this->PgCaption[$Page];"+"\r\n"+"		if ($Caption <> \"\") {"+"\r\n"+"			return $Caption;"+"\r\n"+"		} else {"+"\r\n"+"			$Caption = $Language->TablePhrase($this->TableVar, \"TblPageCaption\" . $Page);"+"\r\n"+"			if ($Caption == \"\") $Caption = \"Page \" . $Page;"+"\r\n"+"			return $Caption;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add URL parameter"+"\r\n"+"	function UrlParm($parm = \"\") {"+"\r\n"+"		$UrlParm = ($this->UseTokenInUrl) ? \"t=\" . $this->TablVar : \"\";"+"\r\n"+"		if ($parm <> \"\") {"+"\r\n"+"			if ($UrlParm <> \"\")"+"\r\n"+"				$UrlParm .= \"&\";"+"\r\n"+"			$UrlParm .= $parm;"+"\r\n"+"		}"+"\r\n"+"		return $UrlParm;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Row styles"+"\r\n"+"	function RowStyles() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		$sStyle = trim($this->CssStyle);"+"\r\n"+"		if (@$this->RowAttrs[\"style\"] <> \"\")"+"\r\n"+"			$sStyle .= \" \" . $this->RowAttrs[\"style\"];"+"\r\n"+"		$sClass = trim($this->CssClass);"+"\r\n"+"		if (@$this->RowAttrs[\"class\"] <> \"\")"+"\r\n"+"			$sClass .= \" \" . $this->RowAttrs[\"class\"];"+"\r\n"+"		if (trim($sStyle) <> \"\")"+"\r\n"+"			$sAtt .= \" style=\\\"\" . trim($sStyle) . \"\\\"\";"+"\r\n"+"		if (trim($sClass) <> \"\")"+"\r\n"+"			$sAtt .= \" class=\\\"\" . trim($sClass) . \"\\\"\";"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Row attributes"+"\r\n"+"	function RowAttributes() {"+"\r\n"+"		$sAtt = $this->RowStyles();"+"\r\n"+"		if ($this->Export == \"\") {"+"\r\n"+"			foreach ($this->RowAttrs as $k => $v) {"+"\r\n"+"				if ($k <> \"class\" && $k <> \"style\" && trim($v) <> \"\")"+"\r\n"+"					$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field object by name"+"\r\n"+"	function fields($fldname) {"+"\r\n"+"		return $this->fields[$fldname];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+"// Class for table"+"\r\n"+"class cTable extends cTableBase {"+"\r\n"+""+"\r\n"+"	var $CurrentMode = \"\"; // Current mode"+"\r\n"+"	var $UpdateConflict; // Update conflict"+"\r\n"+"	var $EventName; // Event name"+"\r\n"+"	var $EventCancelled; // Event cancelled"+"\r\n"+"	var $CancelMessage; // Cancel message"+"\r\n"+"	var $AllowAddDeleteRow = TRUE; // Allow add/delete row"+"\r\n"+"	var $ValidateKey = TRUE; // Validate key"+"\r\n"+""+"\r\n"+"	var $DetailAdd; // Allow detail add"+"\r\n"+"	var $DetailEdit; // Allow detail edit"+"\r\n"+"	var $DetailView; // Allow detail view"+"\r\n"+"	var $ShowMultipleDetails; // Show multiple details"+"\r\n"+""+"\r\n"+"	var $GridAddRowCount;"+"\r\n"+"	var $CustomActions = array(); // Custom action array"+"\r\n"+""+"\r\n"+"	// Check current action"+"\r\n"+"	// - Add"+"\r\n"+"	function IsAdd() {"+"\r\n"+"		return $this->CurrentAction == \"add\";"+"\r\n"+"	}"+"\r\n"+"	// - Copy"+"\r\n"+"	function IsCopy() {"+"\r\n"+"		return $this->CurrentAction == \"copy\" || $this->CurrentAction == \"C\";"+"\r\n"+"	}"+"\r\n"+"	// - Edit"+"\r\n"+"	function IsEdit() {"+"\r\n"+"		return $this->CurrentAction == \"edit\";"+"\r\n"+"	}"+"\r\n"+"	// - Delete"+"\r\n"+"	function IsDelete() {"+"\r\n"+"		return $this->CurrentAction == \"D\";"+"\r\n"+"	}"+"\r\n"+"	// - Confirm"+"\r\n"+"	function IsConfirm() {"+"\r\n"+"		return $this->CurrentAction == \"F\";"+"\r\n"+"	}"+"\r\n"+"	// - Confirm cancelled"+"\r\n"+"	function IsConfirmCancel() {"+"\r\n"+"		return $this->CurrentAction == \"X\";"+"\r\n"+"	}"+"\r\n"+"	// - Overwrite"+"\r\n"+"	function IsOverwrite() {"+"\r\n"+"		return $this->CurrentAction == \"overwrite\";"+"\r\n"+"	}"+"\r\n"+"	// - Cancel"+"\r\n"+"	function IsCancel() {"+"\r\n"+"		return $this->CurrentAction == \"cancel\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid add"+"\r\n"+"	function IsGridAdd() {"+"\r\n"+"		return $this->CurrentAction == \"gridadd\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid edit"+"\r\n"+"	function IsGridEdit() {"+"\r\n"+"		return $this->CurrentAction == \"gridedit\";"+"\r\n"+"	}"+"\r\n"+"	// - Add/Copy/Edit/GridAdd/GridEdit"+"\r\n"+"	function IsAddOrEdit() {"+"\r\n"+"		return $this->IsAdd() || $this->IsCopy() || $this->IsEdit() || $this->IsGridAdd() || $this->IsGridEdit();"+"\r\n"+"	}"+"\r\n"+"	// - Insert"+"\r\n"+"	function IsInsert() {"+"\r\n"+"		return $this->CurrentAction == \"insert\" || $this->CurrentAction == \"A\";"+"\r\n"+"	}"+"\r\n"+"	// - Update"+"\r\n"+"	function IsUpdate() {"+"\r\n"+"		return $this->CurrentAction == \"update\" || $this->CurrentAction == \"U\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid update"+"\r\n"+"	function IsGridUpdate() {"+"\r\n"+"		return $this->CurrentAction == \"gridupdate\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid insert"+"\r\n"+"	function IsGridInsert() {"+"\r\n"+"		return $this->CurrentAction == \"gridinsert\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid overwrite"+"\r\n"+"	function IsGridOverwrite() {"+"\r\n"+"		return $this->CurrentAction == \"gridoverwrite\";"+"\r\n"+"	}"+"\r\n"+"	// Check last action"+"\r\n"+"	// - Cancelled"+"\r\n"+"	function IsCanceled() {"+"\r\n"+"		return $this->LastAction == \"cancel\" && $this->CurrentAction == \"\";"+"\r\n"+"	}"+"\r\n"+"	// - Inline inserted"+"\r\n"+"	function IsInlineInserted() {"+"\r\n"+"		return $this->LastAction == \"insert\" && $this->CurrentAction == \"\";"+"\r\n"+"	}"+"\r\n"+"	// - Inline updated"+"\r\n"+"	function IsInlineUpdated() {"+"\r\n"+"		return $this->LastAction == \"update\" && $this->CurrentAction == \"\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid updated"+"\r\n"+"	function IsGridUpdated() {"+"\r\n"+"		return $this->LastAction == \"gridupdate\" && $this->CurrentAction == \"\";"+"\r\n"+"	}"+"\r\n"+"	// - Grid inserted"+"\r\n"+"	function IsGridInserted() {"+"\r\n"+"		return $this->LastAction == \"gridinsert\" && $this->CurrentAction == \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Export return page"+"\r\n"+"	function ExportReturnUrl() {"+"\r\n"+"		$url = @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_EXPORT_RETURN_URL];"+"\r\n"+"		return ($url <> \"\") ? $url : ew_CurrentPage();"+"\r\n"+"	}"+"\r\n"+"	function setExportReturnUrl($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_EXPORT_RETURN_URL] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Records per page"+"\r\n"+"	function getRecordsPerPage() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_REC_PER_PAGE];"+"\r\n"+"	}"+"\r\n"+"	function setRecordsPerPage($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_REC_PER_PAGE] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start record number"+"\r\n"+"	function getStartRecordNumber() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_START_REC];"+"\r\n"+"	}"+"\r\n"+"	function setStartRecordNumber($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_START_REC] = $v;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Search highlight name"+"\r\n"+"	function HighlightName() {"+"\r\n"+"		return $this->TableVar . \"_Highlight\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Search WHERE clause"+"\r\n"+"	function getSearchWhere() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_SEARCH_WHERE];"+"\r\n"+"	}"+"\r\n"+"	function setSearchWhere($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_SEARCH_WHERE] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session WHERE clause"+"\r\n"+"	function getSessionWhere() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_WHERE];"+"\r\n"+"	}"+"\r\n"+"	function setSessionWhere($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_WHERE] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session ORDER BY"+"\r\n"+"	function getSessionOrderBy() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_ORDER_BY];"+"\r\n"+"	}"+"\r\n"+"	function setSessionOrderBy($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_ORDER_BY] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session key"+"\r\n"+"	function getKey($fld) {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_KEY . \"_\" . $fld];"+"\r\n"+"	}"+"\r\n"+"	function setKey($fld, $v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TableVar . \"_\" . EW_TABLE_KEY . \"_\" . $fld] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// URL encode"+"\r\n"+"	function UrlEncode($str) {"+"\r\n"+"		return urlencode($str);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Print"+"\r\n"+"	function Raw($str) {"+"\r\n"+"		return $str;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Field class"+"\r\n"+" */"+"\r\n"+"class cField {"+"\r\n"+""+"\r\n"+"	var $TblName; // Table name"+"\r\n"+"	var $TblVar; // Table variable name"+"\r\n"+"	var $FldName; // Field name"+"\r\n"+"	var $FldVar; // Field variable name"+"\r\n"+"	var $FldExpression; // Field expression (used in SQL)"+"\r\n"+"	var $FldBasicSearchExpression; // Field expression (used in basic search SQL)"+"\r\n"+"	var $FldIsCustom = FALSE; // Custom field"+"\r\n"+"	var $FldIsVirtual; // Virtual field"+"\r\n"+"	var $FldVirtualExpression; // Virtual field expression (used in ListSQL)"+"\r\n"+"	var $FldForceSelection; // Autosuggest force selection"+"\r\n"+"	var $FldVirtualSearch; // Search as virtual field"+"\r\n"+"	var $FldDefaultErrMsg; // Default error message"+"\r\n"+"	var $VirtualValue; // Virtual field value"+"\r\n"+"	var $TooltipValue; // Field tooltip value"+"\r\n"+"	var $TooltipWidth = 0; // Field tooltip width"+"\r\n"+"	var $FldType; // Field type"+"\r\n"+"	var $FldDataType; // PHPMaker Field type"+"\r\n"+"	var $FldBlobType; // For Oracle only"+"\r\n"+"	var $FldViewTag; // View Tag"+"\r\n"+"	var $FldHtmlTag; // Html Tag"+"\r\n"+"	var $FldIsDetailKey = FALSE; // Field is detail key"+"\r\n"+"	var $AdvancedSearch; // AdvancedSearch Object"+"\r\n"+"	var $Upload; // Upload Object"+"\r\n"+"	var $FldDateTimeFormat; // Date time format"+"\r\n"+"	var $CssStyle; // CSS style"+"\r\n"+"	var $CssClass; // CSS class"+"\r\n"+"	var $ImageAlt; // Image alt"+"\r\n"+"	var $ImageWidth = 0; // Image width"+"\r\n"+"	var $ImageHeight = 0; // Image height"+"\r\n"+"	var $ImageResize = FALSE; // Image resize"+"\r\n"+"	var $IsBlobImage = FALSE; // Is blob image"+"\r\n"+"	var $ViewCustomAttributes; // View custom attributes"+"\r\n"+"	var $EditCustomAttributes; // Edit custom attributes"+"\r\n"+"	var $LinkCustomAttributes; // Link custom attributes"+"\r\n"+"	var $Count; // Count"+"\r\n"+"	var $Total; // Total"+"\r\n"+"	var $TrueValue = '1';"+"\r\n"+"	var $FalseValue = '0';"+"\r\n"+"	var $Visible = TRUE; // Visible"+"\r\n"+"	var $Disabled; // Disabled"+"\r\n"+"	var $ReadOnly = FALSE; // Read only"+"\r\n"+"	var $TruncateMemoRemoveHtml; // Remove HTML from memo field"+"\r\n"+"	var $CustomMsg = \"\"; // Custom message"+"\r\n"+"	var $CellCssClass = \"\"; // Cell CSS class"+"\r\n"+"	var $CellCssStyle = \"\"; // Cell CSS style"+"\r\n"+"	var $CellCustomAttributes = \"\"; // Cell custom attributes"+"\r\n"+"	var $MultiUpdate; // Multi update"+"\r\n"+"	var $OldValue; // Old Value"+"\r\n"+"	var $ConfirmValue; // Confirm value"+"\r\n"+"	var $CurrentValue; // Current value"+"\r\n"+"	var $ViewValue; // View value"+"\r\n"+"	var $EditValue; // Edit value"+"\r\n"+"	var $EditValue2; // Edit value 2 (search)"+"\r\n"+"	var $HrefValue; // Href value"+"\r\n"+"	var $HrefValue2; // Href value 2 (confirm page upload control)"+"\r\n"+"	var $FormValue; // Form value"+"\r\n"+"	var $QueryStringValue; // QueryString value"+"\r\n"+"	var $DbValue; // Database value"+"\r\n"+"	var $Sortable = TRUE; // Sortable"+"\r\n"+"	var $UploadPath = EW_UPLOAD_DEST_PATH; // Upload path"+"\r\n"+"	var $OldUploadPath = EW_UPLOAD_DEST_PATH; // Old upload path (for deleting old image)"+"\r\n"+"	var $UploadAllowedFileExt = EW_UPLOAD_ALLOWED_FILE_EXT; // Allowed file extensions"+"\r\n"+"	var $UploadMaxFileSize = EW_MAX_FILE_SIZE; // Upload max file size"+"\r\n"+"	var $UploadMaxFileCount = EW_MAX_FILE_COUNT; // Upload max file count"+"\r\n"+"	var $UploadMultiple = FALSE; // Multiple Upload"+"\r\n"+"	var $UseColorbox = EW_USE_COLORBOX; // Use Colorbox"+"\r\n"+"	var $CellAttrs = array(); // Cell custom attributes"+"\r\n"+"	var $EditAttrs = array(); // Edit custom attributes"+"\r\n"+"	var $ViewAttrs = array(); // View custom attributes"+"\r\n"+"	var $LinkAttrs = array(); // Link custom attributes"+"\r\n"+"	var $DisplayValueSeparator = \", \";"+"\r\n"+"	var $AutoFillOriginalValue = EW_AUTO_FILL_ORIGINAL_VALUE;"+"\r\n"+"	var $ReqErrMsg;"+"\r\n"+"	var $LookupFilters = array();"+"\r\n"+"	var $OptionCount = 0;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($tblvar, $tblname, $fldvar, $fldname, $fldexp, $fldbsexp, $fldtype, $flddtfmt, $upload, $fldvirtualexp, $fldvirtual, $forceselect, $fldvirtualsrch, $fldviewtag=\"\", $fldhtmltag=\"\") {"+"\r\n"+"		global $Language;"+"\r\n"+"		$this->TblVar = $tblvar;"+"\r\n"+"		$this->TblName = $tblname;"+"\r\n"+"		$this->FldVar = $fldvar;"+"\r\n"+"		$this->FldName = $fldname;"+"\r\n"+"		$this->FldExpression = $fldexp;"+"\r\n"+"		$this->FldBasicSearchExpression = $fldbsexp;"+"\r\n"+"		$this->FldType = $fldtype;"+"\r\n"+"		$this->FldDataType = ew_FieldDataType($fldtype);"+"\r\n"+"		$this->FldDateTimeFormat = $flddtfmt;"+"\r\n"+"		$this->AdvancedSearch = new cAdvancedSearch($this->TblVar, $this->FldVar);"+"\r\n"+"		if ($upload) {"+"\r\n"+"			$this->Upload = new cUpload($this->TblVar, $this->FldVar);"+"\r\n"+"		}"+"\r\n"+"		$this->FldVirtualExpression = $fldvirtualexp;"+"\r\n"+"		$this->FldIsVirtual = $fldvirtual;"+"\r\n"+"		$this->FldForceSelection = $forceselect;"+"\r\n"+"		$this->FldVirtualSearch = $fldvirtualsrch;"+"\r\n"+"		$this->FldViewTag = $fldviewtag;"+"\r\n"+"		$this->FldHtmlTag = $fldhtmltag;"+"\r\n"+"		if (isset($_GET[$fldvar]))"+"\r\n"+"			$this->setQueryStringValue($_GET[$fldvar], FALSE);"+"\r\n"+"		if (isset($_POST[$fldvar]))"+"\r\n"+"			$this->setFormValue($_POST[$fldvar], FALSE);"+"\r\n"+"		$this->ReqErrMsg = $Language->Phrase(\"EnterRequiredField\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	var $PlaceHolder = \"\";"+"\r\n"+""+"\r\n"+"	// Get place holder"+"\r\n"+"	function getPlaceHolder() {"+"\r\n"+"		return ($this->ReadOnly || array_key_exists(\"readonly\", $this->EditAttrs)) ? \"\" : $this->PlaceHolder;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $Caption = \"\";"+"\r\n"+""+"\r\n"+"	// Set field caption"+"\r\n"+"	function setFldCaption($v) {"+"\r\n"+"		$this->Caption = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field caption"+"\r\n"+"	function FldCaption() {"+"\r\n"+"		global $Language;"+"\r\n"+"		if ($this->Caption <> \"\")"+"\r\n"+"			return $this->Caption;"+"\r\n"+"		else"+"\r\n"+"			return $Language->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldCaption\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field title"+"\r\n"+"	function FldTitle() {"+"\r\n"+"		global $Language;"+"\r\n"+"		return $Language->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldTitle\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field image alt"+"\r\n"+"	function FldAlt() {"+"\r\n"+"		global $Language;"+"\r\n"+"		return $Language->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldAlt\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Field error message"+"\r\n"+"	function FldErrMsg() {"+"\r\n"+"		global $Language;"+"\r\n"+"		$err = $Language->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldErrMsg\");"+"\r\n"+"		if ($err == \"\") $err = $this->FldDefaultErrMsg . \" - \" . $this->FldCaption();"+"\r\n"+"		return $err;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field option value"+"\r\n"+"	function FldTagValue($i) {"+"\r\n"+"		global $Language;"+"\r\n"+"		return $Language->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldTagValue\" . $i);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field option caption"+"\r\n"+"	function FldTagCaption($i) {"+"\r\n"+"		global $Language;"+"\r\n"+"		return $Language->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldTagCaption\" . $i);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Field option caption by option value"+"\r\n"+"	function OptionCaption($val) {"+"\r\n"+"		global $Language;"+"\r\n"+"		for ($i = 0; $i < $this->OptionCount; $i++) {"+"\r\n"+"			if ($val == $this->FldTagValue($i + 1)) {"+"\r\n"+"				$caption = $this->FldTagCaption($i + 1);"+"\r\n"+"				return ($caption <> \"\") ? $caption : $val;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $val;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get field user options as array"+"\r\n"+"	function Options($ps = FALSE) {"+"\r\n"+"		global $Language;"+"\r\n"+"		$arwrk = array();"+"\r\n"+"		if ($ps) // Add \"Please Select\""+"\r\n"+"			$arwrk[] = array(\"\", $Language->Phrase(\"PleaseSelect\"));"+"\r\n"+"		for ($i = 0; $i < $this->OptionCount; $i++) {"+"\r\n"+"			$value = $this->FldTagValue($i + 1);"+"\r\n"+"			$caption = $this->FldTagCaption($i + 1);"+"\r\n"+"			$caption = ($caption <> \"\") ? $caption : $value;"+"\r\n"+"			$arwrk[] = array($value, $caption);"+"\r\n"+"		}"+"\r\n"+"		return $arwrk;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get display field value separator"+"\r\n"+"	// idx (int) display field index (1|2|3)"+"\r\n"+"	function GetDisplayValueSeparator($idx) {"+"\r\n"+"		$sep = $this->DisplayValueSeparator;"+"\r\n"+"		return (is_array($sep)) ? @$sep[$idx - 1] : ($sep ?: \", \");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get display value (for lookup field)"+"\r\n"+"	// $rs (array|recordset)"+"\r\n"+"	function DisplayValue($rs) {"+"\r\n"+"		$ar = is_array($rs) ? $rs : $rs->fields;"+"\r\n"+"		$val = strval(@$ar[1]); // Display field 1"+"\r\n"+"		for ($i = 2; $i <= 4; $i++) { // Display field 2 to 4"+"\r\n"+"			$sep = $this->GetDisplayValueSeparator($i - 1);"+"\r\n"+"			if (is_null($sep)) // No separator, break"+"\r\n"+"				break;"+"\r\n"+"			if (@$ar[$i] <> \"\")"+"\r\n"+"				$val .= $sep . $ar[$i];"+"\r\n"+"		}"+"\r\n"+"		return $val;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Reset attributes for field object"+"\r\n"+"	function ResetAttrs() {"+"\r\n"+"		$this->CssStyle = \"\";"+"\r\n"+"		$this->CssClass = \"\";"+"\r\n"+"		$this->CellCssStyle = \"\";"+"\r\n"+"		$this->CellCssClass = \"\";"+"\r\n"+"		$this->CellAttrs = array();"+"\r\n"+"		$this->EditAttrs = array();"+"\r\n"+"		$this->ViewAttrs = array();"+"\r\n"+"		$this->LinkAttrs = array();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// View Attributes"+"\r\n"+"	function ViewAttributes() {"+"\r\n"+"		$viewattrs = $this->ViewAttrs;"+"\r\n"+"		if ($this->FldViewTag == \"IMAGE\")"+"\r\n"+"			$viewattrs[\"alt\"] = (trim($this->ImageAlt) <> \"\") ? trim($this->ImageAlt) : \"\"; // IMG tag requires alt attribute"+"\r\n"+"		$attrs = $this->ViewCustomAttributes; // Custom attributes"+"\r\n"+"		if (is_array($attrs)) { // Custom attributes as array"+"\r\n"+"			$ar = $attrs;"+"\r\n"+"			$attrs = \"\";"+"\r\n"+"			$aik = array_intersect_key($ar, $viewattrs);"+"\r\n"+"			$viewattrs += $ar; // Combine attributes"+"\r\n"+"			foreach ($aik as $k => $v) { // Duplicate attributes"+"\r\n"+"				if ($k == \"style\" || substr($k, 0, 2) == \"on\") // \"style\" and events"+"\r\n"+"					$viewattrs[$k] = ew_Concat($viewattrs[$k], $v, \";\");"+"\r\n"+"				else // \"class\" and others"+"\r\n"+"					$viewattrs[$k] = ew_Concat($viewattrs[$k], $v, \" \");"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$sStyle = \"\";"+"\r\n"+"		if ($this->FldViewTag == \"IMAGE\" && intval($this->ImageWidth) > 0 && (!$this->ImageResize || intval($this->ImageHeight) <= 0))"+"\r\n"+"			$sStyle .= \"width: \" . intval($this->ImageWidth) . \"px; \";"+"\r\n"+"		if ($this->FldViewTag == \"IMAGE\" && intval($this->ImageHeight) > 0 && (!$this->ImageResize || intval($this->ImageWidth) <= 0))"+"\r\n"+"			$sStyle .= \"height: \" . intval($this->ImageHeight) . \"px; \";"+"\r\n"+"		$viewattrs[\"style\"] = ew_Concat(@$viewattrs[\"style\"], $sStyle . trim($this->CssStyle), \";\");"+"\r\n"+"		$viewattrs[\"class\"] = ew_Concat(@$viewattrs[\"class\"], $this->CssClass, \" \");"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($viewattrs as $k => $v) {"+"\r\n"+"			if (trim($k) <> \"\" && (trim($v) <> \"\" || ew_IsBooleanAttr($k))) { // Allow boolean attributes, e.g. \"disabled\""+"\r\n"+"				$sAtt .= \" \" . trim($k);"+"\r\n"+"				if (trim($v) <> \"\")"+"\r\n"+"					$sAtt .= \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"			} elseif (trim($k) == \"alt\" && trim($v) == \"\") { // Allow alt=\"\" since it is a required attribute"+"\r\n"+"				$sAtt .= \" alt=\\\"\\\"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($attrs <> \"\") // Custom attributes as string"+"\r\n"+"			$sAtt .= \" \" . $attrs;"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Edit attributes"+"\r\n"+"	function EditAttributes() {"+"\r\n"+"		$editattrs = $this->EditAttrs;"+"\r\n"+"		$attrs = $this->EditCustomAttributes; // Custom attributes"+"\r\n"+"		if (is_array($attrs)) { // Custom attributes as array"+"\r\n"+"			$ar = $attrs;"+"\r\n"+"			$attrs = \"\";"+"\r\n"+"			$aik = array_intersect_key($ar, $editattrs);"+"\r\n"+"			$editattrs += $ar; // Combine attributes"+"\r\n"+"			foreach ($aik as $k => $v) { // Duplicate attributes"+"\r\n"+"				if ($k == \"style\" || substr($k, 0, 2) == \"on\") // \"style\" and events"+"\r\n"+"					$editattrs[$k] = ew_Concat($editattrs[$k], $v, \";\");"+"\r\n"+"				else // \"class\" and others"+"\r\n"+"					$editattrs[$k] = ew_Concat($editattrs[$k], $v, \" \");"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$editattrs[\"style\"] = ew_Concat(@$editattrs[\"style\"], $this->CssStyle, \";\");"+"\r\n"+"		$editattrs[\"class\"] = ew_Concat(@$editattrs[\"class\"], $this->CssClass, \" \");"+"\r\n"+"		if ($this->Disabled)"+"\r\n"+"			$editattrs[\"disabled\"] = \"disabled\";"+"\r\n"+"		if ($this->ReadOnly)"+"\r\n"+"			$editattrs[\"readonly\"] = \"readonly\";"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($editattrs as $k => $v) {"+"\r\n"+"			if (trim($k) <> \"\" && (trim($v) <> \"\" || ew_IsBooleanAttr($k))) { // Allow boolean attributes, e.g. \"disabled\""+"\r\n"+"				$sAtt .= \" \" . trim($k);"+"\r\n"+"				if (trim($v) <> \"\")"+"\r\n"+"					$sAtt .= \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($attrs <> \"\") // Custom attributes as string"+"\r\n"+"			$sAtt .= \" \" . $attrs;"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Cell styles (Used in export)"+"\r\n"+"	function CellStyles() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		$sStyle = trim($this->CellCssStyle);"+"\r\n"+"		if (@$this->CellAttrs[\"style\"] <> \"\")"+"\r\n"+"			$sStyle .= \" \" . $this->CellAttrs[\"style\"];"+"\r\n"+"		$sClass = trim($this->CellCssClass);"+"\r\n"+"		if (@$this->CellAttrs[\"class\"] <> \"\")"+"\r\n"+"			$sClass .= \" \" . $this->CellAttrs[\"class\"];"+"\r\n"+"		if (trim($sStyle) <> \"\")"+"\r\n"+"			$sAtt .= \" style=\\\"\" . trim($sStyle) . \"\\\"\";"+"\r\n"+"		if (trim($sClass) <> \"\")"+"\r\n"+"			$sAtt .= \" class=\\\"\" . trim($sClass) . \"\\\"\";"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Cell attributes"+"\r\n"+"	function CellAttributes() {"+"\r\n"+"		$cellattrs = $this->CellAttrs;"+"\r\n"+"		$attrs = $this->CellCustomAttributes; // Custom attributes"+"\r\n"+"		if (is_array($attrs)) { // Custom attributes as array"+"\r\n"+"			$ar = $attrs;"+"\r\n"+"			$attrs = \"\";"+"\r\n"+"			$aik = array_intersect_key($ar, $cellattrs);"+"\r\n"+"			$cellattrs += $ar; // Combine attributes"+"\r\n"+"			foreach ($aik as $k => $v) { // Duplicate attributes"+"\r\n"+"				if ($k == \"style\" || substr($k, 0, 2) == \"on\") // \"style\" and events"+"\r\n"+"					$cellattrs[$k] = ew_Concat($cellattrs[$k], $v, \";\");"+"\r\n"+"				else // \"class\" and others"+"\r\n"+"					$cellattrs[$k] = ew_Concat($cellattrs[$k], $v, \" \");"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$cellattrs[\"style\"] = ew_Concat(@$cellattrs[\"style\"], $this->CellCssStyle, \";\");"+"\r\n"+"		$cellattrs[\"class\"] = ew_Concat(@$cellattrs[\"class\"], $this->CellCssClass, \" \");"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($cellattrs as $k => $v) {"+"\r\n"+"			if (trim($k) <> \"\" && (trim($v) <> \"\" || ew_IsBooleanAttr($k))) { // Allow boolean attributes, e.g. \"disabled\""+"\r\n"+"				$sAtt .= \" \" . trim($k);"+"\r\n"+"				if (trim($v) <> \"\")"+"\r\n"+"					$sAtt .= \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($attrs <> \"\") // Custom attributes as string"+"\r\n"+"			$sAtt .= \" \" . $attrs;"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Link attributes"+"\r\n"+"	function LinkAttributes() {"+"\r\n"+"		$linkattrs = $this->LinkAttrs;"+"\r\n"+"		$attrs = $this->LinkCustomAttributes; // Custom attributes"+"\r\n"+"		if (is_array($attrs)) { // Custom attributes as array"+"\r\n"+"			$ar = $attrs;"+"\r\n"+"			$attrs = \"\";"+"\r\n"+"			$aik = array_intersect_key($ar, $linkattrs);"+"\r\n"+"			$linkattrs += $ar; // Combine attributes"+"\r\n"+"			foreach ($aik as $k => $v) { // Duplicate attributes"+"\r\n"+"				if ($k == \"style\" || substr($k, 0, 2) == \"on\") // \"style\" and events"+"\r\n"+"					$linkattrs[$k] = ew_Concat($linkattrs[$k], $v, \";\");"+"\r\n"+"				else // \"class\" and others"+"\r\n"+"					$linkattrs[$k] = ew_Concat($linkattrs[$k], $v, \" \");"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$sHref = trim($this->HrefValue);"+"\r\n"+"		if ($sHref <> \"\")"+"\r\n"+"			$linkattrs[\"href\"] = $sHref;"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($linkattrs as $k => $v) {"+"\r\n"+"			if (trim($k) <> \"\" && (trim($v) <> \"\" || ew_IsBooleanAttr($k))) { // Allow boolean attributes, e.g. \"disabled\""+"\r\n"+"				$sAtt .= \" \" . trim($k);"+"\r\n"+"				if (trim($v) <> \"\")"+"\r\n"+"					$sAtt .= \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($attrs <> \"\") // Custom attributes as string"+"\r\n"+"			$sAtt .= \" \" . $attrs;"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Sort"+"\r\n"+"	function getSort() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TblVar . \"_\" . EW_TABLE_SORT . \"_\" . $this->FldVar];"+"\r\n"+"	}"+"\r\n"+"	function setSort($v) {"+"\r\n"+"		if (@$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TblVar . \"_\" . EW_TABLE_SORT . \"_\" . $this->FldVar] <> $v) {"+"\r\n"+"			$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TblVar . \"_\" . EW_TABLE_SORT . \"_\" . $this->FldVar] = $v;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Reverse sort"+"\r\n"+"	function ReverseSort() {"+"\r\n"+"		return ($this->getSort() == \"ASC\") ? \"DESC\" : \"ASC\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Advanced search"+"\r\n"+"	function UrlParameterName($name) {"+"\r\n"+"		$fldparm = substr($this->FldVar, 2);"+"\r\n"+"		if (strcasecmp($name, \"SearchValue\") == 0) {"+"\r\n"+"			$fldparm = \"x_\" . $fldparm;"+"\r\n"+"		} elseif (strcasecmp($name, \"SearchOperator\") == 0) {"+"\r\n"+"			$fldparm = \"z_\" . $fldparm;"+"\r\n"+"		} elseif (strcasecmp($name, \"SearchCondition\") == 0) {"+"\r\n"+"			$fldparm = \"v_\" . $fldparm;"+"\r\n"+"		} elseif (strcasecmp($name, \"SearchValue2\") == 0) {"+"\r\n"+"			$fldparm = \"y_\" . $fldparm;"+"\r\n"+"		} elseif (strcasecmp($name, \"SearchOperator2\") == 0) {"+"\r\n"+"			$fldparm = \"w_\" . $fldparm;"+"\r\n"+"		}"+"\r\n"+"		return $fldparm;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// List view value"+"\r\n"+"	function ListViewValue() {"+"\r\n"+"		if ($this->FldDataType == EW_DATATYPE_XML) {"+"\r\n"+"			return $this->ViewValue . \"&nbsp;\";"+"\r\n"+"		} else {"+"\r\n"+"			$value = trim(strval($this->ViewValue));"+"\r\n"+"			if ($value <> \"\") {"+"\r\n"+"				$value2 = trim(preg_replace('/<[^img][^>]*>/i', '', strval($value)));"+"\r\n"+"				return ($value2 <> \"\") ? $this->ViewValue : \"&nbsp;\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"&nbsp;\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $Exportable = TRUE;"+"\r\n"+""+"\r\n"+"	// Export caption"+"\r\n"+"	function ExportCaption() {"+"\r\n"+"		return (EW_EXPORT_FIELD_CAPTION) ? $this->FldCaption() : $this->FldName;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $ExportOriginalValue = EW_EXPORT_ORIGINAL_VALUE;"+"\r\n"+""+"\r\n"+"	// Export value"+"\r\n"+"	function ExportValue() {"+"\r\n"+"		return ($this->ExportOriginalValue) ? $this->CurrentValue : $this->ViewValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get temp image"+"\r\n"+"	function GetTempImage() {"+"\r\n"+"		if ($this->FldDataType == EW_DATATYPE_BLOB) {"+"\r\n"+"			$wrkdata = $this->Upload->DbValue;"+"\r\n"+"			if (!empty($wrkdata)) {"+"\r\n"+"				if ($this->ImageResize) {"+"\r\n"+"					$wrkwidth = $this->ImageWidth;"+"\r\n"+"					$wrkheight = $this->ImageHeight;"+"\r\n"+"					ew_ResizeBinary($wrkdata, $wrkwidth, $wrkheight);"+"\r\n"+"				}"+"\r\n"+"				return ew_TmpImage($wrkdata);"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$wrkfile = $this->Upload->DbValue;"+"\r\n"+"			if (empty($wrkfile)) $wrkfile = $this->CurrentValue;"+"\r\n"+"			if (!empty($wrkfile)) {"+"\r\n"+"				if (!$this->UploadMultiple) {"+"\r\n"+"					$imagefn = ew_UploadPathEx(TRUE, $this->UploadPath) . $wrkfile;"+"\r\n"+"					if ($this->ImageResize) {"+"\r\n"+"						$wrkwidth = $this->ImageWidth;"+"\r\n"+"						$wrkheight = $this->ImageHeight;"+"\r\n"+"						$wrkdata = ew_ResizeFileToBinary($imagefn, $wrkwidth, $wrkheight);"+"\r\n"+"						return ew_TmpImage($wrkdata);"+"\r\n"+"					} else {"+"\r\n"+"						return $imagefn;"+"\r\n"+"					}"+"\r\n"+"				} else {"+"\r\n"+"					$tmpfiles = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $wrkfile);"+"\r\n"+"					$tmpimage = \"\";"+"\r\n"+"					foreach ($tmpfiles as $tmpfile) {"+"\r\n"+"						if ($tmpfile <> \"\") {"+"\r\n"+"							$imagefn = ew_UploadPathEx(TRUE, $this->UploadPath) . $tmpfile;"+"\r\n"+"							if ($this->ImageResize) {"+"\r\n"+"								$wrkwidth = $this->ImageWidth;"+"\r\n"+"								$wrkheight = $this->ImageHeight;"+"\r\n"+"								$wrkdata = ew_ResizeFileToBinary($imagefn, $wrkwidth, $wrkheight);"+"\r\n"+"								if ($tmpimage <> \"\")"+"\r\n"+"									$tmpimage .= \",\";"+"\r\n"+"								$tmpimage .= ew_TmpImage($wrkdata);"+"\r\n"+"							} else {"+"\r\n"+"								if ($tmpimage <> \"\")"+"\r\n"+"									$tmpimage .= \",\";"+"\r\n"+"								$tmpimage .= ew_ConvertFullUrl($this->UploadPath . $tmpfile);"+"\r\n"+"							}"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"					return $tmpimage;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Form value"+"\r\n"+"	function setFormValue($v, $current = TRUE) {"+"\r\n"+"		$this->FormValue = ew_StripSlashes($v);"+"\r\n"+"		if (is_array($this->FormValue))"+"\r\n"+"			$this->FormValue = implode(\",\", $this->FormValue);"+"\r\n"+"		if ($current)"+"\r\n"+"			$this->CurrentValue = $this->FormValue;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Old value (from $_POST)"+"\r\n"+"	function setOldValue($v) {"+"\r\n"+"		$this->OldValue = ew_StripSlashes($v);"+"\r\n"+"		if (is_array($this->OldValue)) {"+"\r\n"+"			$this->OldValue = implode(\",\", $this->OldValue);"+"\r\n"+"		} else {"+"\r\n"+"			$this->OldValue = $v;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// QueryString value"+"\r\n"+"	function setQueryStringValue($v, $current = TRUE) {"+"\r\n"+"		$this->QueryStringValue = ew_StripSlashes($v);"+"\r\n"+"		if ($current)"+"\r\n"+"			$this->CurrentValue = $this->QueryStringValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Database value"+"\r\n"+"	function setDbValue($v) {"+"\r\n"+"		$this->DbValue = $v;"+"\r\n"+"		$this->CurrentValue = $this->DbValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set database value with error default"+"\r\n"+"	function SetDbValueDef(&$rs, $value, $default, $skip = FALSE) {"+"\r\n"+"		if ($skip || !$this->Visible || $this->Disabled)"+"\r\n"+"			return;"+"\r\n"+"		switch ($this->FldType) {"+"\r\n"+"			case 2:"+"\r\n"+"			case 3:"+"\r\n"+"			case 16:"+"\r\n"+"			case 17:"+"\r\n"+"			case 18:  // Integer"+"\r\n"+"				$value = trim($value);"+"\r\n"+"				$DbValue = (is_numeric($value)) ? intval($value) : $default;"+"\r\n"+"				break;"+"\r\n"+"			case 19:"+"\r\n"+"			case 20:"+"\r\n"+"			case 21: // Big integer"+"\r\n"+"				$value = trim($value);"+"\r\n"+"				$DbValue = (is_numeric($value)) ? $value : $default;"+"\r\n"+"				break;"+"\r\n"+"			case 5:"+"\r\n"+"			case 6:"+"\r\n"+"			case 14:"+"\r\n"+"			case 131: // Double"+"\r\n"+"			case 139:"+"\r\n"+"			case 4: // Single"+"\r\n"+"				$value = trim($value);"+"\r\n"+"				$value = ew_StrToFloat($value);"+"\r\n"+"				$DbValue = (is_numeric($value)) ? $value : $default;"+"\r\n"+"				break;"+"\r\n"+"			case 7:"+"\r\n"+"			case 133:"+"\r\n"+"			case 134:"+"\r\n"+"			case 135: // Date"+"\r\n"+"			case 141: // XML"+"\r\n"+"			case 145: // Time"+"\r\n"+"			case 146: // DateTiemOffset"+"\r\n"+"			case 201:"+"\r\n"+"			case 203:"+"\r\n"+"			case 129:"+"\r\n"+"			case 130:"+"\r\n"+"			case 200:"+"\r\n"+"			case 202: // String"+"\r\n"+"				$value = trim($value);"+"\r\n"+"				$DbValue = ($value == \"\") ? $default : $value;"+"\r\n"+"				break;"+"\r\n"+"			case 128:"+"\r\n"+"			case 204:"+"\r\n"+"			case 205: // Binary"+"\r\n"+"				$DbValue = (is_null($value)) ? $default : $value;"+"\r\n"+"				break;"+"\r\n"+"			case 72: // GUID"+"\r\n"+"				$value = trim($value);"+"\r\n"+"				$DbValue = ($value <> \"\" && ew_CheckGUID($value)) ? $value : $default;"+"\r\n"+"				break;"+"\r\n"+"			case 11: // Boolean"+"\r\n"+"				$DbValue = (is_bool($value) || is_numeric($value)) ? $value : $default;"+"\r\n"+"				break;"+"\r\n"+"			default:"+"\r\n"+"				$DbValue = $value;"+"\r\n"+"		}"+"\r\n"+"		//$this->setDbValue($DbValue); // Do not override CurrentValue"+"\r\n"+"		$this->DbValue = $DbValue;"+"\r\n"+"		$rs[$this->FldName] = $this->DbValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session value"+"\r\n"+"	function getSessionValue() {"+"\r\n"+"		return @$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TblVar . \"_\" . $this->FldVar . \"_SessionValue\"];"+"\r\n"+"	}"+"\r\n"+"	function setSessionValue($v) {"+"\r\n"+"		$_SESSION[EW_PROJECT_NAME . \"_\" . $this->TblVar . \"_\" . $this->FldVar . \"_SessionValue\"] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Lookup filter query"+"\r\n"+"	function LookupFilterQuery() {"+"\r\n"+"		foreach ($this->LookupFilters as $key => &$value) {"+"\r\n"+"			if (preg_match('/^f\\d+$|^s$/', $key)) // \"f<n>\" or \"s\" "+"\r\n"+"				$value = ew_Encrypt($value); // Encrypt SQL and filter"+"\r\n"+"		}"+"\r\n"+"		return http_build_query($this->LookupFilters);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * List option collection class"+"\r\n"+" */"+"\r\n"+"class cListOptions {"+"\r\n"+"	var $Items = array();"+"\r\n"+"	var $CustomItem = \"\";"+"\r\n"+"	var $Tag = \"td\";"+"\r\n"+"	var $TagClassName = \"\";"+"\r\n"+"	var $TableVar = \"\";"+"\r\n"+"	var $RowCnt = \"\";"+"\r\n"+"	var $ScriptType = \"block\";"+"\r\n"+"	var $ScriptId = \"\";"+"\r\n"+"	var $ScriptClassName = \"\";"+"\r\n"+"	var $JavaScript = \"\";"+"\r\n"+"	var $RowSpan = 1;"+"\r\n"+"	var $UseDropDownButton = FALSE;"+"\r\n"+"	var $UseButtonGroup = FALSE;"+"\r\n"+"	var $ButtonClass = \"\";"+"\r\n"+"	var $GroupOptionName = \"button\";"+"\r\n"+"	var $DropDownButtonPhrase = \"\";"+"\r\n"+"	var $UseImageAndText = FALSE;"+"\r\n"+""+"\r\n"+"	// Check visible"+"\r\n"+"	function Visible() {"+"\r\n"+"		foreach ($this->Items as $item) {"+"\r\n"+"			if ($item->Visible)"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check group option visible"+"\r\n"+"	function GroupOptionVisible() {"+"\r\n"+"		$cnt = 0;"+"\r\n"+"		foreach ($this->Items as $item) {"+"\r\n"+"			if ($item->Name <> $this->GroupOptionName && "+"\r\n"+"				(($item->Visible && $item->ShowInDropDown && $this->UseDropDownButton) ||"+"\r\n"+"				($item->Visible && $item->ShowInButtonGroup && $this->UseButtonGroup))) {"+"\r\n"+"				$cnt += 1;"+"\r\n"+"				if ($this->UseDropDownButton && $cnt > 1)"+"\r\n"+"					return TRUE;"+"\r\n"+"				elseif ($this->UseButtonGroup)"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add and return a new option"+"\r\n"+"	function &Add($Name) {"+"\r\n"+"		$item = new cListOption($Name);"+"\r\n"+"		$item->Parent = &$this;"+"\r\n"+"		$this->Items[$Name] = $item;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load default settings"+"\r\n"+"	function LoadDefault() {"+"\r\n"+"		$this->CustomItem = \"\";"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			$this->Items[$key]->Body = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Hide all options"+"\r\n"+"	function HideAllOptions($Lists=array()) {"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			if (!in_array($key, $Lists))"+"\r\n"+"				$this->Items[$key]->Visible = FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show all options"+"\r\n"+"	function ShowAllOptions() {"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			$this->Items[$key]->Visible = TRUE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get item by name"+"\r\n"+"	// Predefined names: view/edit/copy/delete/detail_<DetailTable>/userpermission/checkbox"+"\r\n"+"	function &GetItem($Name) {"+"\r\n"+"		$item = array_key_exists($Name, $this->Items) ? $this->Items[$Name] : NULL;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get item position"+"\r\n"+"	function ItemPos($Name) {"+"\r\n"+"		$pos = 0;"+"\r\n"+"		foreach ($this->Items as $item) {"+"\r\n"+"			if ($item->Name == $Name)"+"\r\n"+"				return $pos;"+"\r\n"+"			$pos++;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Move item to position"+"\r\n"+"	function MoveItem($Name, $Pos) {"+"\r\n"+"		$cnt = count($this->Items);"+"\r\n"+"		if ($Pos < 0) // If negative, count from the end"+"\r\n"+"			$Pos = $cnt + $Pos;"+"\r\n"+"		if ($Pos < 0)"+"\r\n"+"			$Pos = 0;"+"\r\n"+"		if ($Pos >= $cnt)"+"\r\n"+"			$Pos = $cnt - 1;"+"\r\n"+"		$item = $this->GetItem($Name);"+"\r\n"+"		if ($item) {"+"\r\n"+"			unset($this->Items[$Name]);"+"\r\n"+"			$this->Items = array_merge(array_slice($this->Items, 0, $Pos),"+"\r\n"+"				array($Name => $item), array_slice($this->Items, $Pos));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render list options"+"\r\n"+"	function Render($Part, $Pos=\"\", $RowCnt=\"\", $ScriptType=\"block\", $ScriptId=\"\", $ScriptClassName=\"\") {"+"\r\n"+""+"\r\n"+"		if ($this->CustomItem == \"\" && $groupitem = &$this->GetItem($this->GroupOptionName) && $this->ShowPos($groupitem->OnLeft, $Pos)) {"+"\r\n"+"			if ($this->UseDropDownButton) { // Render dropdown"+"\r\n"+"				$buttonvalue = \"\";"+"\r\n"+"				$cnt = 0;"+"\r\n"+"				foreach ($this->Items as $item) {"+"\r\n"+"					if ($item->Name <> $this->GroupOptionName && $item->Visible) {"+"\r\n"+"						if ($item->ShowInDropDown) {"+"\r\n"+"							$buttonvalue .= $item->Body;"+"\r\n"+"							$cnt += 1;"+"\r\n"+"						} elseif ($item->Name == \"listactions\") { // Show listactions as button group"+"\r\n"+"							$item->Body = $this->RenderButtonGroup($item->Body);"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				if ($cnt <= 1) {"+"\r\n"+"					$this->UseDropDownButton = FALSE; // No need to use drop down button"+"\r\n"+"				} else {"+"\r\n"+"					$groupitem->Body = $this->RenderDropDownButton($buttonvalue, $Pos);"+"\r\n"+"					$groupitem->Visible = TRUE;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if (!$this->UseDropDownButton && $this->UseButtonGroup) { // Render button group"+"\r\n"+"				$visible = FALSE;"+"\r\n"+"				$buttongroups = array();"+"\r\n"+"				foreach ($this->Items as $item) {"+"\r\n"+"					if ($item->Name <> $this->GroupOptionName && $item->Visible && $item->Body <> \"\") {"+"\r\n"+"						if ($item->ShowInButtonGroup) {"+"\r\n"+"							$visible = TRUE;"+"\r\n"+"							$buttonvalue = ($this->UseImageAndText) ? $item->GetImageAndText($item->Body) : $item->Body;"+"\r\n"+"							if (!array_key_exists($item->ButtonGroupName, $buttongroups)) $buttongroups[$item->ButtonGroupName] = \"\";"+"\r\n"+"							$buttongroups[$item->ButtonGroupName] .= $buttonvalue;"+"\r\n"+"						} elseif ($item->Name == \"listactions\") { // Show listactions as button group"+"\r\n"+"							$item->Body = $this->RenderButtonGroup($item->Body);"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$groupitem->Body = \"\";"+"\r\n"+"				foreach ($buttongroups as $buttongroup => $buttonvalue)"+"\r\n"+"					$groupitem->Body .= $this->RenderButtonGroup($buttonvalue);"+"\r\n"+"				if ($visible)"+"\r\n"+"					$groupitem->Visible = TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		if ($ScriptId <> \"\") {"+"\r\n"+"			$this->RenderEx($Part, $Pos, $RowCnt, \"block\", $ScriptId, $ScriptClassName); // Original block for ew_ShowTemplates"+"\r\n"+"			$this->RenderEx($Part, $Pos, $RowCnt, \"blocknotd\", $ScriptId);"+"\r\n"+"			$this->RenderEx($Part, $Pos, $RowCnt, \"single\", $ScriptId);"+"\r\n"+"		} else {"+"\r\n"+"			$this->RenderEx($Part, $Pos, $RowCnt, $ScriptType, $ScriptId, $ScriptClassName);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render"+"\r\n"+"	function RenderEx($Part, $Pos=\"\", $RowCnt=\"\", $ScriptType=\"block\", $ScriptId=\"\", $ScriptClassName=\"\") {"+"\r\n"+"		$this->RowCnt = $RowCnt;"+"\r\n"+"		$this->ScriptType = $ScriptType;"+"\r\n"+"		$this->ScriptId = $ScriptId;"+"\r\n"+"		$this->ScriptClassName = $ScriptClassName;"+"\r\n"+"		$this->JavaScript = \"\";"+"\r\n"+"		if ($ScriptId <> \"\") {"+"\r\n"+"			$this->Tag = ($ScriptType == \"block\") ? \"td\" : \"span\";"+"\r\n"+"			if ($ScriptType == \"block\") {"+"\r\n"+"				if ($Part == \"header\")"+"\r\n"+"					echo \"";
ewAr[30] = "\";"+"\r\n"+"				else if ($Part == \"body\")"+"\r\n"+"					echo \"";
ewAr[31] = "\";"+"\r\n"+"				else if ($Part == \"footer\")"+"\r\n"+"					echo \"";
ewAr[32] = "\";"+"\r\n"+"			} elseif ($ScriptType == \"blocknotd\") {"+"\r\n"+"				if ($Part == \"header\")"+"\r\n"+"					echo \"";
ewAr[33] = "\";"+"\r\n"+"				else if ($Part == \"body\")"+"\r\n"+"					echo \"";
ewAr[34] = "\";"+"\r\n"+"				else if ($Part == \"footer\")"+"\r\n"+"					echo \"";
ewAr[35] = "\";"+"\r\n"+"				echo \"<span>\";"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			//$this->Tag = ($Pos <> \"\" && $Pos <> \"bottom\") ? \"td\" : \"span\";"+"\r\n"+"			$this->Tag = ($Pos <> \"\" && $Pos <> \"bottom\") ? \"td\" : \"div\";"+"\r\n"+"		}"+"\r\n"+"		if ($this->CustomItem <> \"\") {"+"\r\n"+"			$cnt = 0;"+"\r\n"+"			$opt = NULL;"+"\r\n"+"			foreach ($this->Items as &$item) {"+"\r\n"+"				if ($this->ShowItem($item, $ScriptId,  $Pos))"+"\r\n"+"					$cnt++;"+"\r\n"+"				if ($item->Name == $this->CustomItem)"+"\r\n"+"					$opt = &$item;"+"\r\n"+"			}"+"\r\n"+"			$bUseButtonGroup = $this->UseButtonGroup; // Backup options"+"\r\n"+"			$bUseImageAndText = $this->UseImageAndText;"+"\r\n"+"			$this->UseButtonGroup = TRUE; // Show button group for custom item"+"\r\n"+"			$this->UseImageAndText = TRUE; // Use image and text for custom item"+"\r\n"+"			if (is_object($opt) && $cnt > 0) {"+"\r\n"+"				if ($ScriptId <> \"\" || $this->ShowPos($opt->OnLeft, $Pos)) {"+"\r\n"+"					echo $opt->Render($Part, $cnt);"+"\r\n"+"				} else {"+"\r\n"+"					echo $opt->Render(\"\", $cnt);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$this->UseButtonGroup = $bUseButtonGroup; // Restore options"+"\r\n"+"			$this->UseImageAndText = $bUseImageAndText;"+"\r\n"+"		} else {"+"\r\n"+"			foreach ($this->Items as &$item) {"+"\r\n"+"				if ($this->ShowItem($item, $ScriptId,  $Pos))"+"\r\n"+"					echo $item->Render($Part, 1);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (($ScriptType == \"block\" || $ScriptType == \"blocknotd\") && $ScriptId <> \"\") {"+"\r\n"+"			if ($ScriptType == \"blocknotd\")"+"\r\n"+"				echo \"</span>\";"+"\r\n"+"			echo \"</script>\";"+"\r\n"+"			if ($this->JavaScript <> \"\")"+"\r\n"+"				echo $this->JavaScript;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show item"+"\r\n"+"	function ShowItem($item, $ScriptId, $Pos) {"+"\r\n"+"		$show = $item->Visible && ($ScriptId <> \"\" || $this->ShowPos($item->OnLeft, $Pos));"+"\r\n"+"		if ($show)"+"\r\n"+"			if ($this->UseDropDownButton)"+"\r\n"+"				$show = ($item->Name == $this->GroupOptionName || !$item->ShowInDropDown);"+"\r\n"+"			elseif ($this->UseButtonGroup)"+"\r\n"+"				$show = ($item->Name == $this->GroupOptionName || !$item->ShowInButtonGroup);"+"\r\n"+"		return $show;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show position"+"\r\n"+"	function ShowPos($OnLeft, $Pos) {"+"\r\n"+"		return ($OnLeft && $Pos == \"left\") || (!$OnLeft && $Pos == \"right\") || ($Pos == \"\") || ($Pos == \"bottom\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Concat options and return concatenated HTML"+"\r\n"+"	// - pattern - regular expression pattern for matching the option names, e.g. '/^detail_/'"+"\r\n"+"	function Concat($pattern, $separator = \"\") {"+"\r\n"+"		$ar = array();"+"\r\n"+"		$keys = array_keys($this->Items);"+"\r\n"+"		foreach ($keys as $key) {"+"\r\n"+"			if (preg_match($pattern, $key) && trim($this->Items[$key]->Body) <> \"\")"+"\r\n"+"				$ar[] = $this->Items[$key]->Body;"+"\r\n"+"		}"+"\r\n"+"		return implode($separator, $ar);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Merge options to the first option and return it"+"\r\n"+"	// - pattern - regular expression pattern for matching the option names, e.g. '/^detail_/'"+"\r\n"+"	function &Merge($pattern, $separator = \"\") {"+"\r\n"+"		$keys = array_keys($this->Items);"+"\r\n"+"		$first = NULL;"+"\r\n"+"		foreach ($keys as $key) {"+"\r\n"+"			if (preg_match($pattern, $key)) {"+"\r\n"+"				if (!$first) {"+"\r\n"+"					$first = $this->Items[$key];"+"\r\n"+"					$first->Body = $this->Concat($pattern, $separator);"+"\r\n"+"				} else {"+"\r\n"+"					$this->Items[$key]->Visible = FALSE;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $first;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get button group link"+"\r\n"+"	function RenderButtonGroup($body) {"+"\r\n"+"		// Get all hidden inputs"+"\r\n"+"		// format: <input type=\"hidden\" ...>"+"\r\n"+"		$inputs = array();"+"\r\n"+"		if (preg_match_all('/<input\\s+([^>]*)>/i', $body, $inputmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($inputmatches as $inputmatch) {"+"\r\n"+"				$body = str_replace($inputmatch[0], '', $body); "+"\r\n"+"				if (preg_match('/\\s+type\\s*=\\s*[\\'\"]hidden[\\'\"]/i', $inputmatch[0])) // Match type='hidden'"+"\r\n"+"					$inputs[] = $inputmatch[0];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		// Get all buttons"+"\r\n"+"		// format: <div class=\"btn-group\">...</div>"+"\r\n"+"		$btns = array();"+"\r\n"+"		if (preg_match_all('/<div\\s+class\\s*=\\s*[\\'\"]btn-group[\\'\"]([^>]*)>([\\s\\S]*?)<\\/div\\s*>/i', $body, $btnmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($btnmatches as $btnmatch) {"+"\r\n"+"				$body = str_replace($btnmatch[0], '', $body); "+"\r\n"+"				$btns[] = $btnmatch[0];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$links = '';"+"\r\n"+"		// Get all links/buttons"+"\r\n"+"		// format: <a ...>...</a> / <button ...>...</button>"+"\r\n"+"		if (preg_match_all('/<(a|button)([^>]*)>([\\s\\S]*?)<\\/(a|button)\\s*>/i', $body, $matches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($matches as $match) {"+"\r\n"+"				$tag = $match[1];"+"\r\n"+"				if (preg_match('/\\s+class\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[2], $submatches)) { // Match class='class'"+"\r\n"+"					$class = $submatches[1];"+"\r\n"+"					$attrs = str_replace($submatches[0], '', $match[2]);"+"\r\n"+"				} else {"+"\r\n"+"					$class = '';"+"\r\n"+"					$attrs = $match[2];"+"\r\n"+"				}"+"\r\n"+"				$caption = $match[3];"+"\r\n"+"				if (strpos($class, 'btn btn-default') === FALSE) // Prepend button classes"+"\r\n"+"					ew_PrependClass($class, 'btn btn-default');"+"\r\n"+"				if ($this->ButtonClass <> \"\")"+"\r\n"+"					ew_AppendClass($class, $this->ButtonClass);"+"\r\n"+"				$attrs = ' class=\"' . $class . '\" ' . $attrs;"+"\r\n"+" 				$link ='<' . $tag . $attrs . '>' . $caption . '</' . $tag . '>';"+"\r\n"+"				$links .= $link;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($links <> \"\")"+"\r\n"+"			$btngroup = '<div class=\"btn-group ewButtonGroup\">' . $links . '</div>';"+"\r\n"+"		else"+"\r\n"+"			$btngroup = \"\";"+"\r\n"+"		foreach ($btns as $btn)"+"\r\n"+"			$btngroup .= $btn;"+"\r\n"+"		foreach ($inputs as $input)"+"\r\n"+"			$btngroup .= $input;"+"\r\n"+"		return $btngroup;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render drop down button"+"\r\n"+"	function RenderDropDownButton($body, $pos) {"+"\r\n"+""+"\r\n"+"		// Get all hidden inputs"+"\r\n"+"		// format: <input type=\"hidden\" ...>"+"\r\n"+""+"\r\n"+"		$inputs = array();"+"\r\n"+"		if (preg_match_all('/<input\\s+([^>]*)>/i', $body, $inputmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($inputmatches as $inputmatch) {"+"\r\n"+"				$body = str_replace($inputmatch[0], '', $body); "+"\r\n"+"				if (preg_match('/\\s+type\\s*=\\s*[\\'\"]hidden[\\'\"]/i', $inputmatch[0])) // Match type='hidden'"+"\r\n"+"					$inputs[] = $inputmatch[0];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Remove all <div class=\"hide ewPreview\">...</div>"+"\r\n"+"		$previewlinks = \"\";"+"\r\n"+"		if (preg_match_all('/<div\\s+class\\s*=\\s*[\\'\"]hide\\s+ewPreview[\\'\"]>([\\s\\S]*?)(<div([^>]*)>([\\s\\S]*?)<\\/div\\s*>)+([\\s\\S]*?)<\\/div\\s*>/i', $body, $inputmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($inputmatches as $inputmatch) {"+"\r\n"+"				$body = str_replace($inputmatch[0], '', $body);"+"\r\n"+"				$previewlinks .= $inputmatch[0];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Remove toggle button first <button ... data-toggle=\"dropdown\">...</button>"+"\r\n"+"		if (preg_match_all('/<button\\s+([\\s\\S]*?)data-toggle\\s*=\\s*[\\'\"]dropdown[\\'\"]\\s*>([\\s\\S]*?)<\\/button\\s*>/i', $body, $btnmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($btnmatches as $btnmatch)"+"\r\n"+"				$body = str_replace($btnmatch[0], '', $body);"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Get all links/buttons <a ...>...</a> / <button ...>...</button>"+"\r\n"+"		if (!preg_match_all('/<(a|button)([^>]*)>([\\s\\S]*?)<\\/(a|button)\\s*>/i', $body, $matches, PREG_SET_ORDER))"+"\r\n"+"			return '';"+"\r\n"+"		$links = '';"+"\r\n"+"		$submenu = FALSE;"+"\r\n"+"		$submenulink = \"\";"+"\r\n"+"		$submenulinks = \"\";"+"\r\n"+"		foreach ($matches as $match) {"+"\r\n"+"			$tag = $match[1];"+"\r\n"+"			if (preg_match('/\\s+data-action\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[2], $actionmatches)) { // Match data-action='action'"+"\r\n"+"				$action = $actionmatches[1];"+"\r\n"+"			} else {"+"\r\n"+"				$action = '';"+"\r\n"+"			}"+"\r\n"+"			if (preg_match('/\\s+class\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[2], $submatches)) { // Match class='class'"+"\r\n"+"				$class = preg_replace('/btn[\\S]*\\s+/i', '', $submatches[1]);"+"\r\n"+"				$attrs = str_replace($submatches[0], '', $match[2]);"+"\r\n"+"			} else {"+"\r\n"+"				$class = '';"+"\r\n"+"				$attrs = $match[2];"+"\r\n"+"			}"+"\r\n"+"			$attrs = preg_replace('/\\s+title\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', '', $attrs); // Remove title='title'"+"\r\n"+"			if (preg_match('/\\s+data-caption\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $attrs, $submatches)) // Match data-caption='caption'"+"\r\n"+"				$caption = $submatches[1];"+"\r\n"+"			else"+"\r\n"+"				$caption = '';"+"\r\n"+"			$attrs = ' class=\"' . $class . '\" ' . $attrs;"+"\r\n"+"			if (strtolower($tag) == \"button\") // Add href for button"+"\r\n"+"				$attrs .= ' href=\"javascript:void(0);\"';"+"\r\n"+"			if ($this->UseImageAndText) { // Image and text"+"\r\n"+"				if (preg_match('/<img([^>]*)>/i', $match[3], $submatch)) // <img> tag"+"\r\n"+"					$caption = $submatch[0] . '&nbsp;&nbsp;' . $caption;"+"\r\n"+"				elseif (preg_match('/<span([^>]*)>([\\s\\S]*?)<\\/span\\s*>/i', $match[3], $submatch)) // <span class='class'></span> tag"+"\r\n"+"					if (preg_match('/\\s+class\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $submatch[1], $submatches)) // Match class='class'"+"\r\n"+"						$caption = $submatch[0] . '&nbsp;&nbsp;' . $caption;"+"\r\n"+"			}"+"\r\n"+"			if ($caption == '')"+"\r\n"+"				$caption = $match[3];"+"\r\n"+"			$link = '<a' . $attrs . '>' . $caption . '</a>';"+"\r\n"+"			if ($action == 'list') { // Start new submenu"+"\r\n"+"				if ($submenu) { // End previous submenu"+"\r\n"+"					if ($submenulinks <> '') { // Set up submenu"+"\r\n"+"						$links .= '<li class=\"dropdown-submenu\">' . $submenulink . '<ul class=\"dropdown-menu\">' . $submenulinks . '</ul></li>';"+"\r\n"+"					} else {"+"\r\n"+"						$links .= '<li>' . $submenulink . '</li>';"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$submenu = TRUE;"+"\r\n"+"				$submenulink = $link;"+"\r\n"+"				$submenulinks = \"\";"+"\r\n"+"			} else {"+"\r\n"+"				if ($action == '' && $submenu) { // End previous submenu"+"\r\n"+"					if ($submenulinks <> '') { // Set up submenu"+"\r\n"+"						$links .= '<li class=\"dropdown-submenu\">' . $submenulink . '<ul class=\"dropdown-menu\">' . $submenulinks . '</ul></li>';"+"\r\n"+"					} else {"+"\r\n"+"						$links .= '<li>' . $submenulink . '</li>';"+"\r\n"+"					}"+"\r\n"+"					$submenu = FALSE;"+"\r\n"+"				}"+"\r\n"+"				if ($submenu)"+"\r\n"+"					$submenulinks .= '<li>' . $link . '</li>';"+"\r\n"+"				else"+"\r\n"+"					$links .= '<li>' . $link . '</li>';"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($links <> \"\") {"+"\r\n"+"			if ($submenu) { // End previous submenu"+"\r\n"+"				if ($submenulinks <> '') { // Set up submenu"+"\r\n"+"					$links .= '<li class=\"dropdown-submenu\">' . $submenulink . '<ul class=\"dropdown-menu\">' . $submenulinks . '</ul></li>';"+"\r\n"+"				} else {"+"\r\n"+"					$links .= '<li>' . $submenulink . '</li>';"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$buttonclass = \"dropdown-toggle btn btn-default\";"+"\r\n"+"			if ($this->ButtonClass <> \"\")"+"\r\n"+"				ew_AppendClass($buttonclass, $this->ButtonClass);"+"\r\n"+"			$buttontitle = ew_HtmlTitle($this->DropDownButtonPhrase);"+"\r\n"+"			$buttontitle = ($this->DropDownButtonPhrase <> $buttontitle) ? ' title=\"' . $buttontitle . '\"' : '';"+"\r\n"+"			$button = '<button class=\"' . $buttonclass .'\"' . $buttontitle . ' data-toggle=\"dropdown\">' . $this->DropDownButtonPhrase . '<b class=\"caret\"></b></button><ul class=\"dropdown-menu ' . (($pos == 'right') ? 'dropdown-menu-right ' : '') . 'ewMenu\">' . $links . '</ul>';"+"\r\n"+"			if ($pos == \"bottom\") // Use dropup"+"\r\n"+"				$btndropdown = '<div class=\"btn-group dropup ewButtonDropdown\">' . $button . '</div>';"+"\r\n"+"			else"+"\r\n"+"				$btndropdown = '<div class=\"btn-group ewButtonDropdown\">' . $button . '</div>';"+"\r\n"+"		} else {"+"\r\n"+"			$btndropdown = \"\";"+"\r\n"+"		}"+"\r\n"+"		foreach ($inputs as $input)"+"\r\n"+"			$btndropdown .= $input;"+"\r\n"+"		$btndropdown .= $previewlinks;"+"\r\n"+"		return $btndropdown;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Hide detail items for dropdown"+"\r\n"+"	function HideDetailItemsForDropDown() {"+"\r\n"+"		$showdtl = FALSE;"+"\r\n"+"		if ($this->UseDropDownButton) {"+"\r\n"+"			foreach ($this->Items as $item) {"+"\r\n"+"				if ($item->Name <> $this->GroupOptionName && $item->Visible && $item->ShowInDropDown && substr($item->Name,0,7) <> \"detail_\") {"+"\r\n"+"					$showdtl = TRUE;"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (!$showdtl) {"+"\r\n"+"			foreach ($this->Items as $item) {"+"\r\n"+"				if (substr($item->Name,0,7) == \"detail_\") {"+"\r\n"+"					$item->Visible = FALSE;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * List option class"+"\r\n"+" */"+"\r\n"+"class cListOption {"+"\r\n"+"	var $Name;"+"\r\n"+"	var $OnLeft;"+"\r\n"+"	var $CssStyle;"+"\r\n"+"	var $CssClass;"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+"	var $Header;"+"\r\n"+"	var $Body;"+"\r\n"+"	var $Footer;"+"\r\n"+"	var $Parent;"+"\r\n"+"	var $ShowInButtonGroup = TRUE;"+"\r\n"+"	var $ShowInDropDown = TRUE;"+"\r\n"+"	var $ButtonGroupName = \"_default\";"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($Name) {"+"\r\n"+"		$this->Name = $Name;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Clear"+"\r\n"+"	function Clear() {"+"\r\n"+"		$this->Body = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Move to"+"\r\n"+"	function MoveTo($Pos) {"+"\r\n"+"		$this->Parent->MoveItem($this->Name, $Pos);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render"+"\r\n"+"	function Render($Part, $ColSpan = 1) {"+"\r\n"+"		$tagclass = $this->Parent->TagClassName;"+"\r\n"+"		if ($Part == \"header\") {"+"\r\n"+"			if ($tagclass == \"\") $tagclass = \"ewListOptionHeader\";"+"\r\n"+"			$value = $this->Header;"+"\r\n"+"		} elseif ($Part == \"body\") {"+"\r\n"+"			if ($tagclass == \"\") $tagclass = \"ewListOptionBody\";"+"\r\n"+"			if ($this->Parent->Tag <> \"td\")"+"\r\n"+"				ew_AppendClass($tagclass, \"ewListOptionSeparator\");"+"\r\n"+"			$value = $this->Body;"+"\r\n"+"		} elseif ($Part == \"footer\") {"+"\r\n"+"			if ($tagclass == \"\") $tagclass = \"ewListOptionFooter\";"+"\r\n"+"			$value = $this->Footer;"+"\r\n"+"		} else {"+"\r\n"+"			$value = $Part;"+"\r\n"+"		}"+"\r\n"+"		if (strval($value) == \"\" && $this->Parent->Tag == \"span\" && $this->Parent->ScriptId == \"\")"+"\r\n"+"			return \"\";"+"\r\n"+"		$res = ($value <> \"\") ? $value : \"&nbsp;\";"+"\r\n"+"		ew_AppendClass($tagclass, $this->CssClass);"+"\r\n"+"		$attrs = array(\"class\" => $tagclass,  \"style\" => $this->CssStyle, \"data-name\" => $this->Name);"+"\r\n"+"		if (strtolower($this->Parent->Tag) == \"td\" && $this->Parent->RowSpan > 1)"+"\r\n"+"			$attrs[\"rowspan\"] = $this->Parent->RowSpan;"+"\r\n"+"		if (strtolower($this->Parent->Tag) == \"td\" && $ColSpan > 1)"+"\r\n"+"			$attrs[\"colspan\"] = $ColSpan;"+"\r\n"+"		$name = $this->Parent->TableVar . \"_\" . $this->Name;"+"\r\n"+"		if ($this->Name <> $this->Parent->GroupOptionName) {"+"\r\n"+"			if (!in_array($this->Name, array('checkbox', 'rowcnt'))) {"+"\r\n"+"				if ($this->Parent->UseImageAndText)"+"\r\n"+"					$res = $this->GetImageAndText($res);"+"\r\n"+"				if ($this->Parent->UseButtonGroup && $this->ShowInButtonGroup) {"+"\r\n"+"					$res = $this->Parent->RenderButtonGroup($res);"+"\r\n"+"					if ($this->OnLeft && strtolower($this->Parent->Tag) == \"td\" && $ColSpan > 1)"+"\r\n"+"						$res = '<div style=\"text-align: right\">' . $res . '</div>';"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if ($Part == \"header\")"+"\r\n"+"				$res = \"<span id=\\\"elh_\" . $name . \"\\\" class=\\\"\" . $name . \"\\\">\" . $res . \"</span>\";"+"\r\n"+"			else if ($Part == \"body\")"+"\r\n"+"				$res = \"<span id=\\\"el\" . $this->Parent->RowCnt . \"_\" . $name . \"\\\" class=\\\"\" . $name . \"\\\">\" . $res . \"</span>\";"+"\r\n"+"			else if ($Part == \"footer\")"+"\r\n"+"				$res = \"<span id=\\\"elf_\" . $name . \"\\\" class=\\\"\" . $name . \"\\\">\" . $res . \"</span>\";"+"\r\n"+"		}"+"\r\n"+"		$tag = ($this->Parent->Tag == \"td\" && $Part == \"header\") ? \"th\" : $this->Parent->Tag;"+"\r\n"+"		if ($this->Parent->UseButtonGroup && $this->ShowInButtonGroup)"+"\r\n"+"			$attrs[\"style\"] .= \"white-space: nowrap;\";"+"\r\n"+"		$res = ew_HtmlElement($tag, $attrs, $res);"+"\r\n"+"		if ($this->Parent->ScriptId <> \"\") {"+"\r\n"+"			$js = ew_ExtractScript($res, $this->Parent->ScriptClassName . \"_js\");"+"\r\n"+"			if ($this->Parent->ScriptType == \"single\") {"+"\r\n"+"				if ($Part == \"header\")"+"\r\n"+"					$res = \"<script id=\\\"tpoh_\" . $this->Parent->ScriptId . \"_\" . $this->Name . \"\\\" type=\\\"text/html\\\">\" . $res . \"</script>\";"+"\r\n"+"				else if ($Part == \"body\")"+"\r\n"+"					$res = \"<script id=\\\"tpob\" . $this->Parent->RowCnt . \"_\" . $this->Parent->ScriptId . \"_\" . $this->Name . \"\\\" type=\\\"text/html\\\">\" . $res . \"</script>\";"+"\r\n"+"				else if ($Part == \"footer\")"+"\r\n"+"					$res = \"<script id=\\\"tpof_\" . $this->Parent->ScriptId . \"_\" . $this->Name . \"\\\" type=\\\"text/html\\\">\" . $res . \"</script>\";"+"\r\n"+"			}"+"\r\n"+"			if ($js <> \"\")"+"\r\n"+"				if ($this->Parent->ScriptType == \"single\")"+"\r\n"+"					$res .= $js;"+"\r\n"+"				else"+"\r\n"+"					$this->Parent->JavaScript .= $js;"+"\r\n"+"		}"+"\r\n"+"		return $res;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get image and text link"+"\r\n"+"	function GetImageAndText($body) {"+"\r\n"+"		if (!preg_match_all('/<a([^>]*)>([\\s\\S]*?)<\\/a\\s*>/i', $body, $matches, PREG_SET_ORDER))"+"\r\n"+"			return $body;"+"\r\n"+"		foreach ($matches as $match) {"+"\r\n"+"			if (preg_match('/\\s+data-caption\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[1], $submatches)) { // Match data-caption='caption'"+"\r\n"+"				$caption = $submatches[1];"+"\r\n"+"				if (preg_match('/<img([^>]*)>/i', $match[2])) // Image and text"+"\r\n"+"					$body = str_replace($match[2], $match[2] . '&nbsp;&nbsp;' . $caption, $body);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $body;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// List actions"+"\r\n"+"class cListActions {"+"\r\n"+"	var $Items = array();"+"\r\n"+""+"\r\n"+"	// Add and return a new option"+"\r\n"+"	function &Add($Name, $Action, $Allow = TRUE, $Method = EW_ACTION_POSTBACK, $Select = EW_ACTION_MULTIPLE, $ConfirmMsg = \"\", $Icon = \"glyphicon glyphicon-star ewIcon\") {"+"\r\n"+"		if (is_string($Action))"+"\r\n"+"			$item = new cListAction($Name, $Action, $Allow, $Method, $Select, $ConfirmMsg, $Icon);"+"\r\n"+"		elseif ($Action instanceof cListAction)"+"\r\n"+"			$item = $Action;"+"\r\n"+"		$this->Items[$Name] = $item;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get item by name"+"\r\n"+"	function &GetItem($Name) {"+"\r\n"+"		$item = array_key_exists($Name, $this->Items) ? $this->Items[$Name] : NULL;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// List action"+"\r\n"+"class cListAction {"+"\r\n"+"	var $Action = \"\";"+"\r\n"+"	var $Caption = \"\";"+"\r\n"+"	var $Allow = TRUE;"+"\r\n"+"	var $Method = EW_ACTION_POSTBACK; // Post back (p) / Ajax (a)"+"\r\n"+"	var $Select = EW_ACTION_MULTIPLE; // Multiple (m) / Single (s)"+"\r\n"+"	var $ConfirmMsg = \"\";"+"\r\n"+"	var $Icon = \"glyphicon glyphicon-star ewIcon\"; // Icon"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($Action, $Caption, $Allow = TRUE, $Method = EW_ACTION_POSTBACK, $Select = EW_ACTION_MULTIPLE, $ConfirmMsg = \"\", $Icon = \"glyphicon glyphicon-star ewIcon\") {"+"\r\n"+"		$this->Action = $Action;"+"\r\n"+"		$this->Caption = $Caption;"+"\r\n"+"		$this->Allow = $Allow;"+"\r\n"+"		$this->Method = $Method;"+"\r\n"+"		$this->Select = $Select;"+"\r\n"+"		$this->ConfirmMsg = $ConfirmMsg;"+"\r\n"+"		$this->Icon = $Icon;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// To JSON"+"\r\n"+"	function ToJson($htmlencode = FALSE) {"+"\r\n"+"		$ar = array(\"msg\" => $this->ConfirmMsg,"+"\r\n"+"			\"action\" => $this->Action,"+"\r\n"+"			\"method\" => $this->Method,"+"\r\n"+"			\"select\" => $this->Select);"+"\r\n"+"		$json = json_encode($ar);"+"\r\n"+"		if ($htmlencode)"+"\r\n"+"			$json = ew_HtmlEncode($json);"+"\r\n"+"		return $json;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Sub pages"+"\r\n"+"class cSubPages {"+"\r\n"+"	var $Justified = FALSE;"+"\r\n"+"	var $Style = \"\"; // \"tabs\" or \"pills\" or \"\" (panels)"+"\r\n"+"	var $Items = array();"+"\r\n"+""+"\r\n"+"	// Get nav style"+"\r\n"+"	function NavStyle() {"+"\r\n"+"		$style = \" nav-\" . $this->Style;"+"\r\n"+"		if ($this->Justified) $style .= \" nav-justified\";"+"\r\n"+"		return $style;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get page style"+"\r\n"+"	function TabStyle($k) {"+"\r\n"+"		$item = $this->GetItem($k);"+"\r\n"+"		$style = \"\";"+"\r\n"+"		if ($this->ActivePageIndex() == $k)"+"\r\n"+"			$style = \"active\";"+"\r\n"+"		elseif ($item)"+"\r\n"+"			if (!$item->Visible)"+"\r\n"+"				$style = \"hidden ewHidden\";"+"\r\n"+"			elseif ($item->Disabled && $this->Style <> \"\")"+"\r\n"+"				$style = \"disabled ewDisabled\";"+"\r\n"+"		return ($style <> \"\") ? \" class=\\\"\" . $style . \"\\\"\" : \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get page style"+"\r\n"+"	function PageStyle($k) {"+"\r\n"+"		if ($this->ActivePageIndex() == $k)"+"\r\n"+"			if ($this->Style == \"\")"+"\r\n"+"				return \" in\";"+"\r\n"+"			else"+"\r\n"+"				return \" active\";"+"\r\n"+"		$item = $this->GetItem($k);"+"\r\n"+"		if ($item)"+"\r\n"+"			if (!$item->Visible)"+"\r\n"+"				return \" hidden ewHidden\";"+"\r\n"+"			elseif ($item->Disabled && $this->Style <> \"\")"+"\r\n"+"				return \" disabled ewDisabled\";"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get count"+"\r\n"+"	function Count() {"+"\r\n"+"		return count($this->Items);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add item by name"+"\r\n"+"	function &Add($Name = \"\") {"+"\r\n"+"		$item = new cSubPage();"+"\r\n"+"		if (strval($Name) <> \"\")"+"\r\n"+"			$this->Items[$Name] = $item;"+"\r\n"+"		if (!is_int($Name))"+"\r\n"+"			$this->Items[] = $item;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get item by key"+"\r\n"+"	function &GetItem($k) {"+"\r\n"+"		$item = array_key_exists($k, $this->Items) ? $this->Items[$k] : NULL;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Active page index"+"\r\n"+"	function ActivePageIndex() {"+"\r\n"+""+"\r\n"+"		// Return first active page"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			if ($item->Visible && !$item->Disabled && $item->Active && $key !== 0) // Not common page"+"\r\n"+"				return $key;"+"\r\n"+""+"\r\n"+"		// If not found, return first visible page"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			if ($item->Visible && !$item->Disabled && $key !== 0) // Not common page"+"\r\n"+"				return $key;"+"\r\n"+""+"\r\n"+"		// Not found"+"\r\n"+"		return NULL;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Sub page"+"\r\n"+"class cSubPage {"+"\r\n"+"	var $Active = FALSE;"+"\r\n"+"	var $Visible = TRUE; // If FALSE, add class \"hidden ewHidden\" to the li or div.panel"+"\r\n"+"	var $Disabled = FALSE; // If TRUE, add class \"disabled ewDisabled\" to the li (for tabs only, panels cannot be disabled)"+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[36] = ""+"\r\n"+"<?php"+"\r\n"+"//"+"\r\n"+"// Basic Search class"+"\r\n"+"//"+"\r\n"+"class cBasicSearch {"+"\r\n"+"	var $TblVar = \"\";"+"\r\n"+"	var $BasicSearchAnyFields = EW_BASIC_SEARCH_ANY_FIELDS;"+"\r\n"+"	var $Keyword = \"\";"+"\r\n"+"	var $KeywordDefault = \"\";"+"\r\n"+"	var $Type = \"\";"+"\r\n"+"	var $TypeDefault = \"\";"+"\r\n"+"	private $_Prefix = \"\";"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($tblvar) {"+"\r\n"+"		$this->TblVar = $tblvar;"+"\r\n"+"		$this->_Prefix = EW_PROJECT_NAME . \"_\" . $tblvar . \"_\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session variable name"+"\r\n"+"	function GetSessionName($suffix) {"+"\r\n"+"		return $this->_Prefix . $suffix;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load default"+"\r\n"+"	function LoadDefault() {"+"\r\n"+"		$this->Keyword = $this->KeywordDefault;"+"\r\n"+"		$this->Type = $this->TypeDefault;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Unset session"+"\r\n"+"	function UnsetSession() {"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH_TYPE)]);"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH)]);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Isset session"+"\r\n"+"	function IssetSession() {"+"\r\n"+"		return isset($_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH)]);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set keyword"+"\r\n"+"	function setKeyword($v) {"+"\r\n"+"		$this->Keyword = $v;"+"\r\n"+"		$_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH)] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set type"+"\r\n"+"	function setType($v) {"+"\r\n"+"		$this->Type = $v;"+"\r\n"+"		$_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH_TYPE)] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save"+"\r\n"+"	function Save() {"+"\r\n"+"		$_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH)] = $this->Keyword;"+"\r\n"+"		$_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH_TYPE)] = $this->Type;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get keyword"+"\r\n"+"	function getKeyword() {"+"\r\n"+"		return @$_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH)];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get type"+"\r\n"+"	function getType() {"+"\r\n"+"		return @$_SESSION[$this->GetSessionName(EW_TABLE_BASIC_SEARCH_TYPE)];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get type name"+"\r\n"+"	function getTypeName() {"+"\r\n"+"		global $Language;"+"\r\n"+"		$typ = $this->getType();"+"\r\n"+"		switch ($typ) {"+"\r\n"+"			case \"=\": return $Language->Phrase(\"QuickSearchExact\");"+"\r\n"+"			case \"AND\": return $Language->Phrase(\"QuickSearchAll\");"+"\r\n"+"			case \"OR\": return $Language->Phrase(\"QuickSearchAny\");"+"\r\n"+"			default: return $Language->Phrase(\"QuickSearchAuto\");"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get short type name"+"\r\n"+"	function getTypeNameShort() {"+"\r\n"+"		global $Language;"+"\r\n"+"		$typ = $this->getType();"+"\r\n"+"		switch ($typ) {"+"\r\n"+"			case \"=\": $typname = $Language->Phrase(\"QuickSearchExactShort\"); break;"+"\r\n"+"			case \"AND\": $typname = $Language->Phrase(\"QuickSearchAllShort\"); break;"+"\r\n"+"			case \"OR\": $typname = $Language->Phrase(\"QuickSearchAnyShort\"); break;"+"\r\n"+"			default: $typname = $Language->Phrase(\"QuickSearchAutoShort\"); break;"+"\r\n"+"		}"+"\r\n"+"		if ($typname <> \"\") $typname .= \"&nbsp;\";"+"\r\n"+"		return $typname;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load"+"\r\n"+"	function Load() {"+"\r\n"+"		$this->Keyword = $this->getKeyword();"+"\r\n"+"		$this->Type = $this->getType();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Advanced Search class"+"\r\n"+" */"+"\r\n"+"class cAdvancedSearch {"+"\r\n"+"	var $TblVar;"+"\r\n"+"	var $FldVar;"+"\r\n"+"	var $SearchValue; // Search value"+"\r\n"+"	var $ViewValue = \"\"; // View value"+"\r\n"+"	var $SearchOperator; // Search operator"+"\r\n"+"	var $SearchCondition; // Search condition"+"\r\n"+"	var $SearchValue2; // Search value 2"+"\r\n"+"	var $ViewValue2 = \"\"; // View value 2"+"\r\n"+"	var $SearchOperator2; // Search operator 2"+"\r\n"+"	var $SearchValueDefault = \"\"; // Search value default"+"\r\n"+"	var $SearchOperatorDefault = \"\"; // Search operator default"+"\r\n"+"	var $SearchConditionDefault = \"\"; // Search condition default"+"\r\n"+"	var $SearchValue2Default = \"\"; // Search value 2 default"+"\r\n"+"	var $SearchOperator2Default = \"\"; // Search operator 2 default"+"\r\n"+"	private $_Prefix = \"\";"+"\r\n"+"	private $_Suffix = \"\";"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($tblvar, $fldvar) {"+"\r\n"+"		$this->TblVar = $tblvar;"+"\r\n"+"		$this->FldVar = $fldvar;"+"\r\n"+"		$this->_Prefix = EW_PROJECT_NAME . \"_\" . $tblvar . \"_\" . EW_TABLE_ADVANCED_SEARCH . \"_\";"+"\r\n"+"		$this->_Suffix = \"_\" . substr($fldvar, 2);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session variable name"+"\r\n"+"	function GetSessionName($infix) {"+"\r\n"+"		return $this->_Prefix . $infix . $this->_Suffix;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Unset session"+"\r\n"+"	function UnsetSession() {"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(\"x\")]);"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(\"z\")]);"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(\"v\")]);"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(\"y\")]);"+"\r\n"+"		unset($_SESSION[$this->GetSessionName(\"w\")]);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Isset session"+"\r\n"+"	function IssetSession() {"+"\r\n"+"		return isset($_SESSION[$this->GetSessionName(\"x\")]) ||"+"\r\n"+"			isset($_SESSION[$this->GetSessionName(\"y\")]);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save to session"+"\r\n"+"	function Save() {"+"\r\n"+"		$FldVal = ew_StripSlashes($this->SearchValue);"+"\r\n"+"		if (is_array($FldVal)) $FldVal = implode(\",\", $FldVal);"+"\r\n"+"		$FldVal2 = ew_StripSlashes($this->SearchValue2);"+"\r\n"+"		if (is_array($FldVal2)) $FldVal2 = implode(\",\", $FldVal2);"+"\r\n"+"		if (@$_SESSION[$this->GetSessionName(\"x\")] <> $FldVal)"+"\r\n"+"			$_SESSION[$this->GetSessionName(\"x\")] = $FldVal;"+"\r\n"+"		if (@$_SESSION[$this->GetSessionName(\"y\")] <> $FldVal2)"+"\r\n"+"			$_SESSION[$this->GetSessionName(\"y\")] = $FldVal2;"+"\r\n"+"		if (@$_SESSION[$this->GetSessionName(\"z\")] <> $this->SearchOperator)"+"\r\n"+"			$_SESSION[$this->GetSessionName(\"z\")] = $this->SearchOperator;"+"\r\n"+"		if (@$_SESSION[$this->GetSessionName(\"v\")] <> $this->SearchCondition)"+"\r\n"+"			$_SESSION[$this->GetSessionName(\"v\")] = $this->SearchCondition;"+"\r\n"+"		if (@$_SESSION[$this->GetSessionName(\"w\")] <> $this->SearchOperator2)"+"\r\n"+"			$_SESSION[$this->GetSessionName(\"w\")] = $this->SearchOperator2;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load from session"+"\r\n"+"	function Load() {"+"\r\n"+"		$this->SearchValue = @$_SESSION[$this->GetSessionName(\"x\")];"+"\r\n"+"		$this->SearchOperator = @$_SESSION[$this->GetSessionName(\"z\")];"+"\r\n"+"		$this->SearchCondition = @$_SESSION[$this->GetSessionName(\"v\")];"+"\r\n"+"		$this->SearchValue2 = @$_SESSION[$this->GetSessionName(\"y\")];"+"\r\n"+"		$this->SearchOperator2 = @$_SESSION[$this->GetSessionName(\"w\")];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get value"+"\r\n"+"	function getValue($infix) {"+"\r\n"+"		return @$_SESSION[$this->GetSessionName($infix)];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load default values"+"\r\n"+"	function LoadDefault() {"+"\r\n"+"		if ($this->SearchValueDefault != \"\") $this->SearchValue = $this->SearchValueDefault;"+"\r\n"+"		if ($this->SearchOperatorDefault != \"\") $this->SearchOperator = $this->SearchOperatorDefault;"+"\r\n"+"		if ($this->SearchConditionDefault != \"\") $this->SearchCondition = $this->SearchConditionDefault;"+"\r\n"+"		if ($this->SearchValue2Default != \"\") $this->SearchValue2 = $this->SearchValue2Default;"+"\r\n"+"		if ($this->SearchOperator2Default != \"\") $this->SearchOperator2 = $this->SearchOperator2Default;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Convert to JSON"+"\r\n"+"	function ToJSON() {"+"\r\n"+"		if ($this->SearchValue <> \"\" || $this->SearchValue2 <> \"\") {"+"\r\n"+"			return \"\\\"x\" . $this->_Suffix . \"\\\":\\\"\" . ew_JsEncode2($this->SearchValue) . \"\\\",\" ."+"\r\n"+"				\"\\\"z\" . $this->_Suffix . \"\\\":\\\"\" . ew_JsEncode2($this->SearchOperator) . \"\\\",\" ."+"\r\n"+"				\"\\\"v\" . $this->_Suffix . \"\\\":\\\"\" . ew_JsEncode2($this->SearchCondition) . \"\\\",\" ."+"\r\n"+"				\"\\\"y\" . $this->_Suffix . \"\\\":\\\"\" . ew_JsEncode2($this->SearchValue2) . \"\\\",\" ."+"\r\n"+"				\"\\\"w\" . $this->_Suffix . \"\\\":\\\"\" . ew_JsEncode2($this->SearchOperator2) . \"\\\"\";"+"\r\n"+"		} else {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[37] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Upload class"+"\r\n"+" */"+"\r\n"+"class cUpload {"+"\r\n"+""+"\r\n"+"	var $Index = -1; // Index for multiple form elements"+"\r\n"+"	var $TblVar; // Table variable"+"\r\n"+"	var $FldVar; // Field variable"+"\r\n"+"	var $Message; // Error message"+"\r\n"+"	var $DbValue; // Value from database"+"\r\n"+"	var $Value = NULL; // Upload value"+"\r\n"+"	var $FileName; // Upload file name"+"\r\n"+"	var $FileSize; // Upload file size"+"\r\n"+"	var $ContentType; // File content type"+"\r\n"+"	var $ImageWidth; // Image width"+"\r\n"+"	var $ImageHeight; // Image height"+"\r\n"+"	var $Error; // Upload error"+"\r\n"+"	var $UploadMultiple = FALSE; // Multiple upload"+"\r\n"+"	var $KeepFile = TRUE; // Keep old file"+"\r\n"+"	var $Plugins = array(); // Plugins for Resize()"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($TblVar, $FldVar, $Binary = FALSE) {"+"\r\n"+"		$this->TblVar = $TblVar;"+"\r\n"+"		$this->FldVar = $FldVar;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check file type of the uploaded file"+"\r\n"+"	function UploadAllowedFileExt($filename) {"+"\r\n"+"		return ew_CheckFileType($filename);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get upload file"+"\r\n"+"	function UploadFile() {"+"\r\n"+"		global $objForm;"+"\r\n"+"		$this->Value = NULL; // Reset first"+"\r\n"+"		$fldvar = ($this->Index < 0) ? $this->FldVar : substr($this->FldVar, 0, 1) . $this->Index . substr($this->FldVar, 1);"+"\r\n"+"		$wrkvar = \"fn_\" . $fldvar;"+"\r\n"+"		$this->FileName = @$_POST[$wrkvar]; // Get file name"+"\r\n"+"		$wrkvar = \"fa_\" . $fldvar;"+"\r\n"+"		$this->KeepFile = (@$_POST[$wrkvar] == \"1\"); // Check if keep old file"+"\r\n"+"		if (!$this->KeepFile && $this->FileName <> \"\" && !$this->UploadMultiple) {"+"\r\n"+"			$f = ew_UploadTempPath($fldvar, $this->TblVar) . EW_PATH_DELIMITER . $this->FileName;"+"\r\n"+"			if (file_exists($f)) {"+"\r\n"+"				$this->Value = file_get_contents($f);"+"\r\n"+"				$this->FileSize = filesize($f);"+"\r\n"+"				$this->ContentType = ew_ContentType(substr($this->Value, 0, 11), $f);"+"\r\n"+"				$sizes = @getimagesize($f);"+"\r\n"+"				$this->ImageWidth = @$sizes[0];"+"\r\n"+"				$this->ImageHeight = @$sizes[1];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return TRUE; // Normal return"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Resize image"+"\r\n"+"	// Note: $quality is deprecated, kept for backward compatibility only."+"\r\n"+"	function Resize($width, $height, $quality = EW_THUMBNAIL_DEFAULT_QUALITY) {"+"\r\n"+"		if (!ew_Empty($this->Value)) {"+"\r\n"+"			$wrkwidth = $width;"+"\r\n"+"			$wrkheight = $height;"+"\r\n"+"			if (ew_ResizeBinary($this->Value, $wrkwidth, $wrkheight, $quality, $this->Plugins)) {"+"\r\n"+"				if ($wrkwidth > 0 && $wrkheight > 0) {"+"\r\n"+"					$this->ImageWidth = $wrkwidth;"+"\r\n"+"					$this->ImageHeight = $wrkheight;"+"\r\n"+"				}"+"\r\n"+"				$this->FileSize = strlen($this->Value);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $this;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get file count"+"\r\n"+"	function Count() {"+"\r\n"+"		if (!$this->UploadMultiple && !ew_Empty($this->Value)) {"+"\r\n"+"			return 1;"+"\r\n"+"		} elseif ($this->UploadMultiple && $this->FileName <> \"\") {"+"\r\n"+"			$ar = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $this->FileName);"+"\r\n"+"			return count($ar);"+"\r\n"+"		}"+"\r\n"+"		return 0;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get temp file path as string or string[]"+"\r\n"+"	function GetTempFile($idx = -1) {"+"\r\n"+"		$fldvar = ($this->Index < 0) ? $this->FldVar : substr($this->FldVar, 0, 1) . $this->Index . substr($this->FldVar, 1);"+"\r\n"+"		if ($this->FileName <> \"\") {"+"\r\n"+"			if ($this->UploadMultiple) {"+"\r\n"+"				$ar = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $this->FileName);"+"\r\n"+"				if ($idx > -1 && $idx < count($ar)) {"+"\r\n"+"					return ew_UploadTempPath($fldvar, $this->TblVar) . EW_PATH_DELIMITER . $ar[$idx];"+"\r\n"+"				} else {"+"\r\n"+"					$files = array();"+"\r\n"+"					foreach ($ar as $fn)"+"\r\n"+"						$files[] = ew_UploadTempPath($fldvar, $this->TblVar) . EW_PATH_DELIMITER . $fn;"+"\r\n"+"					return $files;"+"\r\n"+"				}"+"\r\n"+"			} else {"+"\r\n"+"				return ew_UploadTempPath($fldvar, $this->TblVar) . EW_PATH_DELIMITER . $this->FileName;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return NULL;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get temp file as $EW_THUMBNAIL_CLASS object or object[]"+"\r\n"+"	function GetTempThumb($idx = -1) {"+"\r\n"+"		global $EW_RESIZE_OPTIONS, $EW_THUMBNAIL_CLASS;"+"\r\n"+"		$file = $this->GetTempFile($idx);"+"\r\n"+"		if (is_string($file)) {"+"\r\n"+"			return file_exists($file) ? new $EW_THUMBNAIL_CLASS($file, $EW_RESIZE_OPTIONS, $this->Plugins) : NULL;"+"\r\n"+"		} elseif (is_array($file)) {"+"\r\n"+"			$thumbs = array();"+"\r\n"+"			foreach ($file as $fn) {"+"\r\n"+"				if (file_exists($fn))"+"\r\n"+"					$thumbs[] = new $EW_THUMBNAIL_CLASS($fn, $EW_RESIZE_OPTIONS, $this->Plugins);"+"\r\n"+"			}"+"\r\n"+"			return $thumbs;"+"\r\n"+"		}"+"\r\n"+"		return NULL;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Save uploaded data to file (Path relative to application root)"+"\r\n"+"	function SaveToFile($Path, $NewFileName, $OverWrite, $idx = -1) {"+"\r\n"+"		if (!ew_Empty($this->Value)) {"+"\r\n"+"			$Path = ew_UploadPathEx(TRUE, $Path);"+"\r\n"+"			if (trim(strval($NewFileName)) == \"\") $NewFileName = $this->FileName;"+"\r\n"+"			if (!$OverWrite)"+"\r\n"+"				$NewFileName = ew_UploadFileNameEx($Path, $NewFileName);"+"\r\n"+"			return ew_SaveFile($Path, $NewFileName, $this->Value);"+"\r\n"+"		} elseif ($idx >= 0) { // Use file from upload temp folder"+"\r\n"+"			$file = $this->GetTempFile($idx);"+"\r\n"+"			if (file_exists($file)) {"+"\r\n"+"				if (!$OverWrite)"+"\r\n"+"					$NewFileName = ew_UploadFileNameEx($Path, $NewFileName);"+"\r\n"+"				return ew_CopyFile($Path, $NewFileName, $file);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Resize and save uploaded data to file (Path relative to application root)"+"\r\n"+"	// Note: $Quality is deprecated, kept for backward compatibility only."+"\r\n"+"	function ResizeAndSaveToFile($Width, $Height, $Quality, $Path, $NewFileName, $OverWrite, $idx = -1) {"+"\r\n"+"		$bResult = FALSE;"+"\r\n"+"		if (!ew_Empty($this->Value)) {"+"\r\n"+"			$OldValue = $this->Value;"+"\r\n"+"			$bResult = $this->Resize($Width, $Height)->SaveToFile($Path, $NewFileName, $OverWrite);"+"\r\n"+"			$this->Value = $OldValue;"+"\r\n"+"		} elseif ($idx >= 0) { // Use file from upload temp folder"+"\r\n"+"			$file = $this->GetTempFile($idx);"+"\r\n"+"			if (file_exists($file)) {"+"\r\n"+"				$this->Value = file_get_contents($file);"+"\r\n"+"				$bResult = $this->Resize($Width, $Height)->SaveToFile($Path, $NewFileName, $OverWrite);"+"\r\n"+"				$this->Value = NULL;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $bResult;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[38] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Advanced Security class"+"\r\n"+" */"+"\r\n"+"class cAdvancedSecurity {"+"\r\n"+""+"\r\n"+"	var $UserLevel = array(); // All User Levels"+"\r\n"+"	var $UserLevelPriv = array(); // All User Level permissions"+"\r\n"+"	var $UserLevelID = array(); // User Level ID array"+"\r\n"+"	var $UserID = array(); // User ID array"+"\r\n"+"	"+"\r\n"+"	var $CurrentUserLevelID;"+"\r\n"+"	var $CurrentUserLevel; // Permissions"+"\r\n"+"	var $CurrentUserID;"+"\r\n"+"	var $CurrentParentUserID;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct() {"+"\r\n"+""+"\r\n"+"		// Init User Level"+"\r\n"+"		if ($this->IsLoggedIn()) {"+"\r\n"+"			$this->CurrentUserLevelID = $this->SessionUserLevelID();"+"\r\n"+"			if (is_numeric($this->CurrentUserLevelID) && intval($this->CurrentUserLevelID) >= -1) {"+"\r\n"+"				$this->UserLevelID[] = $this->CurrentUserLevelID;"+"\r\n"+"			}"+"\r\n"+"		} else { // Anonymous user"+"\r\n"+"			$this->CurrentUserLevelID = -2;"+"\r\n"+"			$this->UserLevelID[] = $this->CurrentUserLevelID;"+"\r\n"+"		}"+"\r\n"+"		$_SESSION[EW_SESSION_USER_LEVEL_LIST] = $this->UserLevelList();"+"\r\n"+""+"\r\n"+"		// Init User ID"+"\r\n"+"		$this->CurrentUserID = $this->SessionUserID();"+"\r\n"+"		$this->CurrentParentUserID = $this->SessionParentUserID();"+"\r\n"+""+"\r\n"+"		// Load user level"+"\r\n"+"		$this->LoadUserLevel();"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session User ID"+"\r\n"+"	function SessionUserID() {"+"\r\n"+"		return strval(@$_SESSION[EW_SESSION_USER_ID]);"+"\r\n"+"	}"+"\r\n"+"	function setSessionUserID($v) {"+"\r\n"+"		$_SESSION[EW_SESSION_USER_ID] = trim(strval($v));"+"\r\n"+"		$this->CurrentUserID = trim(strval($v));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session Parent User ID"+"\r\n"+"	function SessionParentUserID() {"+"\r\n"+"		return strval(@$_SESSION[EW_SESSION_PARENT_USER_ID]);"+"\r\n"+"	}"+"\r\n"+"	function setSessionParentUserID($v) {"+"\r\n"+"		$_SESSION[EW_SESSION_PARENT_USER_ID] = trim(strval($v));"+"\r\n"+"		$this->CurrentParentUserID = trim(strval($v));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session User Level ID"+"\r\n"+"	function SessionUserLevelID() {"+"\r\n"+"		return @$_SESSION[EW_SESSION_USER_LEVEL_ID];"+"\r\n"+"	}"+"\r\n"+"	function setSessionUserLevelID($v) {"+"\r\n"+"		$_SESSION[EW_SESSION_USER_LEVEL_ID] = $v;"+"\r\n"+"		$this->CurrentUserLevelID = $v;"+"\r\n"+"		if (is_numeric($v) && $v >= -1)"+"\r\n"+"			$this->UserLevelID = array($v);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Session User Level value"+"\r\n"+"	function SessionUserLevel() {"+"\r\n"+"		return @$_SESSION[EW_SESSION_USER_LEVEL];"+"\r\n"+"	}"+"\r\n"+"	function setSessionUserLevel($v) {"+"\r\n"+"		$_SESSION[EW_SESSION_USER_LEVEL] = $v;"+"\r\n"+"		$this->CurrentUserLevel = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current user name"+"\r\n"+"	function getCurrentUserName() {"+"\r\n"+"		return strval(@$_SESSION[EW_SESSION_USER_NAME]);"+"\r\n"+"	}"+"\r\n"+"	function setCurrentUserName($v) {"+"\r\n"+"		$_SESSION[EW_SESSION_USER_NAME] = $v;"+"\r\n"+"	}"+"\r\n"+"	function CurrentUserName() {"+"\r\n"+"		return $this->getCurrentUserName();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current User ID"+"\r\n"+"	function CurrentUserID() {"+"\r\n"+"		return $this->CurrentUserID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current Parent User ID"+"\r\n"+"	function CurrentParentUserID() {"+"\r\n"+"		return $this->CurrentParentUserID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current User Level ID"+"\r\n"+"	function CurrentUserLevelID() {"+"\r\n"+"		return $this->CurrentUserLevelID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current User Level value"+"\r\n"+"	function CurrentUserLevel() {"+"\r\n"+"		return $this->CurrentUserLevel;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can add"+"\r\n"+"	function CanAdd() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_ADD) == EW_ALLOW_ADD);"+"\r\n"+"	}"+"\r\n"+"	function setCanAdd($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_ADD);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_ADD));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can delete"+"\r\n"+"	function CanDelete() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_DELETE) == EW_ALLOW_DELETE);"+"\r\n"+"	}"+"\r\n"+"	function setCanDelete($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_DELETE);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_DELETE));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can edit"+"\r\n"+"	function CanEdit() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_EDIT) == EW_ALLOW_EDIT);"+"\r\n"+"	}"+"\r\n"+"	function setCanEdit($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_EDIT);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_EDIT));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can view"+"\r\n"+"	function CanView() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_VIEW) == EW_ALLOW_VIEW);"+"\r\n"+"	}"+"\r\n"+"	function setCanView($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_VIEW);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_VIEW));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can list"+"\r\n"+"	function CanList() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_LIST) == EW_ALLOW_LIST);"+"\r\n"+"	}"+"\r\n"+"	function setCanList($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_LIST);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_LIST));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can report"+"\r\n"+"	function CanReport() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_REPORT) == EW_ALLOW_REPORT);"+"\r\n"+"	}"+"\r\n"+"	function setCanReport($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_REPORT);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_REPORT));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can search"+"\r\n"+"	function CanSearch() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_SEARCH) == EW_ALLOW_SEARCH);"+"\r\n"+"	}"+"\r\n"+"	function setCanSearch($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_SEARCH);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_SEARCH));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can admin"+"\r\n"+"	function CanAdmin() {"+"\r\n"+"		return (($this->CurrentUserLevel & EW_ALLOW_ADMIN) == EW_ALLOW_ADMIN);"+"\r\n"+"	}"+"\r\n"+"	function setCanAdmin($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EW_ALLOW_ADMIN);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EW_ALLOW_ADMIN));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Last URL"+"\r\n"+"	function LastUrl() {"+"\r\n"+"		if (is_array(@$_COOKIE[EW_PROJECT_NAME]))"+"\r\n"+"			return @$_COOKIE[EW_PROJECT_NAME]['LastUrl'];"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save last URL"+"\r\n"+"	function SaveLastUrl() {"+"\r\n"+"		$s = ew_ServerVar(\"SCRIPT_NAME\");"+"\r\n"+"		$q = ew_ServerVar(\"QUERY_STRING\");"+"\r\n"+"		if ($q <> \"\") $s .= \"?\" . $q;"+"\r\n"+"		if ($this->LastUrl() == $s) $s = \"\";"+"\r\n"+"		@setcookie(EW_PROJECT_NAME . '[LastUrl]', $s);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Auto login"+"\r\n"+"	function AutoLogin() {"+"\r\n"+"		$AutoLogin = FALSE;"+"\r\n"+"		if (@$_COOKIE[EW_PROJECT_NAME]['AutoLogin'] == \"autologin\") {"+"\r\n"+"			$usr = ew_Decrypt(@$_COOKIE[EW_PROJECT_NAME]['Username']);"+"\r\n"+"			$pwd = ew_Decrypt(@$_COOKIE[EW_PROJECT_NAME]['Password']);"+"\r\n"+"			$AutoLogin = $this->ValidateUser($usr, $pwd, TRUE, FALSE);"+"\r\n"+"		}"+"\r\n"+"		if (!$AutoLogin && EW_ALLOW_LOGIN_BY_URL && isset($_GET[\"username\"])) {"+"\r\n"+"			$usr = ew_RemoveXSS(ew_StripSlashes($_GET[\"username\"]));"+"\r\n"+"			$pwd = ew_RemoveXSS(ew_StripSlashes(@$_GET[\"password\"]));"+"\r\n"+"			$enc = !empty($_GET[\"encrypted\"]);"+"\r\n"+"			$AutoLogin = $this->ValidateUser($usr, $pwd, TRUE, $enc);"+"\r\n"+"		}"+"\r\n"+"		if (!$AutoLogin && EW_ALLOW_LOGIN_BY_SESSION && isset($_SESSION[EW_PROJECT_NAME . \"_Username\"])) {"+"\r\n"+"			$usr = $_SESSION[EW_PROJECT_NAME . \"_Username\"];"+"\r\n"+"			$pwd = @$_SESSION[EW_PROJECT_NAME . \"_Password\"];"+"\r\n"+"			$enc = !empty($_SESSION[EW_PROJECT_NAME . \"_Encrypted\"]);"+"\r\n"+"			$AutoLogin = $this->ValidateUser($usr, $pwd, TRUE, $enc);"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	";
ewAr[39] = ""+"\r\n"+"		if ($AutoLogin)"+"\r\n"+"			ew_WriteAuditTrail(\"log\", ew_StdCurrentDateTime(), ew_ScriptName(), $usr, $GLOBALS[\"Language\"]->Phrase(\"AuditTrailAutoLogin\"), ew_CurrentUserIP(), \"\", \"\", \"\", \"\");"+"\r\n"+"	";
ewAr[40] = ""+"\r\n"+""+"\r\n"+"		return $AutoLogin;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Login user"+"\r\n"+"	function LoginUser($userName = NULL, $userID = NULL, $parentUserID = NULL, $userLevel = NULL) {"+"\r\n"+"		$_SESSION[EW_SESSION_STATUS] = \"login\";"+"\r\n"+"		if (!is_null($userName))"+"\r\n"+"			$this->setCurrentUserName($userName);"+"\r\n"+"		if (!is_null($userID))"+"\r\n"+"			$this->setSessionUserID($userID);"+"\r\n"+"		if (!is_null($parentUserID))"+"\r\n"+"			$this->setSessionParentUserID($parentUserID);"+"\r\n"+"		if (!is_null($userLevel)) {"+"\r\n"+"			$this->setSessionUserLevelID(intval($userLevel));"+"\r\n"+"			SetUpUserLevel();"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Validate user"+"\r\n"+"	function ValidateUser(&$usr, &$pwd, $autologin, $encrypted = FALSE) {"+"\r\n"+"		global $Language;"+"\r\n"+"		";
ewAr[41] = ""+"\r\n"+"		global $UserTable, $UserTableConn;"+"\r\n"+"		";
ewAr[42] = ""+"\r\n"+"		";
ewAr[43] = ""+"\r\n"+"		global $UserProfile;"+"\r\n"+"		";
ewAr[44] = ""+"\r\n"+"		$ValidateUser = FALSE;"+"\r\n"+"		$CustomValidateUser = FALSE;"+"\r\n"+""+"\r\n"+"		";
ewAr[45] = ""+"\r\n"+"		// Call User Custom Validate event"+"\r\n"+"		if (EW_USE_CUSTOM_LOGIN) {"+"\r\n"+"			$CustomValidateUser = $this->User_CustomValidate($usr, $pwd);"+"\r\n"+"			if ($CustomValidateUser) {"+"\r\n"+"				$_SESSION[EW_SESSION_STATUS] = \"login\";"+"\r\n"+"				$this->setCurrentUserName($usr); // Load user name"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		";
ewAr[46] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[47] = ""+"\r\n"+"		// Check hard coded admin first"+"\r\n"+"		if (!$ValidateUser) {"+"\r\n"+""+"\r\n"+"			if (EW_CASE_SENSITIVE_PASSWORD) {"+"\r\n"+"				$ValidateUser = (!$CustomValidateUser && EW_ADMIN_USER_NAME == $usr && EW_ADMIN_PASSWORD == $pwd) ||"+"\r\n"+"								($CustomValidateUser && EW_ADMIN_USER_NAME == $usr);"+"\r\n"+"			} else {"+"\r\n"+"				$ValidateUser = (!$CustomValidateUser && strtolower(EW_ADMIN_USER_NAME) == strtolower($usr)"+"\r\n"+"								&& strtolower(EW_ADMIN_PASSWORD) == strtolower($pwd)) ||"+"\r\n"+"								($CustomValidateUser && strtolower(EW_ADMIN_USER_NAME) == strtolower($usr));"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			if ($ValidateUser) {"+"\r\n"+"				$_SESSION[EW_SESSION_STATUS] = \"login\";"+"\r\n"+"				$_SESSION[EW_SESSION_SYS_ADMIN] = 1; // System Administrator"+"\r\n"+"				$this->setCurrentUserName($Language->Phrase(\"UserAdministrator\")); // Load user name"+"\r\n"+""+"\r\n"+"		";
ewAr[48] = "	"+"\r\n"+"				$this->setSessionUserID(-1); // System Administrator"+"\r\n"+"		";
ewAr[49] = ""+"\r\n"+"		";
ewAr[50] = "	"+"\r\n"+"				$this->setSessionUserLevelID(-1); // System Administrator"+"\r\n"+"				$this->SetUpUserLevel();"+"\r\n"+"		";
ewAr[51] = ""+"\r\n"+"		";
ewAr[52] = ""+"\r\n"+"				$UserProfile->SetValue(EW_USER_PROFILE_LAST_PASSWORD_CHANGED_DATE, ew_StdCurrentDate());"+"\r\n"+"		";
ewAr[53] = ""+"\r\n"+""+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+"	";
ewAr[54] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[55] = ""+"\r\n"+"		// Check other users"+"\r\n"+"		if (!$ValidateUser) {"+"\r\n"+""+"\r\n"+"		";
ewAr[56] = ""+"\r\n"+"			if (!is_numeric($usr)) return $CustomValidateUser;"+"\r\n"+"		";
ewAr[57] = ""+"\r\n"+""+"\r\n"+"			$sFilter = str_replace(\"%u\", ew_AdjustSql($usr, EW_USER_TABLE_DBID), EW_USER_NAME_FILTER);"+"\r\n"+""+"\r\n"+"		";
ewAr[58] = ""+"\r\n"+"			$sFilter .= \" AND \" . EW_USER_ACTIVATE_FILTER;"+"\r\n"+"		";
ewAr[59] = ""+"\r\n"+""+"\r\n"+"			// Set up filter (SQL WHERE clause) and get return SQL"+"\r\n"+"			// SQL constructor in <UserTable> class, <UserTable>info.php"+"\r\n"+"			$sSql = $UserTable->GetSQL($sFilter, \"\");"+"\r\n"+""+"\r\n"+"			if ($rs = $UserTableConn->Execute($sSql)) {"+"\r\n"+"				if (!$rs->EOF) {"+"\r\n"+"					$ValidateUser = $CustomValidateUser || ew_ComparePassword($rs->fields('";
ewAr[60] = "'), $pwd, $encrypted);"+"\r\n"+""+"\r\n"+"";
ewAr[61] = ""+"\r\n"+"					// Set up retry count from manual login"+"\r\n"+"					if (!$autologin) {"+"\r\n"+"						$UserProfile->LoadProfileFromDatabase($usr);"+"\r\n"+"						if (!$ValidateUser) {"+"\r\n"+"							$retrycount = $UserProfile->GetValue(EW_USER_PROFILE_LOGIN_RETRY_COUNT);"+"\r\n"+"							$retrycount++;"+"\r\n"+"							$UserProfile->SetValue(EW_USER_PROFILE_LOGIN_RETRY_COUNT, $retrycount);"+"\r\n"+"							$UserProfile->SetValue(EW_USER_PROFILE_LAST_BAD_LOGIN_DATE_TIME, ew_StdCurrentDateTime());"+"\r\n"+""+"\r\n"+"	";
ewAr[62] = ""+"\r\n"+"							ew_WriteAuditTrail(\"log\", ew_StdCurrentDateTime(), ew_ScriptName(), $usr, str_replace(\"%n\", $retrycount, $Language->Phrase(\"AuditTrailFailedAttempt\")), ew_CurrentUserIP(), \"\", \"\", \"\", \"\");"+"\r\n"+"	";
ewAr[63] = ""+"\r\n"+""+"\r\n"+"						} else {"+"\r\n"+"							$UserProfile->SetValue(EW_USER_PROFILE_LOGIN_RETRY_COUNT, 0);"+"\r\n"+"						}"+"\r\n"+"						$UserProfile->SaveProfileToDatabase($usr); // Save profile"+"\r\n"+"					}"+"\r\n"+"";
ewAr[64] = ""+"\r\n"+""+"\r\n"+"";
ewAr[65] = ""+"\r\n"+"					// Check concurrent user login"+"\r\n"+"					if ($ValidateUser) {"+"\r\n"+"						if ($UserProfile->IsValidUser($usr, session_id())) {"+"\r\n"+"						} else {"+"\r\n"+"							$_SESSION[EW_SESSION_FAILURE_MESSAGE] = str_replace(\"%u\", $usr, $Language->Phrase(\"UserLoggedIn\"));"+"\r\n"+""+"\r\n"+"	";
ewAr[66] = ""+"\r\n"+"							ew_WriteAuditTrail(\"log\", ew_StdCurrentDateTime(), ew_ScriptName(), $usr, $Language->Phrase(\"AuditTrailUserLoggedIn\"), ew_CurrentUserIP(), \"\", \"\", \"\", \"\");"+"\r\n"+"	";
ewAr[67] = ""+"\r\n"+""+"\r\n"+"							$ValidateUser = FALSE;"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"";
ewAr[68] = ""+"\r\n"+""+"\r\n"+"";
ewAr[69] = ""+"\r\n"+"					// Password expiry checking"+"\r\n"+"					if ($ValidateUser && !$autologin && $UserProfile->PasswordExpired($usr)) {"+"\r\n"+"							$this->SetSessionPasswordExpired();"+"\r\n"+"	";
ewAr[70] = ""+"\r\n"+"							$row = $rs->fields;"+"\r\n"+"							$this->User_PasswordExpired($row);"+"\r\n"+"	";
ewAr[71] = ""+"\r\n"+""+"\r\n"+"							if (IsPasswordExpired()) {"+"\r\n"+"	";
ewAr[72] = ""+"\r\n"+"								ew_WriteAuditTrail(\"log\", ew_StdCurrentDateTime(), ew_ScriptName(), $usr, $Language->Phrase(\"AuditTrailPasswordExpired\"), ew_CurrentUserIP(), \"\", \"\", \"\", \"\");"+"\r\n"+"	";
ewAr[73] = ""+"\r\n"+""+"\r\n"+"								$rs->Close();"+"\r\n"+"								return FALSE;"+"\r\n"+"							}"+"\r\n"+"					}"+"\r\n"+"";
ewAr[74] = ""+"\r\n"+""+"\r\n"+"					if ($ValidateUser) {"+"\r\n"+"						$_SESSION[EW_SESSION_STATUS] = \"login\";"+"\r\n"+"		";
ewAr[75] = ""+"\r\n"+"						$_SESSION[EW_SESSION_SYS_ADMIN] = 0; // Non System Administrator"+"\r\n"+"						$this->setCurrentUserName(";
ewAr[76] = "); // Load user name"+"\r\n"+"		";
ewAr[77] = ""+"\r\n"+"						$this->setSessionUserID(";
ewAr[78] = "); // Load User ID"+"\r\n"+"		";
ewAr[79] = ""+"\r\n"+"						$this->setSessionParentUserID(";
ewAr[80] = "); // Load parent User ID"+"\r\n"+"		";
ewAr[81] = ""+"\r\n"+"						if (is_null(";
ewAr[82] = ")) {"+"\r\n"+"							$this->setSessionUserLevelID(0);"+"\r\n"+"						} else {"+"\r\n"+"							$this->setSessionUserLevelID(intval(";
ewAr[83] = ")); // Load User Level"+"\r\n"+"						}"+"\r\n"+"						$this->SetUpUserLevel();"+"\r\n"+"		";
ewAr[84] = ""+"\r\n"+"		";
ewAr[85] = ""+"\r\n"+"						// Call User Validated event"+"\r\n"+"						$row = $rs->fields;"+"\r\n"+"						$ValidateUser = $this->User_Validated($row) !== FALSE; // For backward compatibility"+"\r\n"+"		";
ewAr[86] = ""+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$rs->Close();"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	";
ewAr[87] = ""+"\r\n"+""+"\r\n"+"		if ($CustomValidateUser)"+"\r\n"+"			return $CustomValidateUser;"+"\r\n"+""+"\r\n"+"		if (!$ValidateUser && !IsPasswordExpired())"+"\r\n"+"			$_SESSION[EW_SESSION_STATUS] = \"\"; // Clear login status"+"\r\n"+"		"+"\r\n"+"		return $ValidateUser;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[88] = ""+"\r\n"+""+"\r\n"+"	// Load user level from config file"+"\r\n"+"	function LoadUserLevelFromConfigFile(&$arUserLevel, &$arUserLevelPriv, &$arTable, $userpriv = FALSE) {"+"\r\n"+"		global $EW_RELATED_PROJECT_ID;"+"\r\n"+""+"\r\n"+"		// User Level definitions"+"\r\n"+"		array_splice($arUserLevel, 0);"+"\r\n"+"		array_splice($arUserLevelPriv, 0);"+"\r\n"+"		array_splice($arTable, 0);"+"\r\n"+""+"\r\n"+"		// Load user level from config files"+"\r\n"+"		$doc = new cXMLDocument();"+"\r\n"+"		$folder = ew_AppRoot() . EW_CONFIG_FILE_FOLDER;"+"\r\n"+""+"\r\n"+"		// Load user level settings from main config file"+"\r\n"+"		$ProjectID = CurrentProjectID();"+"\r\n"+"		$file = $folder . EW_PATH_DELIMITER . $ProjectID . \".xml\";"+"\r\n"+"		if (file_exists($file) && $doc->Load($file) && (($projnode = $doc->SelectSingleNode(\"//configuration/project\")) != NULL)) {"+"\r\n"+"			$EW_RELATED_PROJECT_ID = $doc->GetAttribute($projnode, \"relatedid\");"+"\r\n"+"			$userlevel = $doc->GetAttribute($projnode, \"userlevel\");"+"\r\n"+"			$usergroup = explode(\";\", $userlevel);"+"\r\n"+"			foreach ($usergroup as $group) {"+"\r\n"+"				@list($id, $name, $priv) = explode(\",\", $group, 3);"+"\r\n"+"				// Remove quotes"+"\r\n"+"				if (strlen($name) >= 2 && substr($name,0,1) == \"\\\"\" && substr($name,-1) == \"\\\"\")"+"\r\n"+"					$name = substr($name,1,strlen($name)-2);"+"\r\n"+"				$arUserLevel[] = array($id, $name);"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Load from main config file"+"\r\n"+"			$this->LoadUserLevelFromXml($folder, $doc, $arUserLevelPriv, $arTable, $userpriv);"+"\r\n"+""+"\r\n"+"			// Load from related config file"+"\r\n"+"			if ($EW_RELATED_PROJECT_ID <> \"\")"+"\r\n"+"				$this->LoadUserLevelFromXml($folder, $EW_RELATED_PROJECT_ID . \".xml\", $arUserLevelPriv, $arTable, $userpriv);"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Warn user if user level not setup"+"\r\n"+"		if (count($arUserLevel) == 0) {"+"\r\n"+"			die(\"Unable to load user level from config file: \" . $file);"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Load user priv settings from all config files"+"\r\n"+"		if ($dir_handle = @opendir($folder)) {"+"\r\n"+"			while (FALSE !== ($file = readdir($dir_handle))) {"+"\r\n"+"				if ($file == \".\" || $file == \"..\" || !is_file($folder . EW_PATH_DELIMITER . $file))"+"\r\n"+"					continue;"+"\r\n"+"				$pathinfo = pathinfo($file);"+"\r\n"+"				if (isset($pathinfo[\"extension\"]) && strtolower($pathinfo[\"extension\"]) == \"xml\") {"+"\r\n"+"					if ($file <> $ProjectID . \".xml\" && $file <> $EW_RELATED_PROJECT_ID . \".xml\")"+"\r\n"+"						$this->LoadUserLevelFromXml($folder, $file, $arUserLevelPriv, $arTable, $userpriv);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load user level from xml"+"\r\n"+"	function LoadUserLevelFromXml($folder, $file, &$arUserLevelPriv, &$arTable, $userpriv) {"+"\r\n"+"		global $EW_RELATED_PROJECT_ID, $EW_RELATED_LANGUAGE_FOLDER;"+"\r\n"+""+"\r\n"+"		if (is_string($file)) {"+"\r\n"+"			$file = $folder . EW_PATH_DELIMITER . $file;"+"\r\n"+"			$doc = new cXMLDocument();"+"\r\n"+"			$doc->Load($file);"+"\r\n"+"		} else {"+"\r\n"+"			$doc = $file;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		if ($doc instanceof cXMLDocument) {"+"\r\n"+""+"\r\n"+"			// Load project id"+"\r\n"+"			$projid = \"\";"+"\r\n"+"			$projfile = \"\";"+"\r\n"+"			if (($projnode = $doc->SelectSingleNode(\"//configuration/project\")) != NULL) {"+"\r\n"+"				$projid = $doc->GetAttribute($projnode, \"id\");"+"\r\n"+"				$projfile = $doc->GetAttribute($projnode, \"file\");"+"\r\n"+"				if ($projid == $EW_RELATED_PROJECT_ID)"+"\r\n"+"					$EW_RELATED_LANGUAGE_FOLDER = $doc->GetAttribute($projnode, \"languagefolder\") . EW_PATH_DELIMITER;"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Load user priv"+"\r\n"+"			$tablelist = $doc->SelectNodes(\"//configuration/project/table\");"+"\r\n"+"			foreach ($tablelist as $table) {"+"\r\n"+"				$tablevar = $doc->GetAttribute($table, \"id\");"+"\r\n"+"				$tablename = $doc->GetAttribute($table, \"name\");"+"\r\n"+"				$tablecaption = $doc->GetAttribute($table, \"caption\");"+"\r\n"+"				$userlevel = $doc->GetAttribute($table, \"userlevel\");"+"\r\n"+"				$priv = $doc->GetAttribute($table, \"priv\");"+"\r\n"+"				if (!$userpriv || ($userpriv && $priv == \"1\")) {"+"\r\n"+"					$usergroup = explode(\";\", $userlevel);"+"\r\n"+"					foreach ($usergroup as $group) {"+"\r\n"+"						@list($id, $name, $priv) = explode(\",\", $group, 3);"+"\r\n"+"						$arUserLevelPriv[] = array($projid . $tablename, $id, $priv);"+"\r\n"+"					}"+"\r\n"+"					$arTable[] = array($tablename, $tablevar, $tablecaption, $priv, $projid, $projfile);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[89] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[90] = ""+"\r\n"+""+"\r\n"+"	// Static User Level security"+"\r\n"+"	function SetUpUserLevel() {"+"\r\n"+""+"\r\n"+"		// Load user level from config file"+"\r\n"+"		$arTable = array();"+"\r\n"+"		$this->LoadUserLevelFromConfigFile($this->UserLevel, $this->UserLevelPriv, $arTable);"+"\r\n"+""+"\r\n"+"	";
ewAr[91] = ""+"\r\n"+"		// User Level loaded event"+"\r\n"+"		$this->UserLevel_Loaded();"+"\r\n"+"	";
ewAr[92] = ""+"\r\n"+""+"\r\n"+"		// Save the User Level to Session variable"+"\r\n"+"		$this->SaveUserLevel();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get all User Level settings from database"+"\r\n"+"	function SetUpUserLevelEx() {"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[93] = ""+"\r\n"+""+"\r\n"+"	// Dynamic User Level security"+"\r\n"+"	var $anoymousUserLevelChecked = FALSE;"+"\r\n"+""+"\r\n"+"	// Get User Level settings from database"+"\r\n"+"	function SetUpUserLevel() {"+"\r\n"+""+"\r\n"+"		$this->SetUpUserLevelEx(); // Load all user levels"+"\r\n"+"";
ewAr[94] = ""+"\r\n"+"		// User Level loaded event"+"\r\n"+"		$this->UserLevel_Loaded();"+"\r\n"+"";
ewAr[95] = ""+"\r\n"+"		// Save the User Level to Session variable"+"\r\n"+"		$this->SaveUserLevel();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get all User Level settings from database"+"\r\n"+"	function SetUpUserLevelEx() {"+"\r\n"+"		global $Language;"+"\r\n"+"		global $Page;"+"\r\n"+"		global $EW_RELATED_PROJECT_ID;"+"\r\n"+""+"\r\n"+"		// Load user level from config file first"+"\r\n"+"		$arTable = array();"+"\r\n"+"		$arUserLevel = array();"+"\r\n"+"		$arUserLevelPriv = array();"+"\r\n"+"		$this->LoadUserLevelFromConfigFile($arUserLevel, $arUserLevelPriv, $arTable);"+"\r\n"+""+"\r\n"+"		// Add Anonymous user level"+"\r\n"+"		$conn = &Conn(EW_USER_LEVEL_DBID);"+"\r\n"+"		if (!$this->anoymousUserLevelChecked) {"+"\r\n"+"			$Sql = \"SELECT COUNT(*) FROM \" . EW_USER_LEVEL_TABLE . \" WHERE \" . EW_USER_LEVEL_ID_FIELD . \" = -2\";"+"\r\n"+"			if (ew_ExecuteScalar($Sql, $conn) == 0) {"+"\r\n"+"				$Sql = \"INSERT INTO \" . EW_USER_LEVEL_TABLE ."+"\r\n"+"					\" (\" . EW_USER_LEVEL_ID_FIELD . \", \" . EW_USER_LEVEL_NAME_FIELD . \") VALUES (-2, '\" . ew_AdjustSql($Language->Phrase(\"UserAnonymous\"), EW_USER_LEVEL_DBID) . \"')\";"+"\r\n"+"				$conn->Execute($Sql);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Get the User Level definitions"+"\r\n"+"		$Sql = \"SELECT \" . EW_USER_LEVEL_ID_FIELD . \", \" . EW_USER_LEVEL_NAME_FIELD . \" FROM \" . EW_USER_LEVEL_TABLE;"+"\r\n"+"		if ($rs = $conn->Execute($Sql)) {"+"\r\n"+"			$this->UserLevel = $rs->GetRows();"+"\r\n"+"			$rs->Close();"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Add Anonymous user privileges"+"\r\n"+"		$conn = &Conn(EW_USER_LEVEL_PRIV_DBID);"+"\r\n"+"		if (!$this->anoymousUserLevelChecked) {"+"\r\n"+"			$Sql = \"SELECT COUNT(*) FROM \" . EW_USER_LEVEL_PRIV_TABLE . \" WHERE \" . EW_USER_LEVEL_PRIV_USER_LEVEL_ID_FIELD . \" = -2\";"+"\r\n"+"			if (ew_ExecuteScalar($Sql, $conn) == 0) {"+"\r\n"+"				$wrkUserLevel = array();"+"\r\n"+"				$wrkUserLevelPriv = array();"+"\r\n"+"				$wrkTable = array();"+"\r\n"+"				$this->LoadUserLevelFromConfigFile($wrkUserLevel, $wrkUserLevelPriv, $wrkTable, TRUE);"+"\r\n"+"				foreach ($wrkTable as $table) {"+"\r\n"+"					$wrkPriv = 0;"+"\r\n"+"					foreach ($wrkUserLevelPriv as $userpriv) {"+"\r\n"+"						if (@$userpriv[0] == @$table[4] . @$table[0] && @$userpriv[1] == -2) {"+"\r\n"+"							$wrkPriv = @$userpriv[2];"+"\r\n"+"							break;"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"					$Sql = \"INSERT INTO \" . EW_USER_LEVEL_PRIV_TABLE ."+"\r\n"+"						\" (\" . EW_USER_LEVEL_PRIV_USER_LEVEL_ID_FIELD . \", \" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \", \" . EW_USER_LEVEL_PRIV_PRIV_FIELD ."+"\r\n"+"						\") VALUES (-2, '\" . ew_AdjustSql(@$table[4] . @$table[0], EW_USER_LEVEL_PRIV_DBID) . \"', \" . $wrkPriv . \")\";"+"\r\n"+"					$conn->Execute($Sql);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$this->anoymousUserLevelChecked = TRUE;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Get the User Level privileges"+"\r\n"+"		$sUserPrivSql = \"SELECT \" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \", \" . EW_USER_LEVEL_PRIV_USER_LEVEL_ID_FIELD . \", \" . EW_USER_LEVEL_PRIV_PRIV_FIELD . \" FROM \" . EW_USER_LEVEL_PRIV_TABLE;"+"\r\n"+"		if (!$this->IsAdmin() && count($this->UserLevelID) > 0) {"+"\r\n"+"			$sUserPrivSql .= \" WHERE \" . EW_USER_LEVEL_PRIV_USER_LEVEL_ID_FIELD . \" IN (\" . $this->UserLevelList() . \")\";"+"\r\n"+"			$_SESSION[EW_SESSION_USER_LEVEL_LIST_LOADED] = $this->UserLevelList(); // Save last loaded list"+"\r\n"+"		} else {"+"\r\n"+"			$_SESSION[EW_SESSION_USER_LEVEL_LIST_LOADED] = \"\"; // Save last loaded list"+"\r\n"+"		}"+"\r\n"+"		if ($rs = $conn->Execute($sUserPrivSql)) {"+"\r\n"+"			$this->UserLevelPriv = $rs->GetRows();"+"\r\n"+"			$rs->Close();"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Increase table name field size if necessary"+"\r\n"+"		if (ew_GetConnectionType(EW_USER_LEVEL_PRIV_DBID) == \"MYSQL\") {"+"\r\n"+"			try {"+"\r\n"+"				if ($rs = $conn->Execute(\"SHOW COLUMNS FROM \" . EW_USER_LEVEL_PRIV_TABLE . \" LIKE '\" . ew_AdjustSql(EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD_2, EW_USER_LEVEL_PRIV_DBID) . \"'\")) {"+"\r\n"+"					$type = $rs->fields(\"Type\");"+"\r\n"+"					$rs->Close();"+"\r\n"+"					if (preg_match('/varchar\\(([\\d]+)\\)/i', $type, $matches)) {"+"\r\n"+"						$size = intval($matches[1]);"+"\r\n"+"						if ($size < EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD_SIZE)"+"\r\n"+"							$conn->Execute(\"ALTER TABLE \" . EW_USER_LEVEL_PRIV_TABLE . \" MODIFY COLUMN \" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" VARCHAR(\" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD_SIZE . \")\");"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			} catch (Exception $e) {}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Update User Level privileges record if necessary"+"\r\n"+"		$ProjectID = CurrentProjectID();"+"\r\n"+"		$bReloadUserPriv = 0;"+"\r\n"+""+"\r\n"+"		// Update table without prefix"+"\r\n"+"		$Sql = \"SELECT COUNT(*) FROM \" . EW_USER_LEVEL_PRIV_TABLE . \" WHERE EXISTS(SELECT * FROM \" ."+"\r\n"+"				EW_USER_LEVEL_PRIV_TABLE . \" WHERE \" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" NOT LIKE '{%')\";"+"\r\n"+"		if (ew_ExecuteScalar($Sql, $conn) > 0) {"+"\r\n"+"			$ar = array_map(create_function('$t', 'return \"\\'\" . ew_AdjustSql($t[0], EW_USER_LEVEL_PRIV_DBID) . \"\\'\";'), $arTable);"+"\r\n"+"			$Sql = \"UPDATE \" . EW_USER_LEVEL_PRIV_TABLE . \" SET \" ."+"\r\n"+"				EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" = \" . $conn->Concat(\"'\" . ew_AdjustSql($ProjectID, EW_USER_LEVEL_PRIV_DBID) . \"'\", EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD) . \" WHERE \" ."+"\r\n"+"				EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" IN (\" . implode(\",\", $ar) . \")\";"+"\r\n"+"			if ($conn->Execute($Sql))"+"\r\n"+"				$bReloadUserPriv += $conn->Affected_Rows();"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Update table with report prefix"+"\r\n"+"		if ($EW_RELATED_PROJECT_ID <> \"\") {"+"\r\n"+"			$Sql = \"SELECT COUNT(*) FROM \" . EW_USER_LEVEL_PRIV_TABLE . \" WHERE EXISTS(SELECT * FROM \" ."+"\r\n"+"				EW_USER_LEVEL_PRIV_TABLE . \" WHERE \" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" LIKE '\" ."+"\r\n"+"				ew_AdjustSql(EW_TABLE_PREFIX, EW_USER_LEVEL_PRIV_DBID) . \"%')\";"+"\r\n"+"			if (ew_ExecuteScalar($Sql, $conn) > 0) {"+"\r\n"+"				$ar = array_map(create_function('$t', 'return \"\\'\" . ew_AdjustSql(EW_TABLE_PREFIX . $t[0], EW_USER_LEVEL_PRIV_DBID) . \"\\'\";'), $arTable);"+"\r\n"+"				$Sql = \"UPDATE \" . EW_USER_LEVEL_PRIV_TABLE . \" SET \" ."+"\r\n"+"					EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" = REPLACE(\" . EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \",\" ."+"\r\n"+"					\"'\" . ew_AdjustSql(EW_TABLE_PREFIX, EW_USER_LEVEL_PRIV_DBID) . \"','\" . ew_AdjustSql($EW_RELATED_PROJECT_ID, EW_USER_LEVEL_PRIV_DBID) . \"') WHERE \" ."+"\r\n"+"					EW_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" IN (\" . implode(\",\", $ar) . \")\";"+"\r\n"+"				if ($conn->Execute($Sql))"+"\r\n"+"					$bReloadUserPriv += $conn->Affected_Rows();"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Reload the User Level privileges"+"\r\n"+"		if ($bReloadUserPriv) {"+"\r\n"+"			if ($rs = $conn->Execute($sUserPrivSql)) {"+"\r\n"+"				$this->UserLevelPriv = $rs->GetRows();"+"\r\n"+"				$rs->Close();"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Warn user if user level not setup"+"\r\n"+"		if (count($this->UserLevelPriv) == 0 && $this->IsAdmin() && $Page != NULL && @$_SESSION[EW_SESSION_USER_LEVEL_MSG] == \"\") {"+"\r\n"+"			$Page->setFailureMessage($Language->Phrase(\"NoUserLevel\"));"+"\r\n"+"			$_SESSION[EW_SESSION_USER_LEVEL_MSG] = \"1\"; // Show only once"+"\r\n"+"			$Page->Page_Terminate(\"";
ewAr[96] = "\");"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		return TRUE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user level table exist"+"\r\n"+"	function UserLevelTableExist(&$ar, $projid, $table) {"+"\r\n"+"		foreach ($ar as $val) {"+"\r\n"+"			if ($val[0] == $table && $val[4] == $projid)"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[97] = ""+"\r\n"+""+"\r\n"+"	// No User Level security"+"\r\n"+"	function SetUpUserLevel() {}"+"\r\n"+""+"\r\n"+"	";
ewAr[98] = ""+"\r\n"+""+"\r\n"+"	// Add user permission"+"\r\n"+"	function AddUserPermission($UserLevelName, $TableName, $UserPermission) {"+"\r\n"+"		// Get User Level ID from user name"+"\r\n"+"		$UserLevelID = \"\";"+"\r\n"+"		if (is_array($this->UserLevel)) {"+"\r\n"+"			foreach ($this->UserLevel as $row) {"+"\r\n"+"				list($levelid, $name) = $row;"+"\r\n"+"				if (ew_SameText($UserLevelName, $name)) {"+"\r\n"+"					$UserLevelID = $levelid;"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (is_array($this->UserLevelPriv) && $UserLevelID <> \"\") {"+"\r\n"+"			$cnt = count($this->UserLevelPriv);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				list($table, $levelid, $priv) = $this->UserLevelPriv[$i];"+"\r\n"+"				if (ew_SameText($table, EW_PROJECT_ID . $TableName) && ew_SameStr($levelid, $UserLevelID)) {"+"\r\n"+"					$this->UserLevelPriv[$i][2] = $priv | $UserPermission; // Add permission"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete user permission"+"\r\n"+"	function DeleteUserPermission($UserLevelName, $TableName, $UserPermission) {"+"\r\n"+"		// Get User Level ID from user name"+"\r\n"+"		$UserLevelID = \"\";"+"\r\n"+"		if (is_array($this->UserLevel)) {"+"\r\n"+"			foreach ($this->UserLevel as $row) {"+"\r\n"+"				list($levelid, $name) = $row;"+"\r\n"+"				if (ew_SameText($UserLevelName, $name)) {"+"\r\n"+"					$UserLevelID = $levelid;"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (is_array($this->UserLevelPriv) && $UserLevelID <> \"\") {"+"\r\n"+"			$cnt = count($this->UserLevelPriv);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				list($table, $levelid, $priv) = $this->UserLevelPriv[$i];"+"\r\n"+"				if (ew_SameText($table, EW_PROJECT_ID . $TableName) && ew_SameStr($levelid, $UserLevelID)) {"+"\r\n"+"					$this->UserLevelPriv[$i][2] = $priv & (127 - $UserPermission); // Remove permission"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Load current User Level"+"\r\n"+"	function LoadCurrentUserLevel($Table) {"+"\r\n"+"		// Load again if user level list changed"+"\r\n"+"		if (@$_SESSION[EW_SESSION_USER_LEVEL_LIST_LOADED] <> \"\" && @$_SESSION[EW_SESSION_USER_LEVEL_LIST_LOADED] <> @$_SESSION[EW_SESSION_USER_LEVEL_LIST]) {"+"\r\n"+"			$_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV] = \"\";"+"\r\n"+"		}"+"\r\n"+"		$this->LoadUserLevel();"+"\r\n"+"		$this->setSessionUserLevel($this->CurrentUserLevelPriv($Table));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get current user privilege"+"\r\n"+"	function CurrentUserLevelPriv($TableName) {"+"\r\n"+"		if ($this->IsLoggedIn()) {"+"\r\n"+"	";
ewAr[99] = ""+"\r\n"+"			$Priv = 0;"+"\r\n"+"			foreach ($this->UserLevelID as $UserLevelID)"+"\r\n"+"				$Priv |= $this->GetUserLevelPrivEx($TableName, $UserLevelID);"+"\r\n"+"			return $Priv;"+"\r\n"+"	";
ewAr[100] = ""+"\r\n"+"			return 127;"+"\r\n"+"	";
ewAr[101] = ""+"\r\n"+"		} else { // Anonymous"+"\r\n"+"			return $this->GetUserLevelPrivEx($TableName, -2);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get User Level ID by User Level name"+"\r\n"+"	function GetUserLevelID($UserLevelName) {"+"\r\n"+"		global $Language;"+"\r\n"+"		if (ew_SameStr($UserLevelName, \"Anonymous\") || ew_SameStr($UserLevelName, $Language->Phrase(\"UserAnonymous\"))) {"+"\r\n"+"			return -2;"+"\r\n"+"		} elseif (ew_SameStr($UserLevelName, \"Administrator\") || ew_SameStr($UserLevelName, $Language->Phrase(\"UserAdministrator\"))) {"+"\r\n"+"			return -1;"+"\r\n"+"		} elseif (ew_SameStr($UserLevelName, \"Default\") || ew_SameStr($UserLevelName, $Language->Phrase(\"UserDefault\"))) {"+"\r\n"+"			return 0;"+"\r\n"+"		} elseif ($UserLevelName <> \"\") {"+"\r\n"+"			if (is_array($this->UserLevel)) {"+"\r\n"+"				foreach ($this->UserLevel as $row) {"+"\r\n"+"					list($levelid, $name) = $row;"+"\r\n"+"					if (ew_SameStr($name, $UserLevelName) || ew_SameStr($Language->Phrase($name), $UserLevelName))"+"\r\n"+"						return $levelid;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return -2;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add User Level by name"+"\r\n"+"	function AddUserLevel($UserLevelName) {"+"\r\n"+"		if (strval($UserLevelName) == \"\") return;"+"\r\n"+"		$UserLevelID = $this->GetUserLevelID($UserLevelName);"+"\r\n"+"		$this->AddUserLevelID($UserLevelID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add User Level by ID"+"\r\n"+"	function AddUserLevelID($UserLevelID) {"+"\r\n"+"		if (!is_numeric($UserLevelID)) return;"+"\r\n"+"		if ($UserLevelID < -1) return;"+"\r\n"+"		if (!in_array($UserLevelID, $this->UserLevelID)) {"+"\r\n"+"			$this->UserLevelID[] = $UserLevelID;"+"\r\n"+"			$_SESSION[EW_SESSION_USER_LEVEL_LIST] = $this->UserLevelList(); // Update session variable"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete User Level by name"+"\r\n"+"	function DeleteUserLevel($UserLevelName) {"+"\r\n"+"		if (strval($UserLevelName) == \"\") return;"+"\r\n"+"		$UserLevelID = $this->GetUserLevelID($UserLevelName);"+"\r\n"+"		$this->DeleteUserLevelID($UserLevelID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete User Level by ID"+"\r\n"+"	function DeleteUserLevelID($UserLevelID) {"+"\r\n"+"		if (!is_numeric($UserLevelID)) return;"+"\r\n"+"		if ($UserLevelID < -1) return;"+"\r\n"+"		$cnt = count($this->UserLevelID);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($this->UserLevelID[$i] == $UserLevelID) {"+"\r\n"+"				unset($this->UserLevelID[$i]);"+"\r\n"+"				$_SESSION[EW_SESSION_USER_LEVEL_LIST] = $this->UserLevelList(); // Update session variable"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// User Level list"+"\r\n"+"	function UserLevelList() {"+"\r\n"+"		return implode(\", \", $this->UserLevelID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// User Level name list"+"\r\n"+"	function UserLevelNameList() {"+"\r\n"+"		$list = \"\";"+"\r\n"+"		foreach ($this->UserLevelID as $UserLevelID) {"+"\r\n"+"			if ($list <> \"\") $list .= \", \";"+"\r\n"+"			$list .= ew_QuotedValue($this->GetUserLevelName($UserLevelID), EW_DATATYPE_STRING, EW_USER_LEVEL_DBID);"+"\r\n"+"		}"+"\r\n"+"		return $list;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get user privilege based on table name and User Level"+"\r\n"+"	function GetUserLevelPrivEx($TableName, $UserLevelID) {"+"\r\n"+"		if (strval($UserLevelID) == \"-1\") { // System Administrator"+"\r\n"+"			if (defined(\"EW_USER_LEVEL_COMPAT\")) {"+"\r\n"+"				return 31; // Use old User Level values"+"\r\n"+"			} else {"+"\r\n"+"				return 127; // Use new User Level values (separate View/Search)"+"\r\n"+"			}"+"\r\n"+"		} elseif ($UserLevelID >= 0 || $UserLevelID == -2) {"+"\r\n"+"			if (is_array($this->UserLevelPriv)) {"+"\r\n"+"				foreach ($this->UserLevelPriv as $row) {"+"\r\n"+"					list($table, $levelid, $priv) = $row;"+"\r\n"+"					if (strtolower($table) == strtolower($TableName) && strval($levelid) == strval($UserLevelID)) {"+"\r\n"+"						if (is_null($priv) || !is_numeric($priv)) return 0;"+"\r\n"+"						return intval($priv);"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return 0;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get current User Level name"+"\r\n"+"	function CurrentUserLevelName() {"+"\r\n"+"		return $this->GetUserLevelName($this->CurrentUserLevelID());"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get User Level name based on User Level"+"\r\n"+"	function GetUserLevelName($UserLevelID, $Lang = TRUE) {"+"\r\n"+"		global $Language;"+"\r\n"+"		if (strval($UserLevelID) == \"-2\") {"+"\r\n"+"			return ($Lang) ? $Language->Phrase(\"UserAnonymous\") : \"Anonymous\";"+"\r\n"+"		} elseif (strval($UserLevelID) == \"-1\") {"+"\r\n"+"			return ($Lang) ? $Language->Phrase(\"UserAdministrator\") : \"Administrator\";"+"\r\n"+"		} elseif (strval($UserLevelID) == \"0\") {"+"\r\n"+"			return ($Lang) ? $Language->Phrase(\"UserDefault\") : \"Default\";"+"\r\n"+"		} elseif ($UserLevelID > 0) {"+"\r\n"+"			if (is_array($this->UserLevel)) {"+"\r\n"+"				foreach ($this->UserLevel as $row) {"+"\r\n"+"					list($levelid, $name) = $row;"+"\r\n"+"					if (strval($levelid) == strval($UserLevelID)) {"+"\r\n"+"						$UserLevelName = \"\";"+"\r\n"+"						if ($Lang)"+"\r\n"+"							$UserLevelName = $Language->Phrase($name);	"+"\r\n"+"						return ($UserLevelName <> \"\") ? $UserLevelName : $name;"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Display all the User Level settings (for debug only)"+"\r\n"+"	function ShowUserLevelInfo() {"+"\r\n"+"		echo \"<pre>\";"+"\r\n"+"		print_r($this->UserLevel);"+"\r\n"+"		print_r($this->UserLevelPriv);"+"\r\n"+"		echo \"</pre>\";"+"\r\n"+"		echo \"<p>Current User Level ID = \" . $this->CurrentUserLevelID() . \"</p>\";"+"\r\n"+"		echo \"<p>Current User Level ID List = \" . $this->UserLevelList() . \"</p>\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check privilege for List page (for menu items)"+"\r\n"+"	function AllowList($TableName) {"+"\r\n"+"		return ($this->CurrentUserLevelPriv($TableName) & EW_ALLOW_LIST);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check privilege for View page (for Allow-View / Detail-View)"+"\r\n"+"	function AllowView($TableName) {"+"\r\n"+"		return ($this->CurrentUserLevelPriv($TableName) & EW_ALLOW_VIEW);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check privilege for Add page (for Allow-Add / Detail-Add)"+"\r\n"+"	function AllowAdd($TableName) {"+"\r\n"+"		return ($this->CurrentUserLevelPriv($TableName) & EW_ALLOW_ADD);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Check privilege for Edit page (for Detail-Edit)"+"\r\n"+"	function AllowEdit($TableName) {"+"\r\n"+"		return ($this->CurrentUserLevelPriv($TableName) & EW_ALLOW_EDIT);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Check if user password expired"+"\r\n"+"	function IsPasswordExpired() {"+"\r\n"+"		return (@$_SESSION[EW_SESSION_STATUS] == \"passwordexpired\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set session password expired"+"\r\n"+"	function SetSessionPasswordExpired() {"+"\r\n"+"		$_SESSION[EW_SESSION_STATUS] = \"passwordexpired\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set login status"+"\r\n"+"	function SetLoginStatus($status = \"\") {"+"\r\n"+"		$_SESSION[EW_SESSION_STATUS] = $status;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user password reset"+"\r\n"+"	function IsPasswordReset() {"+"\r\n"+"		return (@$_SESSION[EW_SESSION_STATUS] == \"passwordreset\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is logging in (after changing password)"+"\r\n"+"	function IsLoggingIn() {"+"\r\n"+"		return (@$_SESSION[EW_SESSION_STATUS] == \"loggingin\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is logged in"+"\r\n"+"	function IsLoggedIn() {"+"\r\n"+"		return (@$_SESSION[EW_SESSION_STATUS] == \"login\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is system administrator"+"\r\n"+"	function IsSysAdmin() {"+"\r\n"+"		return (@$_SESSION[EW_SESSION_SYS_ADMIN] == 1);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is administrator"+"\r\n"+"	function IsAdmin() {"+"\r\n"+"		$IsAdmin = $this->IsSysAdmin();"+"\r\n"+"		";
ewAr[102] = ""+"\r\n"+"		if (!$IsAdmin)"+"\r\n"+"			$IsAdmin = $this->CurrentUserLevelID == -1 || in_array(-1, $this->UserLevelID);"+"\r\n"+"		";
ewAr[103] = ""+"\r\n"+"		";
ewAr[104] = ""+"\r\n"+"		if (!$IsAdmin)"+"\r\n"+"    		$IsAdmin = $this->CurrentUserID == -1 || in_array(-1, $this->UserID);"+"\r\n"+"		";
ewAr[105] = ""+"\r\n"+"		return $IsAdmin;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save User Level to Session"+"\r\n"+"	function SaveUserLevel() {"+"\r\n"+"		//$_SESSION[EW_SESSION_PROJECT_ID] = CurrentProjectID(); // Save project id"+"\r\n"+"		$_SESSION[EW_SESSION_AR_USER_LEVEL] = $this->UserLevel;"+"\r\n"+"		$_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV] = $this->UserLevelPriv;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load User Level from Session"+"\r\n"+"	function LoadUserLevel() {"+"\r\n"+"		$ProjectID = CurrentProjectID();"+"\r\n"+"		//if (!is_array(@$_SESSION[EW_SESSION_AR_USER_LEVEL]) || !is_array(@$_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV]) || $ProjectID <> @$_SESSION[EW_SESSION_PROJECT_ID]) { // Reload if different project"+"\r\n"+"		if (!is_array(@$_SESSION[EW_SESSION_AR_USER_LEVEL]) || !is_array(@$_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV])) {"+"\r\n"+"			$this->SetupUserLevel();"+"\r\n"+"			$this->SaveUserLevel();"+"\r\n"+"		} else {"+"\r\n"+"			$this->UserLevel = $_SESSION[EW_SESSION_AR_USER_LEVEL];"+"\r\n"+"			$this->UserLevelPriv = $_SESSION[EW_SESSION_AR_USER_LEVEL_PRIV];"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[106] = ""+"\r\n"+"	// Get user email"+"\r\n"+"	function CurrentUserEmail() {"+"\r\n"+"		return $this->CurrentUserInfo(\"";
ewAr[107] = "\");"+"\r\n"+"	}"+"\r\n"+"	";
ewAr[108] = ""+"\r\n"+""+"\r\n"+"	// Get current user info"+"\r\n"+"	function CurrentUserInfo($fldname) {"+"\r\n"+"		global $UserTableConn;"+"\r\n"+"		$info = NULL;"+"\r\n"+"	";
ewAr[109] = ""+"\r\n"+"		$info = $this->GetUserInfo($fldname, $this->CurrentUserID);"+"\r\n"+"	";
ewAr[110] = ""+"\r\n"+"		if (defined(\"EW_USER_TABLE\") && !$this->IsSysAdmin()) {"+"\r\n"+"			$user = $this->CurrentUserName();"+"\r\n"+"			if (strval($user) <> \"\")"+"\r\n"+"				return ew_ExecuteScalar(\"SELECT \" . ew_QuotedName($fldname, EW_USER_TABLE_DBID) . \" FROM \" . EW_USER_TABLE . \" WHERE \" ."+"\r\n"+"					str_replace(\"%u\", ew_AdjustSql($user, EW_USER_TABLE_DBID), EW_USER_NAME_FILTER), $UserTableConn);"+"\r\n"+"		}"+"\r\n"+"	";
ewAr[111] = ""+"\r\n"+"		return $info;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[112] = ""+"\r\n"+""+"\r\n"+"	// Get user info"+"\r\n"+"	function GetUserInfo($FieldName, $UserID) {"+"\r\n"+"		global $UserTable, $UserTableConn;"+"\r\n"+"		if (strval($UserID) <> \"\") {"+"\r\n"+"			// Get SQL from GetSQL method in <UserTable> class, <UserTable>info.php"+"\r\n"+"			$sFilter = str_replace(\"%u\", ew_AdjustSql($UserID, EW_USER_TABLE_DBID), EW_USER_ID_FILTER);"+"\r\n"+"			$sSql = $UserTable->GetSQL($sFilter, '');"+"\r\n"+"			if (($RsUser = $UserTableConn->Execute($sSql)) && !$RsUser->EOF) {"+"\r\n"+"				$info = $RsUser->fields($FieldName);"+"\r\n"+"				$RsUser->Close();"+"\r\n"+"				return $info;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return NULL;"+"\r\n"+"  }"+"\r\n"+""+"\r\n"+"	// Get User ID by user name"+"\r\n"+"	function GetUserIDByUserName($UserName) {"+"\r\n"+"		global $UserTable, $UserTableConn;"+"\r\n"+"		if (strval($UserName) <> \"\") {"+"\r\n"+"			$sFilter = str_replace(\"%u\", ew_AdjustSql($UserName, EW_USER_TABLE_DBID), EW_USER_NAME_FILTER);"+"\r\n"+"			$sSql = $UserTable->GetSQL($sFilter, '');"+"\r\n"+"			if (($RsUser = $UserTableConn->Execute($sSql)) && !$RsUser->EOF) {"+"\r\n"+"				$UserID = $RsUser->fields('";
ewAr[113] = "');"+"\r\n"+"				$RsUser->Close();"+"\r\n"+"				return $UserID;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load User ID"+"\r\n"+"	function LoadUserID() {"+"\r\n"+"		global $UserTable, $UserTableConn;"+"\r\n"+"		$this->UserID = array();"+"\r\n"+"		if (strval($this->CurrentUserID) == \"\") {"+"\r\n"+"			// Add codes to handle empty user id here"+"\r\n"+"		} elseif ($this->CurrentUserID <> \"-1\") {"+"\r\n"+"			// Get first level"+"\r\n"+"			$this->AddUserID($this->CurrentUserID);"+"\r\n"+"			$sFilter = $UserTable->UserIDFilter($this->CurrentUserID);"+"\r\n"+"			$sSql = $UserTable->GetSQL($sFilter, '');"+"\r\n"+"			if ($RsUser = $UserTableConn->Execute($sSql)) {"+"\r\n"+"				while (!$RsUser->EOF) {"+"\r\n"+"					$this->AddUserID($RsUser->fields('";
ewAr[114] = "'));"+"\r\n"+"					$RsUser->MoveNext();"+"\r\n"+"				}"+"\r\n"+"				$RsUser->Close();"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"	";
ewAr[115] = ""+"\r\n"+"			// Recurse all levels (hierarchical User ID)"+"\r\n"+"			if (EW_USER_ID_IS_HIERARCHICAL) {"+"\r\n"+"				$sCurUserIDList = $this->UserIDList();"+"\r\n"+"				$sUserIDList = \"\";"+"\r\n"+"				while ($sUserIDList <> $sCurUserIDList) {"+"\r\n"+"					$sFilter = '";
ewAr[116] = " IN (' . $sCurUserIDList . ')';"+"\r\n"+"					$sSql = $UserTable->GetSQL($sFilter, '');"+"\r\n"+"					if ($RsUser = $UserTableConn->Execute($sSql)) {"+"\r\n"+"						while (!$RsUser->EOF) {"+"\r\n"+"							$this->AddUserID($RsUser->fields('";
ewAr[117] = "'));"+"\r\n"+"							$RsUser->MoveNext();"+"\r\n"+"						}"+"\r\n"+"						$RsUser->Close();"+"\r\n"+"					}"+"\r\n"+"					$sUserIDList = $sCurUserIDList;"+"\r\n"+"					$sCurUserIDList = $this->UserIDList();"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"	";
ewAr[118] = ""+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add user name"+"\r\n"+"	function AddUserName($UserName) {"+"\r\n"+"		$this->AddUserID($this->GetUserIDByUserName($UserName));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add User ID"+"\r\n"+"	function AddUserID($userid) {"+"\r\n"+"		if (strval($userid) == \"\") return;"+"\r\n"+"";
ewAr[119] = ""+"\r\n"+"		if (!is_numeric($userid)) return;"+"\r\n"+"";
ewAr[120] = ""+"\r\n"+"		if (!in_array(trim(strval($userid)), $this->UserID))"+"\r\n"+"			$this->UserID[] = trim(strval($userid));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete user name"+"\r\n"+"	function DeleteUserName($UserName) {"+"\r\n"+"		$this->DeleteUserID($this->GetUserIDByUserName($UserName));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete User ID"+"\r\n"+"	function DeleteUserID($userid) {"+"\r\n"+"		if (strval($userid) == \"\") return;"+"\r\n"+"";
ewAr[121] = ""+"\r\n"+"		if (!is_numeric($userid)) return;"+"\r\n"+"";
ewAr[122] = ""+"\r\n"+"		$cnt = count($this->UserID);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($this->UserID[$i] == trim(strval($userid))) {"+"\r\n"+"				unset($this->UserID[$i]);"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// User ID list"+"\r\n"+"	function UserIDList() {"+"\r\n"+"		$ar = $this->UserID;"+"\r\n"+"		$len = count($ar);"+"\r\n"+"		for ($i = 0; $i < $len; $i++)"+"\r\n"+"			$ar[$i] =  ew_QuotedValue($ar[$i], ";
ewAr[123] = ", EW_USER_TABLE_DBID);"+"\r\n"+"		return implode(\", \", $ar);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	";
ewAr[124] = ""+"\r\n"+""+"\r\n"+"	// Parent User ID list"+"\r\n"+"	function ParentUserIDList($userid) {"+"\r\n"+"		$result = \"\";"+"\r\n"+""+"\r\n"+"		// Own record"+"\r\n"+"		if (trim(strval($userid)) == strval(CurrentUserID())) {"+"\r\n"+"			if (strval(CurrentParentUserID()) <> \"\")"+"\r\n"+"				$result = ew_QuotedValue(CurrentParentUserID(), ";
ewAr[125] = ", EW_USER_TABLE_DBID);"+"\r\n"+"			return $result;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// One level only, must be CurrentUserID"+"\r\n"+"		if (!EW_USER_ID_IS_HIERARCHICAL) {"+"\r\n"+""+"\r\n"+"			return ew_QuotedValue(CurrentUserID(), ";
ewAr[126] = ", EW_USER_TABLE_DBID);"+"\r\n"+""+"\r\n"+"		} else { // Hierarchical, all users except userid"+"\r\n"+""+"\r\n"+"			$ar = $this->UserID;"+"\r\n"+"			$len = count($ar);"+"\r\n"+"			for ($i = 0; $i < $len; $i++) {"+"\r\n"+"				if (strval($ar[$i]) <> trim(strval($userid))) {"+"\r\n"+"					if ($result <> \"\")"+"\r\n"+"						$result .= \", \";"+"\r\n"+"					$result .= ew_QuotedValue($ar[$i], ";
ewAr[127] = ", EW_USER_TABLE_DBID);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			return $result;"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[128] = ""+"\r\n"+"	"+"\r\n"+"	// List of allowed User IDs for this user"+"\r\n"+"	function IsValidUserID($userid) {"+"\r\n"+"		return in_array(trim(strval($userid)), $this->UserID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[129] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[130] = ""+"\r\n"+"	";
ewAr[131] = ""+"\r\n"+"	";
ewAr[132] = ""+"\r\n"+"	";
ewAr[133] = ""+"\r\n"+"	";
ewAr[134] = ""+"\r\n"+"	";
ewAr[135] = ""+"\r\n"+"	";
ewAr[136] = ""+"\r\n"+"	";
ewAr[137] = ""+"\r\n"+""+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[138] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Common functions"+"\r\n"+" */"+"\r\n"+" "+"\r\n"+"// Connection/Query error handler"+"\r\n"+"function ew_ErrorFn($DbType, $ErrorType, $ErrorNo, $ErrorMsg, $Param1, $Param2, $Object) {"+"\r\n"+"	if ($ErrorType == 'CONNECT') {"+"\r\n"+"		if ($DbType == \"ado_access\" || $DbType == \"ado_mssql\") {"+"\r\n"+"			$msg = \"Failed to connect to database. Error: \" . $ErrorMsg;"+"\r\n"+"		} else {"+"\r\n"+"			$msg = \"Failed to connect to $Param2 at $Param1. Error: \" . $ErrorMsg;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($ErrorType == 'EXECUTE') {"+"\r\n"+"		if (EW_DEBUG_ENABLED) {"+"\r\n"+"			$msg = \"Failed to execute SQL: $Param1. Error: \" . $ErrorMsg;"+"\r\n"+"		} else {"+"\r\n"+"			$msg = \"Failed to execute SQL. Error: \" . $ErrorMsg;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	ew_AddMessage($_SESSION[EW_SESSION_FAILURE_MESSAGE], $msg);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write HTTP header"+"\r\n"+"function ew_Header($cache, $charset = EW_CHARSET) {"+"\r\n"+"	header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); // Date in the past"+"\r\n"+"	header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\"); // Always modified"+"\r\n"+"	$export = @$_GET[\"export\"];"+"\r\n"+"	if ($cache || ew_IsHttps() && $export <> \"\" && $export <> \"print\") { // Allow cache"+"\r\n"+"		header(\"Cache-Control: private, must-revalidate\");"+"\r\n"+"		header(\"Pragma: public\");"+"\r\n"+"	} else { // No cache"+"\r\n"+"		header(\"Cache-Control: private, no-store, no-cache, must-revalidate\");"+"\r\n"+"		header(\"Cache-Control: post-check=0, pre-check=0\", false);"+"\r\n"+"		header(\"Pragma: no-cache\");"+"\r\n"+"	}"+"\r\n"+"	header(\"X-UA-Compatible: IE=edge\");"+"\r\n"+"	if ($charset <> \"\")"+"\r\n"+"		header(\"Content-Type: text/html; charset=\" . $charset); // Charset"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get content file extension"+"\r\n"+"function ew_ContentExt($data) {"+"\r\n"+"	$ct = ew_ContentType(substr($data, 0, 11));"+"\r\n"+"	switch ($ct) {"+"\r\n"+"	case \"image/gif\": return \".gif\"; // Return gif"+"\r\n"+"	case \"image/jpeg\": return \".jpg\"; // Return jpg"+"\r\n"+"	case \"image/png\": return \".png\"; // Return png"+"\r\n"+"	case \"image/bmp\": return \".bmp\"; // Return bmp"+"\r\n"+"	case \"application/pdf\": return \".pdf\"; // Return pdf"+"\r\n"+"	default: return \"\"; // Unknown extension"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get content type"+"\r\n"+"function ew_ContentType($data, $fn = \"\") {"+"\r\n"+"	global $EW_MIME_TYPES;"+"\r\n"+"	// http://en.wikipedia.org/wiki/List_of_file_signatures"+"\r\n"+"	if (substr($data, 0, 6) == \"\\x47\\x49\\x46\\x38\\x37\\x61\" || substr($data, 0, 6) == \"\\x47\\x49\\x46\\x38\\x39\\x61\") { // Check if gif"+"\r\n"+"		return \"image/gif\";"+"\r\n"+"	//} elseif (substr($data, 0, 4) == \"\\xFF\\xD8\\xFF\\xE0\" && substr($data, 6, 5) == \"\\x4A\\x46\\x49\\x46\\x00\") { // Check if jpg"+"\r\n"+"	} elseif (substr($data, 0, 4) == \"\\xFF\\xD8\\xFF\\xE0\") { // Check if jpg"+"\r\n"+"		return \"image/jpeg\";"+"\r\n"+"	} elseif (substr($data, 0, 8) == \"\\x89\\x50\\x4E\\x47\\x0D\\x0A\\x1A\\x0A\") { // Check if png"+"\r\n"+"		return \"image/png\";"+"\r\n"+"	} elseif (substr($data, 0, 2) == \"\\x42\\x4D\") { // Check if bmp"+"\r\n"+"		return \"image/bmp\";"+"\r\n"+"	} elseif (substr($data, 0, 4) == \"\\x25\\x50\\x44\\x46\") { // Check if pdf"+"\r\n"+"		return \"application/pdf\";"+"\r\n"+"	} elseif ($fn <> \"\") { // Use file extension to get mime type"+"\r\n"+"		$extension = strtolower(substr(strrchr($fn, \".\"), 1));"+"\r\n"+"		$ct = @$EW_MIME_TYPES[$extension];"+"\r\n"+"		if ($ct == \"\") {"+"\r\n"+"			if (file_exists($fn) && function_exists(\"finfo_file\")) {"+"\r\n"+"				$finfo = finfo_open(FILEINFO_MIME_TYPE);"+"\r\n"+"				$ct = finfo_file($finfo, $fn);"+"\r\n"+"				finfo_close($finfo);"+"\r\n"+"			} elseif (function_exists(\"mime_content_type\")) {"+"\r\n"+"				$ct = mime_content_type($fn);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $ct;"+"\r\n"+"	} else {"+"\r\n"+"		return \"images\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get connection object"+"\r\n"+"function &Conn($dbid = 0) {"+"\r\n"+"	$db = &Db($dbid);"+"\r\n"+"	if ($db && is_null($db[\"conn\"]))"+"\r\n"+"		ew_ConnectDb($db);"+"\r\n"+"	if ($db)"+"\r\n"+"		$conn = &$db[\"conn\"];"+"\r\n"+"	else"+"\r\n"+"		$conn = FALSE;"+"\r\n"+"	return $conn;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get database object"+"\r\n"+"function &Db($dbid = 0) {"+"\r\n"+"	global $EW_CONN;"+"\r\n"+"	if (ew_EmptyStr($dbid))"+"\r\n"+"		$dbid = 0;"+"\r\n"+"	if (array_key_exists($dbid, $EW_CONN))"+"\r\n"+"		$db = &$EW_CONN[$dbid];"+"\r\n"+"	else"+"\r\n"+"		$db = FALSE;"+"\r\n"+"	return $db;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get connection type"+"\r\n"+"function ew_GetConnectionType($dbid = 0) {"+"\r\n"+"	$db = Db($dbid);"+"\r\n"+"	if ($db) {"+"\r\n"+"		return $db[\"type\"];"+"\r\n"+"	} elseif (ew_SameText($dbid, \"MYSQL\")) {"+"\r\n"+"		return \"MYSQL\";"+"\r\n"+"	} elseif (ew_SameText($dbid, \"POSTGRESQL\")) {"+"\r\n"+"		return \"POSTGRESQL\";"+"\r\n"+"	} elseif (ew_SameText($dbid, \"ORACLE\")) {"+"\r\n"+"		return \"ORACLE\";"+"\r\n"+"	} elseif (ew_SameText($dbid, \"ACCESS\")) {"+"\r\n"+"		return \"ACCESS\";"+"\r\n"+"	} elseif (ew_SameText($dbid, \"MSSQL\")) {"+"\r\n"+"		return \"MSSQL\";"+"\r\n"+"	}"+"\r\n"+"	return FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Connect to database"+"\r\n"+"function &ew_Connect($dbid = 0) {"+"\r\n"+"	return Conn($dbid);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Connect to database"+"\r\n"+"function ew_ConnectDb(&$info) {"+"\r\n"+"	$GLOBALS[\"ADODB_FETCH_MODE\"] = ADODB_FETCH_BOTH;"+"\r\n"+"	$GLOBALS[\"ADODB_COUNTRECS\"] = FALSE;"+"\r\n"+""+"\r\n"+"";
ewAr[139] = ""+"\r\n"+"	// Database connecting event"+"\r\n"+"	Database_Connecting($info);"+"\r\n"+"";
ewAr[140] = ""+"\r\n"+""+"\r\n"+"	$dbid = @$info[\"id\"];"+"\r\n"+"	$dbtype = @$info[\"type\"];"+"\r\n"+"	if (($dbtype == \"MSSQL\" || $dbtype == \"ACCESS\") && !class_exists(\"COM\"))"+"\r\n"+"		die(\"<strong>PHP COM extension required for database type '\" . $dbtype . \"' is not installed on this server.</strong> Note that Windows server is required for database type '\" . $dbtype . \"' and as of PHP 5.3.15/5.4.5, the COM extension requires php_com_dotnet.dll to be enabled in php.ini. See <a href='http://php.net/manual/en/com.installation.php'>http://php.net/manual/en/com.installation.php</a> for details.\");"+"\r\n"+"	if ($dbtype == \"MYSQL\") {"+"\r\n"+"		if (EW_USE_ADODB) {"+"\r\n"+"			if (EW_USE_MYSQLI)"+"\r\n"+"				$conn = ADONewConnection('mysqli');"+"\r\n"+"			else"+"\r\n"+"				$conn = ADONewConnection('mysqlt');"+"\r\n"+"		} else {"+"\r\n"+"			$conn = new mysqlt_driver_ADOConnection();"+"\r\n"+"		}"+"\r\n"+"	} elseif ($dbtype == \"POSTGRESQL\") {"+"\r\n"+"		$conn = ADONewConnection('postgres7');"+"\r\n"+"	} elseif ($dbtype == \"MSSQL\") {"+"\r\n"+"		$conn = ADONewConnection('ado_mssql');"+"\r\n"+"	} elseif ($dbtype == \"ACCESS\") {"+"\r\n"+"		$conn = ADONewConnection('ado_access');"+"\r\n"+"	} elseif ($dbtype == \"ORACLE\") {"+"\r\n"+"		$conn = ADONewConnection('oci805');"+"\r\n"+"		$conn->NLS_DATE_FORMAT = 'RRRR-MM-DD HH24:MI:SS';"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	$conn->debug = EW_DEBUG_ENABLED;"+"\r\n"+"	$conn->debug_echo = FALSE;"+"\r\n"+""+"\r\n"+"	if ($dbtype == \"MYSQL\" || $dbtype == \"POSTGRESQL\" || $dbtype == \"ORACLE\")"+"\r\n"+"		$conn->port = intval(@$info[\"port\"]);"+"\r\n"+"	if ($dbtype == \"ORACLE\")"+"\r\n"+"		$conn->charSet = @$info[\"charset\"];"+"\r\n"+""+"\r\n"+"	$conn->raiseErrorFn = (EW_DEBUG_ENABLED) ? $GLOBALS[\"EW_ERROR_FN\"] : \"\";"+"\r\n"+""+"\r\n"+"	if ($dbtype == \"MYSQL\" || $dbtype == \"POSTGRESQL\" || $dbtype == \"ORACLE\") {"+"\r\n"+"		if ($dbtype == \"MYSQL\")"+"\r\n"+"			$conn->Connect(@$info[\"host\"], @$info[\"user\"], @$info[\"pass\"], @$info[\"db\"], @$info[\"new\"]);"+"\r\n"+"		else"+"\r\n"+"			$conn->Connect(@$info[\"host\"], @$info[\"user\"], @$info[\"pass\"], @$info[\"db\"]);"+"\r\n"+"		if ($dbtype == \"MYSQL\" && EW_MYSQL_CHARSET <> \"\")"+"\r\n"+"			$conn->Execute(\"SET NAMES '\" . EW_MYSQL_CHARSET . \"'\");"+"\r\n"+"		if ($dbtype == \"ORACLE\") {"+"\r\n"+"			// Set schema"+"\r\n"+"			$conn->Execute(\"ALTER SESSION SET CURRENT_SCHEMA = \". ew_QuotedName(@$info[\"schema\"], $dbid));"+"\r\n"+"			$conn->Execute(\"ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'yyyy-mm-dd hh24:mi:ss'\");"+"\r\n"+"			$conn->Execute(\"ALTER SESSION SET NLS_TIMESTAMP_TZ_FORMAT = 'yyyy-mm-dd hh24:mi:ss'\");"+"\r\n"+"		";
ewAr[141] = ""+"\r\n"+"			$conn->Execute(\"ALTER SESSION SET NLS_COMP = ";
ewAr[142] = "\");"+"\r\n"+"		";
ewAr[143] = ""+"\r\n"+"		";
ewAr[144] = ""+"\r\n"+"			$conn->Execute(\"ALTER SESSION SET NLS_SORT = ";
ewAr[145] = "\");"+"\r\n"+"		";
ewAr[146] = ""+"\r\n"+"		}"+"\r\n"+"		if ($dbtype == \"POSTGRESQL\") {"+"\r\n"+"			// Set schema"+"\r\n"+"			if (@$info[\"schema\"] <> \"public\")"+"\r\n"+"				$conn->Execute(\"SET search_path TO \" . ew_QuotedName($info[\"schema\"], $dbid));"+"\r\n"+"		}"+"\r\n"+"	} elseif ($dbtype == \"ACCESS\" || $dbtype == \"MSSQL\") {"+"\r\n"+"		if (EW_CODEPAGE > 0)"+"\r\n"+"			$conn->charPage = EW_CODEPAGE;"+"\r\n"+"		if ($dbtype == \"ACCESS\") {"+"\r\n"+"			$relpath = @$info[\"relpath\"];"+"\r\n"+"			$dbname = @$info[\"dbname\"];"+"\r\n"+"			$provider = @$info[\"provider\"];"+"\r\n"+"			$password = @$info[\"password\"];"+"\r\n"+"			if ($relpath == \"\")"+"\r\n"+"				$datasource = realpath($GLOBALS[\"EW_RELATIVE_PATH\"] . $dbname);"+"\r\n"+"			elseif (substr($relpath, 0, 1) == \".\") // Relative path starting with \".\" or \"..\" (relative to app root)"+"\r\n"+"				$datasource = ew_ServerMapPath($relpath . $dbname);"+"\r\n"+"			elseif (substr($relpath, 0, 2) == \"\\\\\\\\\" || strpos($relpath, \":\") !== FALSE) // Physical path"+"\r\n"+"				$datasource = $relpath . $dbname;"+"\r\n"+"			else // Relative to app root"+"\r\n"+"				$datasource = ew_AppRoot() . str_replace(\"/\", \"\\\\\", $relpath) . $dbname;"+"\r\n"+"			if ($password <> \"\")"+"\r\n"+"				$connstr = $provider . \";Data Source=\" . $datasource . \";Jet OLEDB:Database Password=\" . $password . \";\";"+"\r\n"+"			elseif (strtoupper(substr($dbname, -6)) == \".ACCDB\") // AccDb"+"\r\n"+"				$connstr = $provider . \";Data Source=\" . $datasource . \";Persist Security Info=False;\";"+"\r\n"+"			else"+"\r\n"+"				$connstr = $provider . \";Data Source=\" . $datasource . \";\";"+"\r\n"+"		} else {"+"\r\n"+"			$connstr = @$info[\"connectionstring\"];"+"\r\n"+"		}"+"\r\n"+"		$conn->Connect($connstr, FALSE, FALSE);"+"\r\n"+"		// Set date format"+"\r\n"+"		if ($dbtype == \"MSSQL\" && EW_DEFAULT_DATE_FORMAT <> \"\")"+"\r\n"+"			$conn->Execute(\"SET DATEFORMAT ymd\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	//$conn->raiseErrorFn = '';"+"\r\n"+""+"\r\n"+"";
ewAr[147] = ""+"\r\n"+"	// Database connected event"+"\r\n"+"	Database_Connected($conn);"+"\r\n"+"";
ewAr[148] = ""+"\r\n"+""+"\r\n"+"	$info[\"conn\"] = &$conn;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Close database connections"+"\r\n"+"function ew_CloseConn() {"+"\r\n"+"	global $conn, $EW_CONN;"+"\r\n"+"	foreach ($EW_CONN as $dbid => &$db) {"+"\r\n"+"		if ($db[\"conn\"]) $db[\"conn\"]->Close();"+"\r\n"+"		$db[\"conn\"] = NULL;"+"\r\n"+"	}"+"\r\n"+"	$conn = NULL;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+""+"\r\n"+"";
ewAr[149] = ""+"\r\n"+"";
ewAr[150] = ""+"\r\n"+""+"\r\n"+"// Check if allow add/delete row"+"\r\n"+"function ew_AllowAddDeleteRow() {"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if HTTP POST"+"\r\n"+"function ew_IsHttpPost() {"+"\r\n"+"	$ct = ew_ServerVar(\"CONTENT_TYPE\");"+"\r\n"+"	if (empty($ct)) $ct = ew_ServerVar(\"HTTP_CONTENT_TYPE\");"+"\r\n"+"	return strpos($ct, \"application/x-www-form-urlencoded\") !== FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Append like operator"+"\r\n"+"function ew_Like($pat, $dbid = 0) {"+"\r\n"+"	$dbtype = ew_GetConnectionType($dbid);"+"\r\n"+"	if ($dbtype == \"POSTGRESQL\") {"+"\r\n"+"		return ((EW_USE_ILIKE_FOR_POSTGRESQL) ? \" ILIKE \" : \" LIKE \") . $pat;"+"\r\n"+"	} elseif ($dbtype == \"MYSQL\") {"+"\r\n"+"		if (EW_LIKE_COLLATION_FOR_MYSQL <> \"\") {"+"\r\n"+"			return \" LIKE \" . $pat . \" COLLATE \" . EW_LIKE_COLLATION_FOR_MYSQL;"+"\r\n"+"		} else {"+"\r\n"+"			return \" LIKE \" . $pat;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($dbtype == \"MSSQL\") {"+"\r\n"+"		if (EW_LIKE_COLLATION_FOR_MSSQL <> \"\") {"+"\r\n"+"			return  \" COLLATE \" . EW_LIKE_COLLATION_FOR_MSSQL . \" LIKE \" . $pat;"+"\r\n"+"		} else {"+"\r\n"+"			return \" LIKE \" . $pat;"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return \" LIKE \" . $pat;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return multi-value search SQL"+"\r\n"+"function ew_GetMultiSearchSql(&$Fld, $FldOpr, $FldVal, $dbid) {"+"\r\n"+"	if ($FldOpr == \"IS NULL\" || $FldOpr == \"IS NOT NULL\") {"+"\r\n"+"		return $Fld->FldExpression . \" \" . $FldOpr;"+"\r\n"+"	} else {"+"\r\n"+"		$sWrk = \"\";"+"\r\n"+"		$arVal = explode(\",\", $FldVal);"+"\r\n"+"		$dbtype = ew_GetConnectionType($dbid);"+"\r\n"+"		foreach ($arVal as $sVal) {"+"\r\n"+"			$sVal = trim($sVal);"+"\r\n"+"			if ($sVal == EW_NULL_VALUE) {"+"\r\n"+"				$sSql = $Fld->FldExpression . \" IS NULL\";"+"\r\n"+"			} elseif ($sVal == EW_NOT_NULL_VALUE) {"+"\r\n"+"				$sSql = $Fld->FldExpression . \" IS NOT NULL\";"+"\r\n"+"			} elseif ($dbtype == \"MYSQL\") {"+"\r\n"+"				$sSql = \"FIND_IN_SET('\" . ew_AdjustSql($sVal, $dbid) . \"', \" . $Fld->FldExpression . \")\";"+"\r\n"+"			} else {"+"\r\n"+"				if (count($arVal) == 1 || EW_SEARCH_MULTI_VALUE_OPTION == 3) {"+"\r\n"+"					$sSql = $Fld->FldExpression . \" = '\" . ew_AdjustSql($sVal, $dbid) . \"' OR \" . ew_GetMultiSearchSqlPart($Fld, $sVal, $dbid);"+"\r\n"+"				} else {"+"\r\n"+"					$sSql = ew_GetMultiSearchSqlPart($Fld, $sVal, $dbid);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if ($sWrk <> \"\") {"+"\r\n"+"				if (EW_SEARCH_MULTI_VALUE_OPTION == 2) {"+"\r\n"+"					$sWrk .= \" AND \";"+"\r\n"+"				} elseif (EW_SEARCH_MULTI_VALUE_OPTION == 3) {"+"\r\n"+"					$sWrk .= \" OR \";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$sWrk .= \"($sSql)\";"+"\r\n"+"		}"+"\r\n"+"		return $sWrk;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get multi search SQL part"+"\r\n"+"function ew_GetMultiSearchSqlPart(&$Fld, $FldVal, $dbid) {"+"\r\n"+"	return $Fld->FldExpression . ew_Like(\"'\" . ew_AdjustSql($FldVal, $dbid) . \",%'\", $dbid) . \" OR \" ."+"\r\n"+"		$Fld->FldExpression . ew_Like(\"'%,\" . ew_AdjustSql($FldVal, $dbid) . \",%'\", $dbid) . \" OR \" ."+"\r\n"+"		$Fld->FldExpression . ew_Like(\"'%,\" . ew_AdjustSql($FldVal, $dbid) . \"'\", $dbid);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if float format"+"\r\n"+"function ew_IsFloatFormat($FldType) {"+"\r\n"+"	return ($FldType == 4 || $FldType == 5 || $FldType == 131 || $FldType == 6);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get search SQL"+"\r\n"+"function ew_GetSearchSql(&$Fld, $FldVal, $FldOpr, $FldCond, $FldVal2, $FldOpr2, $dbid) {"+"\r\n"+"	$sSql = \"\";"+"\r\n"+"	$virtual = ($Fld->FldIsVirtual && $Fld->FldVirtualSearch);"+"\r\n"+"	$sFldExpression = ($virtual) ? $Fld->FldVirtualExpression : $Fld->FldExpression;"+"\r\n"+"	$FldDataType = $Fld->FldDataType;"+"\r\n"+"	if (ew_IsFloatFormat($Fld->FldType)) {"+"\r\n"+"		$FldVal = ew_StrToFloat($FldVal);"+"\r\n"+"		$FldVal2 = ew_StrToFloat($FldVal2);"+"\r\n"+"	}"+"\r\n"+"	if ($virtual)"+"\r\n"+"		$FldDataType = EW_DATATYPE_STRING;"+"\r\n"+"	if ($FldDataType == EW_DATATYPE_NUMBER) { // Fix wrong operator"+"\r\n"+"		if ($FldOpr == \"LIKE\" || $FldOpr == \"STARTS WITH\" || $FldOpr == \"ENDS WITH\") {"+"\r\n"+"			$FldOpr = \"=\";"+"\r\n"+"		} elseif ($FldOpr == \"NOT LIKE\") {"+"\r\n"+"			$FldOpr = \"<>\";"+"\r\n"+"		}"+"\r\n"+"		if ($FldOpr2 == \"LIKE\" || $FldOpr2 == \"STARTS WITH\" || $FldOpr2 == \"ENDS WITH\") {"+"\r\n"+"			$FldOpr2 = \"=\";"+"\r\n"+"		} elseif ($FldOpr2 == \"NOT LIKE\") {"+"\r\n"+"			$FldOpr2 = \"<>\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if ($FldOpr == \"BETWEEN\") {"+"\r\n"+"		$IsValidValue = ($FldDataType <> EW_DATATYPE_NUMBER) ||"+"\r\n"+"			($FldDataType == EW_DATATYPE_NUMBER && is_numeric($FldVal) && is_numeric($FldVal2));"+"\r\n"+"		if ($FldVal <> \"\" && $FldVal2 <> \"\" && $IsValidValue)"+"\r\n"+"			$sSql = $sFldExpression . \" BETWEEN \" . ew_QuotedValue($FldVal, $FldDataType, $dbid) ."+"\r\n"+"				\" AND \" . ew_QuotedValue($FldVal2, $FldDataType, $dbid);"+"\r\n"+"	} else {"+"\r\n"+"		// Handle first value"+"\r\n"+"		if ($FldVal == EW_NULL_VALUE || $FldOpr == \"IS NULL\") {"+"\r\n"+"			$sSql = $Fld->FldExpression . \" IS NULL\";"+"\r\n"+"		} elseif ($FldVal == EW_NOT_NULL_VALUE || $FldOpr == \"IS NOT NULL\") {"+"\r\n"+"			$sSql = $Fld->FldExpression . \" IS NOT NULL\";"+"\r\n"+"		} else {"+"\r\n"+"			$IsValidValue = ($FldDataType <> EW_DATATYPE_NUMBER) ||"+"\r\n"+"				($FldDataType == EW_DATATYPE_NUMBER && is_numeric($FldVal));"+"\r\n"+"			if ($FldVal <> \"\" && $IsValidValue && ew_IsValidOpr($FldOpr, $FldDataType)) {"+"\r\n"+"				$sSql = $sFldExpression . ew_SearchString($FldOpr, $FldVal, $FldDataType, $dbid);"+"\r\n"+"				if ($Fld->FldDataType == EW_DATATYPE_BOOLEAN && $FldVal == $Fld->FalseValue && $FldOpr == \"=\")"+"\r\n"+"					$sSql = \"(\" . $sSql . \" OR \" . $sFldExpression . \" IS NULL)\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		// Handle second value"+"\r\n"+"		$sSql2 = \"\";"+"\r\n"+"		if ($FldVal2 == EW_NULL_VALUE || $FldOpr2 == \"IS NULL\") {"+"\r\n"+"			$sSql2 = $Fld->FldExpression . \" IS NULL\";"+"\r\n"+"		} elseif ($FldVal2 == EW_NOT_NULL_VALUE || $FldOpr2 == \"IS NOT NULL\") {"+"\r\n"+"			$sSql2 = $Fld->FldExpression . \" IS NOT NULL\";"+"\r\n"+"		} else {"+"\r\n"+"			$IsValidValue = ($FldDataType <> EW_DATATYPE_NUMBER) ||"+"\r\n"+"				($FldDataType == EW_DATATYPE_NUMBER && is_numeric($FldVal2));"+"\r\n"+"			if ($FldVal2 <> \"\" && $IsValidValue && ew_IsValidOpr($FldOpr2, $FldDataType)) {"+"\r\n"+"				$sSql2 = $sFldExpression . ew_SearchString($FldOpr2, $FldVal2, $FldDataType, $dbid);"+"\r\n"+"				if ($Fld->FldDataType == EW_DATATYPE_BOOLEAN && $FldVal2 == $Fld->FalseValue && $FldOpr2 == \"=\")"+"\r\n"+"					$sSql2 = \"(\" . $sSql2 . \" OR \" . $sFldExpression . \" IS NULL)\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		// Combine SQL"+"\r\n"+"		if ($sSql2 <> \"\") {"+"\r\n"+"			if ($sSql <> \"\")"+"\r\n"+"				$sSql = \"(\" . $sSql . \" \" . (($FldCond == \"OR\") ? \"OR\" : \"AND\") . \" \" . $sSql2 . \")\";"+"\r\n"+"			else"+"\r\n"+"				$sSql = $sSql2;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return $sSql;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return search string"+"\r\n"+"function ew_SearchString($FldOpr, $FldVal, $FldType, $dbid) {"+"\r\n"+"	if ($FldVal == EW_NULL_VALUE || $FldOpr == \"IS NULL\") {"+"\r\n"+"		return \" IS NULL\";"+"\r\n"+"	} elseif ($FldVal == EW_NOT_NULL_VALUE || $FldOpr == \"IS NOT NULL\") {"+"\r\n"+"		return \" IS NOT NULL\";"+"\r\n"+"	} elseif ($FldOpr == \"LIKE\") {"+"\r\n"+"		return ew_Like(ew_QuotedValue(\"%$FldVal%\", $FldType, $dbid), $dbid);"+"\r\n"+"	} elseif ($FldOpr == \"NOT LIKE\") {"+"\r\n"+"		return \" NOT \" . ew_Like(ew_QuotedValue(\"%$FldVal%\", $FldType, $dbid), $dbid);"+"\r\n"+"	} elseif ($FldOpr == \"STARTS WITH\") {"+"\r\n"+"		return ew_Like(ew_QuotedValue(\"$FldVal%\", $FldType, $dbid), $dbid);"+"\r\n"+"	} elseif ($FldOpr == \"ENDS WITH\") {"+"\r\n"+"		return ew_Like(ew_QuotedValue(\"%$FldVal\", $FldType, $dbid), $dbid);"+"\r\n"+"	} else {"+"\r\n"+"		return \" $FldOpr \" . ew_QuotedValue($FldVal, $FldType, $dbid);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if valid operator"+"\r\n"+"function ew_IsValidOpr($Opr, $FldType) {"+"\r\n"+"	$Valid = ($Opr == \"=\" || $Opr == \"<\" || $Opr == \"<=\" ||"+"\r\n"+"		$Opr == \">\" || $Opr == \">=\" || $Opr == \"<>\");"+"\r\n"+"	if ($FldType == EW_DATATYPE_STRING || $FldType == EW_DATATYPE_MEMO || $FldType == EW_DATATYPE_XML)"+"\r\n"+"		$Valid = ($Valid || $Opr == \"LIKE\" || $Opr == \"NOT LIKE\" ||	$Opr == \"STARTS WITH\" || $Opr == \"ENDS WITH\");"+"\r\n"+"	return $Valid;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Quote table/field name based on dbid"+"\r\n"+"function ew_QuotedName($Name, $DbId = 0) {"+"\r\n"+"	global $EW_CONN;"+"\r\n"+"	$db = @$EW_CONN[$DbId];"+"\r\n"+"	if ($db) {"+"\r\n"+"		$qs = $db[\"qs\"];"+"\r\n"+"		$qe = $db[\"qe\"];"+"\r\n"+"		$Name = str_replace($qe, $qe . $qe, $Name);"+"\r\n"+"		return $qs . $Name . $qe;"+"\r\n"+"	} else { // Use default quotes"+"\r\n"+"		$Name = str_replace(EW_DB_QUOTE_END, EW_DB_QUOTE_END . EW_DB_QUOTE_END, $Name);"+"\r\n"+"		return EW_DB_QUOTE_START . $Name . EW_DB_QUOTE_END;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Quote field value based on dbid"+"\r\n"+"function ew_QuotedValue($Value, $FldType, $DbId = 0) {"+"\r\n"+"	if (is_null($Value))"+"\r\n"+"		return \"NULL\";"+"\r\n"+"	$dbtype = ew_GetConnectionType($DbId);"+"\r\n"+"	switch ($FldType) {"+"\r\n"+"		case EW_DATATYPE_STRING:"+"\r\n"+"		case EW_DATATYPE_MEMO:"+"\r\n"+"			if (EW_REMOVE_XSS)"+"\r\n"+"				$Value = ew_RemoveXSS($Value);"+"\r\n"+"			if ($dbtype == \"MSSQL\")"+"\r\n"+"				return \"N'\" . ew_AdjustSql($Value, $DbId) . \"'\";"+"\r\n"+"			else"+"\r\n"+"				return \"'\" . ew_AdjustSql($Value, $DbId) . \"'\";"+"\r\n"+"		case EW_DATATYPE_TIME:"+"\r\n"+"			if (EW_REMOVE_XSS)"+"\r\n"+"				$Value = ew_RemoveXSS($Value);"+"\r\n"+"			return \"'\" . ew_AdjustSql($Value, $DbId) . \"'\";"+"\r\n"+"		case EW_DATATYPE_XML:"+"\r\n"+"			return \"'\" . ew_AdjustSql($Value, $DbId) . \"'\";"+"\r\n"+"		case EW_DATATYPE_BLOB:"+"\r\n"+"			if ($dbtype == \"MYSQL\") {"+"\r\n"+"				return \"'\" . addslashes($Value) . \"'\";"+"\r\n"+"			} elseif ($dbtype == \"POSTGRESQL\") {"+"\r\n"+"				return \"'\" . Conn($DbId)->BlobEncode($Value) . \"'\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"0x\" . bin2hex($Value);"+"\r\n"+"			}"+"\r\n"+"		case EW_DATATYPE_DATE:"+"\r\n"+"			if ($dbtype == \"ACCESS\")"+"\r\n"+"				return \"#\" . ew_AdjustSql($Value, $DbId) . \"#\";"+"\r\n"+"			else"+"\r\n"+"				return \"'\" . ew_AdjustSql($Value, $DbId) . \"'\";"+"\r\n"+"		case EW_DATATYPE_GUID:"+"\r\n"+"			if ($dbtype == \"ACCESS\") {"+"\r\n"+"				if (strlen($Value) == 38) {"+"\r\n"+"					return \"{guid \" . $Value . \"}\";"+"\r\n"+"				} elseif (strlen($Value) == 36) {"+"\r\n"+"					return \"{guid {\" . $Value . \"}}\";"+"\r\n"+"				}"+"\r\n"+"			} else {"+"\r\n"+"				return \"'\" . $Value . \"'\";"+"\r\n"+"			}"+"\r\n"+"		case EW_DATATYPE_BOOLEAN:"+"\r\n"+"			if ($dbtype == \"MYSQL\" || $dbtype == \"POSTGRESQL\")"+"\r\n"+"				return \"'\" . $Value . \"'\"; // 'Y'|'N' or 'y'|'n' or '1'|'0' or 't'|'f'"+"\r\n"+"			else"+"\r\n"+"				return $Value;"+"\r\n"+"		default:"+"\r\n"+"			return $Value;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert different data type value"+"\r\n"+"function ew_Conv($v, $t) {"+"\r\n"+""+"\r\n"+"	switch ($t) {"+"\r\n"+"	case 2:"+"\r\n"+"	case 3:"+"\r\n"+"	case 16:"+"\r\n"+"	case 17:"+"\r\n"+"	case 18:"+"\r\n"+"	case 19: // If adSmallInt/adInteger/adTinyInt/adUnsignedTinyInt/adUnsignedSmallInt"+"\r\n"+"		return (is_null($v)) ? NULL : intval($v);"+"\r\n"+"	case 4:"+"\r\n"+"	Case 5:"+"\r\n"+"	case 6:"+"\r\n"+"	case 131:"+"\r\n"+"	case 139: // If adSingle/adDouble/adCurrency/adNumeric/adVarNumeric"+"\r\n"+"		return (is_null($v)) ? NULL : (float)$v;"+"\r\n"+"	default:"+"\r\n"+"		return (is_null($v)) ? NULL : $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert string to float"+"\r\n"+"function ew_StrToFloat($v) {"+"\r\n"+"	global $DEFAULT_THOUSANDS_SEP, $DEFAULT_DECIMAL_POINT;"+"\r\n"+"	$v = str_replace(\" \", \"\", $v);"+"\r\n"+"	$v = str_replace(array($DEFAULT_THOUSANDS_SEP, $DEFAULT_DECIMAL_POINT), array(\"\", \".\"), $v);"+"\r\n"+"	return $v;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Concat string"+"\r\n"+"function ew_Concat($str1, $str2, $sep) {"+"\r\n"+"	$str1 = trim($str1);"+"\r\n"+"	$str2 = trim($str2);"+"\r\n"+"	if ($str1 <> \"\" && $sep <> \"\" && substr($str1, -1 * strlen($sep)) <> $sep)"+"\r\n"+"		$str1 .= $sep;"+"\r\n"+"	return $str1 . $str2;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Contains a substring (case-sensitive)"+"\r\n"+"function ew_ContainsStr($haystack, $needle, $offset = 0) {"+"\r\n"+"	return strpos($haystack, $needle, $offset) !== FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Contains a substring (case-insensitive)"+"\r\n"+"function ew_ContainsText($haystack, $needle, $offset = 0) {"+"\r\n"+"	return stripos($haystack, $needle, $offset) !== FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Starts with a substring (case-sensitive)"+"\r\n"+"function ew_StartsStr($needle, $haystack) {"+"\r\n"+"	return strpos($haystack, $needle) === 0;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Starts with a substring (case-insensitive)"+"\r\n"+"function ew_StartsText($needle, $haystack) {"+"\r\n"+"	return stripos($haystack, $needle) === 0;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Ends with a substring (case-sensitive)"+"\r\n"+"function ew_EndsStr($needle, $haystack) {"+"\r\n"+"	return strrpos($haystack, $needle) === strlen($haystack) - strlen($needle);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Ends with a substring (case-insensitive)"+"\r\n"+"function ew_EndsText($needle, $haystack) {"+"\r\n"+"	return strripos($haystack, $needle) === strlen($haystack) - strlen($needle);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Same trimmed strings (case-sensitive)"+"\r\n"+"function ew_SameStr($str1, $str2) {"+"\r\n"+"	return strcmp(trim($str1), trim($str2)) === 0;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Same trimmed strings (case-insensitive)"+"\r\n"+"function ew_SameText($str1, $str2) {"+"\r\n"+"	return strcasecmp(trim($str1), trim($str2)) === 0;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write message to debug file"+"\r\n"+"function ew_Trace($msg) {"+"\r\n"+"	$filename = \"debug.txt\";"+"\r\n"+"	if (!$handle = fopen($filename, 'a')) exit;"+"\r\n"+"	if (is_writable($filename)) fwrite($handle, $msg . \"\\n\");"+"\r\n"+"	fclose($handle);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Compare values with special handling for null values"+"\r\n"+"function ew_CompareValue($v1, $v2) {"+"\r\n"+"	if (is_null($v1) && is_null($v2)) {"+"\r\n"+"		return TRUE;"+"\r\n"+"	} elseif (is_null($v1) || is_null($v2)) {"+"\r\n"+"		return FALSE;"+"\r\n"+"//	} elseif (is_float($v1) || is_float($v2)) {"+"\r\n"+"//		return (float)$v1 == (float)$v2;"+"\r\n"+"	} else {"+"\r\n"+"		return ($v1 == $v2);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if boolean value is TRUE"+"\r\n"+"function ew_ConvertToBool($value) {"+"\r\n"+"	return ($value === TRUE || strval($value) == \"1\" ||"+"\r\n"+"		strtolower(strval($value)) == \"y\" || strtolower(strval($value)) == \"t\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Strip slashes"+"\r\n"+"function ew_StripSlashes($value) {"+"\r\n"+"	if (!get_magic_quotes_gpc()) return $value;"+"\r\n"+"	if (is_array($value)) { "+"\r\n"+"		return array_map('ew_StripSlashes', $value);"+"\r\n"+"	} else {"+"\r\n"+"		return stripslashes($value);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Add message"+"\r\n"+"function ew_AddMessage(&$msg, $msgtoadd, $sep = \"<br>\") {"+"\r\n"+"	if (strval($msgtoadd) <> \"\") {"+"\r\n"+"		if (strval($msg) <> \"\")"+"\r\n"+"			$msg .= $sep;"+"\r\n"+"		$msg .= $msgtoadd;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Add filter"+"\r\n"+"function ew_AddFilter(&$filter, $newfilter) {"+"\r\n"+"	if (trim($newfilter) == \"\") return;"+"\r\n"+"	if (trim($filter) <> \"\") {"+"\r\n"+"		$filter = \"(\" . $filter . \") AND (\" . $newfilter . \")\";"+"\r\n"+"	} else {"+"\r\n"+"		$filter = $newfilter;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Addjust SQL based on dbid"+"\r\n"+"function ew_AdjustSql($val, $dbid = 0) {"+"\r\n"+"	$dbtype = ew_GetConnectionType($dbid);"+"\r\n"+"	if ($dbtype == \"MYSQL\") {"+"\r\n"+"		$val = addslashes(trim($val));"+"\r\n"+"	} else {"+"\r\n"+"		$val = str_replace(\"'\", \"''\", trim($val)); // Adjust for single quote"+"\r\n"+"	}"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Build SELECT SQL based on different sql part"+"\r\n"+"function ew_BuildSelectSql($sSelect, $sWhere, $sGroupBy, $sHaving, $sOrderBy, $sFilter, $sSort) {"+"\r\n"+"	$sDbWhere = $sWhere;"+"\r\n"+"	ew_AddFilter($sDbWhere, $sFilter);"+"\r\n"+"	$sDbOrderBy = $sOrderBy;"+"\r\n"+"	if ($sSort <> \"\") $sDbOrderBy = $sSort;"+"\r\n"+"	$sSql = $sSelect;"+"\r\n"+"	if ($sDbWhere <> \"\") $sSql .= \" WHERE \" . $sDbWhere;"+"\r\n"+"	if ($sGroupBy <> \"\") $sSql .= \" GROUP BY \" . $sGroupBy;"+"\r\n"+"	if ($sHaving <> \"\") $sSql .= \" HAVING \" . $sHaving;"+"\r\n"+"	if ($sDbOrderBy <> \"\") $sSql .= \" ORDER BY \" . $sDbOrderBy;"+"\r\n"+"	return $sSql;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the row(s) as JSON, first row only by default"+"\r\n"+"function ew_ExecuteJson($SQL, $FirstOnly = TRUE, $c = NULL) {"+"\r\n"+"	if (is_null($c) && is_object($FirstOnly) && method_exists($FirstOnly, \"Execute\")) // ew_ExecuteJson($SQL, $c)"+"\r\n"+"		$c = $FirstOnly;"+"\r\n"+"	$rs = ew_LoadRecordset($SQL, $c);"+"\r\n"+"	if ($rs && !$rs->EOF && $rs->FieldCount() > 0) {"+"\r\n"+"		$res = ($FirstOnly) ? $rs->fields : $rs->GetRows();"+"\r\n"+"		$rs->Close();"+"\r\n"+"		return json_encode($res);"+"\r\n"+"	}"+"\r\n"+"	return \"false\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the row(s) as JSON array (no keys)"+"\r\n"+"function ew_ExecuteJsonArray($SQL, $c = NULL) {"+"\r\n"+"	$rs = ew_LoadRecordset($SQL, $c);"+"\r\n"+"	if ($rs && !$rs->EOF && $rs->FieldCount() > 0) {"+"\r\n"+"		$res = $rs->GetRows();"+"\r\n"+"		$rs->Close();"+"\r\n"+"		return ew_ArrayToJson($res);"+"\r\n"+"	}"+"\r\n"+"	return \"false\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write audit trail"+"\r\n"+"function ew_WriteAuditTrail($pfx, $dt, $script, $usr, $action, $table, $field, $keyvalue, $oldvalue, $newvalue) {"+"\r\n"+""+"\r\n"+"	$usrwrk = $usr;"+"\r\n"+"	if ($usrwrk == \"\") $usrwrk = \"-1\"; // Assume Administrator if no user"+"\r\n"+"	"+"\r\n"+"	if (EW_AUDIT_TRAIL_TO_DATABASE)"+"\r\n"+"		$rsnew = array(EW_AUDIT_TRAIL_FIELD_NAME_DATETIME => $dt, EW_AUDIT_TRAIL_FIELD_NAME_SCRIPT => $script, EW_AUDIT_TRAIL_FIELD_NAME_USER => $usrwrk, EW_AUDIT_TRAIL_FIELD_NAME_ACTION => $action,"+"\r\n"+"			EW_AUDIT_TRAIL_FIELD_NAME_TABLE => $table, EW_AUDIT_TRAIL_FIELD_NAME_FIELD => $field, EW_AUDIT_TRAIL_FIELD_NAME_KEYVALUE => $keyvalue, EW_AUDIT_TRAIL_FIELD_NAME_OLDVALUE => $oldvalue, EW_AUDIT_TRAIL_FIELD_NAME_NEWVALUE => $newvalue);"+"\r\n"+"	else"+"\r\n"+"		$rsnew = array(\"datetime\" => $dt, \"script\" => $script, \"user\" => $usrwrk, \"action\" => $action,"+"\r\n"+"			\"table\" => $table, \"field\" => $field, \"keyvalue\" => $keyvalue, \"oldvalue\" => $oldvalue, \"newvalue\" => $newvalue);"+"\r\n"+""+"\r\n"+"	";
ewAr[151] = ""+"\r\n"+"	// Call AuditTrail Inserting event"+"\r\n"+"	$bWriteAuditTrail = AuditTrail_Inserting($rsnew);"+"\r\n"+"	";
ewAr[152] = ""+"\r\n"+"	$bWriteAuditTrail = TRUE;"+"\r\n"+"	";
ewAr[153] = ""+"\r\n"+""+"\r\n"+"	if ($bWriteAuditTrail) {"+"\r\n"+""+"\r\n"+"		if (EW_AUDIT_TRAIL_TO_DATABASE) {"+"\r\n"+""+"\r\n"+"			$tblcls = \"c\" . EW_AUDIT_TRAIL_TABLE_VAR;"+"\r\n"+"			$tbl = new $tblcls;"+"\r\n"+"			if ($tbl->Row_Inserting(NULL, $rsnew)) {"+"\r\n"+"				if ($tbl->Insert($rsnew))"+"\r\n"+"					$tbl->Row_Inserted(NULL, $rsnew);"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		} else {"+"\r\n"+""+"\r\n"+"			$sTab = \"\\t\";"+"\r\n"+"			$sHeader = \"date/time\" . $sTab . \"script\" . $sTab .	\"user\" . $sTab ."+"\r\n"+"				\"action\" . $sTab . \"table\" . $sTab . \"field\" . $sTab ."+"\r\n"+"				\"key value\" . $sTab . \"old value\" . $sTab . \"new value\";"+"\r\n"+"			$sMsg = $rsnew[\"datetime\"] . $sTab . $rsnew[\"script\"] . $sTab . $rsnew[\"user\"] . $sTab . "+"\r\n"+"					$rsnew[\"action\"] . $sTab . $rsnew[\"table\"] . $sTab . $rsnew[\"field\"] . $sTab ."+"\r\n"+"					$rsnew[\"keyvalue\"] . $sTab . $rsnew[\"oldvalue\"] . $sTab . $rsnew[\"newvalue\"];"+"\r\n"+"			$sFolder = EW_AUDIT_TRAIL_PATH;"+"\r\n"+"			$sFn = $pfx . \"_\" . date(\"Ymd\") . \".txt\";"+"\r\n"+""+"\r\n"+"			$filename = ew_UploadPathEx(TRUE, $sFolder) . $sFn;"+"\r\n"+""+"\r\n"+"			if (file_exists($filename)) {"+"\r\n"+"				$fileHandler = fopen($filename, \"a+b\");"+"\r\n"+"			} else {"+"\r\n"+"				$fileHandler = fopen($filename, \"a+b\");"+"\r\n"+"				fwrite($fileHandler,$sHeader.\"\\r\\n\");"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			fwrite($fileHandler, $sMsg.\"\\r\\n\");"+"\r\n"+"			fclose($fileHandler);"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"";
ewAr[154] = ""+"\r\n"+""+"\r\n"+"// Unformat date time based on format type"+"\r\n"+"function ew_UnFormatDateTime($dt, $namedformat) {"+"\r\n"+"	if (preg_match('/^([0-9]{4})-([0][1-9]|[1][0-2])-([0][1-9]|[1|2][0-9]|[3][0|1])( (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]))?$/', $dt))"+"\r\n"+"		return $dt;"+"\r\n"+"	$dt = trim($dt);"+"\r\n"+"	while (strpos($dt, \"  \") !== FALSE) $dt = str_replace(\"  \", \" \", $dt);"+"\r\n"+"	$arDateTime = explode(\" \", $dt);"+"\r\n"+"	if (count($arDateTime) == 0) return $dt;"+"\r\n"+"	if ($namedformat == 0 || $namedformat == 1 || $namedformat == 2 || $namedformat == 8) {"+"\r\n"+"		$arDefFmt = explode(EW_DATE_SEPARATOR, EW_DEFAULT_DATE_FORMAT);"+"\r\n"+"		if ($arDefFmt[0] == \"yyyy\") {"+"\r\n"+"			$namedformat = 9;"+"\r\n"+"		} elseif ($arDefFmt[0] == \"mm\") {"+"\r\n"+"			$namedformat = 10;"+"\r\n"+"		} elseif ($arDefFmt[0] == \"dd\") {"+"\r\n"+"			$namedformat = 11;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$arDatePt = explode(EW_DATE_SEPARATOR, $arDateTime[0]);"+"\r\n"+"	if (count($arDatePt) == 3) {"+"\r\n"+"		switch ($namedformat) {"+"\r\n"+"		case 5:"+"\r\n"+"		case 9: //yyyymmdd"+"\r\n"+"			if (ew_CheckDate($arDateTime[0])) {"+"\r\n"+"				list($year, $month, $day) = $arDatePt;"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 6:"+"\r\n"+"		case 10: //mmddyyyy"+"\r\n"+"			if (ew_CheckUSDate($arDateTime[0])) {"+"\r\n"+"				list($month, $day, $year) = $arDatePt;"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 7:"+"\r\n"+"		case 11: //ddmmyyyy"+"\r\n"+"			if (ew_CheckEuroDate($arDateTime[0])) {"+"\r\n"+"				list($day, $month, $year) = $arDatePt;"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 12:"+"\r\n"+"		case 15: //yymmdd"+"\r\n"+"			if (ew_CheckShortDate($arDateTime[0])) {"+"\r\n"+"				list($year, $month, $day) = $arDatePt;"+"\r\n"+"				$year = ew_UnformatYear($year);"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 13:"+"\r\n"+"		case 16: //mmddyy"+"\r\n"+"			if (ew_CheckShortUSDate($arDateTime[0])) {"+"\r\n"+"				list($month, $day, $year) = $arDatePt;"+"\r\n"+"				$year = ew_UnformatYear($year);"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 14:"+"\r\n"+"		case 17: //ddmmyy"+"\r\n"+"			if (ew_CheckShortEuroDate($arDateTime[0])) {"+"\r\n"+"				list($day, $month, $year) = $arDatePt;"+"\r\n"+"				$year = ew_UnformatYear($year);"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		default:"+"\r\n"+"			return $dt;"+"\r\n"+"		}"+"\r\n"+"		return $year . \"-\" . str_pad($month, 2, \"0\", STR_PAD_LEFT) . \"-\" ."+"\r\n"+"			str_pad($day, 2, \"0\", STR_PAD_LEFT) ."+"\r\n"+"			((count($arDateTime) > 1) ? \" \" . $arDateTime[1] : \"\");"+"\r\n"+"	} else {"+"\r\n"+"		return $dt;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Format a timestamp, datetime, date or time field from MySQL"+"\r\n"+"// $namedformat:"+"\r\n"+"// 0 - General Date"+"\r\n"+"// 1 - Long Date"+"\r\n"+"// 2 - Short Date (Default)"+"\r\n"+"// 3 - Long Time"+"\r\n"+"// 4 - Short Time (hh:mm:ss)"+"\r\n"+"// 5 - Short Date (yyyy/mm/dd)"+"\r\n"+"// 6 - Short Date (mm/dd/yyyy)"+"\r\n"+"// 7 - Short Date (dd/mm/yyyy)"+"\r\n"+"// 8 - Short Date (Default) + Short Time (if not 00:00:00)"+"\r\n"+"// 9 - Short Date (yyyy/mm/dd) + Short Time (hh:mm:ss)"+"\r\n"+"// 10 - Short Date (mm/dd/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"// 11 - Short Date (dd/mm/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"// 12 - Short Date - 2 digit year (yy/mm/dd)"+"\r\n"+"// 13 - Short Date - 2 digit year (mm/dd/yy)"+"\r\n"+"// 14 - Short Date - 2 digit year (dd/mm/yy)"+"\r\n"+"// 15 - Short Date - 2 digit year (yy/mm/dd) + Short Time (hh:mm:ss)"+"\r\n"+"// 16 - Short Date (mm/dd/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"// 17 - Short Date (dd/mm/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"function ew_FormatDateTime($ts, $namedformat) {"+"\r\n"+"	if (is_numeric($ts)) // Timestamp"+"\r\n"+"	{"+"\r\n"+"		switch (strlen($ts)) {"+"\r\n"+"			case 14:"+"\r\n"+"				$patt = '/(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 12:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 10:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 8:"+"\r\n"+"				$patt = '/(\\d{4})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 6:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 4:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 2:"+"\r\n"+"				$patt = '/(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			default:"+"\r\n"+"				return $ts;"+"\r\n"+"		}"+"\r\n"+"		if ((isset($patt))&&(preg_match($patt, $ts, $matches)))"+"\r\n"+"		{"+"\r\n"+"			$year = $matches[1];"+"\r\n"+"			$month = @$matches[2];"+"\r\n"+"			$day = @$matches[3];"+"\r\n"+"			$hour = @$matches[4];"+"\r\n"+"			$min = @$matches[5];"+"\r\n"+"			$sec = @$matches[6];"+"\r\n"+"		}"+"\r\n"+"		if (($namedformat==0)&&(strlen($ts)<10)) $namedformat = 2;"+"\r\n"+"	}"+"\r\n"+"	elseif (is_string($ts))"+"\r\n"+"	{"+"\r\n"+"		if (preg_match('/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/', $ts, $matches)) // Datetime"+"\r\n"+"		{"+"\r\n"+"			$year = $matches[1];"+"\r\n"+"			$month = $matches[2];"+"\r\n"+"			$day = $matches[3];"+"\r\n"+"			$hour = $matches[4];"+"\r\n"+"			$min = $matches[5];"+"\r\n"+"			$sec = $matches[6];"+"\r\n"+"		}"+"\r\n"+"		elseif (preg_match('/(\\d{4})-(\\d{2})-(\\d{2})/', $ts, $matches)) // Date"+"\r\n"+"		{"+"\r\n"+"			$year = $matches[1];"+"\r\n"+"			$month = $matches[2];"+"\r\n"+"			$day = $matches[3];"+"\r\n"+"			if ($namedformat==0) $namedformat = 2;"+"\r\n"+"		}"+"\r\n"+"		elseif (preg_match('/(^|\\s)(\\d{2}):(\\d{2}):(\\d{2})/', $ts, $matches)) // Time"+"\r\n"+"		{"+"\r\n"+"			$hour = $matches[2];"+"\r\n"+"			$min = $matches[3];"+"\r\n"+"			$sec = $matches[4];"+"\r\n"+"			if (($namedformat==0)||($namedformat==1)) $namedformat = 3;"+"\r\n"+"			if ($namedformat==2) $namedformat = 4;"+"\r\n"+"		}"+"\r\n"+"		else"+"\r\n"+"		{"+"\r\n"+"			return $ts;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	else"+"\r\n"+"	{"+"\r\n"+"		return $ts;"+"\r\n"+"	}"+"\r\n"+"	if (!isset($year)) $year = 0; // Dummy value for times"+"\r\n"+"	if (!isset($month)) $month = 1;"+"\r\n"+"	if (!isset($day)) $day = 1;"+"\r\n"+"	if (!isset($hour)) $hour = 0;"+"\r\n"+"	if (!isset($min)) $min = 0;"+"\r\n"+"	if (!isset($sec)) $sec = 0;"+"\r\n"+"	$uts = @mktime($hour, $min, $sec, $month, $day, $year);"+"\r\n"+"	if ($uts < 0 || $uts == FALSE || // Failed to convert"+"\r\n"+"		(intval($year) == 0 && intval($month) == 0 && intval($day) == 0)) {"+"\r\n"+"		$year = substr_replace(\"0000\", $year, -1 * strlen($year));"+"\r\n"+"		$month = substr_replace(\"00\", $month, -1 * strlen($month));"+"\r\n"+"		$day = substr_replace(\"00\", $day, -1 * strlen($day));"+"\r\n"+"		$hour = substr_replace(\"00\", $hour, -1 * strlen($hour));"+"\r\n"+"		$min = substr_replace(\"00\", $min, -1 * strlen($min));"+"\r\n"+"		$sec = substr_replace(\"00\", $sec, -1 * strlen($sec));"+"\r\n"+"		$DefDateFormat = str_replace(\"yyyy\", $year, EW_DEFAULT_DATE_FORMAT);"+"\r\n"+"		$DefDateFormat = str_replace(\"mm\", $month, $DefDateFormat);"+"\r\n"+"		$DefDateFormat = str_replace(\"dd\", $day, $DefDateFormat);"+"\r\n"+"		switch ($namedformat) {"+"\r\n"+"			case 0:"+"\r\n"+"				return $DefDateFormat.\" $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 1://unsupported, return general date"+"\r\n"+"				return $DefDateFormat.\" $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 2:"+"\r\n"+"				return $DefDateFormat;"+"\r\n"+"				break;"+"\r\n"+"			case 3:"+"\r\n"+"				if (intval($hour)==0)"+"\r\n"+"					return \"12:$min:$sec AM\";"+"\r\n"+"				elseif (intval($hour)>0 && intval($hour)<12)"+"\r\n"+"					return \"$hour:$min:$sec AM\";"+"\r\n"+"				elseif (intval($hour)==12)"+"\r\n"+"					return \"$hour:$min:$sec PM\";"+"\r\n"+"				elseif (intval($hour)>12 && intval($hour)<=23)"+"\r\n"+"					return (intval($hour)-12).\":$min:$sec PM\";"+"\r\n"+"				else"+"\r\n"+"					return \"$hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 4:"+"\r\n"+"				return \"$hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 5:"+"\r\n"+"				return \"$year\". EW_DATE_SEPARATOR . \"$month\" . EW_DATE_SEPARATOR . \"$day\";"+"\r\n"+"				break;"+"\r\n"+"			case 6:"+"\r\n"+"				return \"$month\". EW_DATE_SEPARATOR .\"$day\" . EW_DATE_SEPARATOR . \"$year\";"+"\r\n"+"				break;"+"\r\n"+"			case 7:"+"\r\n"+"				return \"$day\" . EW_DATE_SEPARATOR .\"$month\" . EW_DATE_SEPARATOR . \"$year\";"+"\r\n"+"				break;"+"\r\n"+"			case 8:"+"\r\n"+"				return $DefDateFormat . (($hour == 0 && $min == 0 && $sec == 0) ? \"\" : \" $hour:$min:$sec\");"+"\r\n"+"				break;"+"\r\n"+"			case 9:"+"\r\n"+"				return \"$year\". EW_DATE_SEPARATOR . \"$month\" . EW_DATE_SEPARATOR . \"$day $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 10:"+"\r\n"+"				return \"$month\". EW_DATE_SEPARATOR .\"$day\" . EW_DATE_SEPARATOR . \"$year $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 11:"+"\r\n"+"				return \"$day\" . EW_DATE_SEPARATOR .\"$month\" . EW_DATE_SEPARATOR . \"$year $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 12:"+"\r\n"+"				return substr($year,-2) . EW_DATE_SEPARATOR . $month . EW_DATE_SEPARATOR . $day;"+"\r\n"+"				break;"+"\r\n"+"			case 13:"+"\r\n"+"				return $month . EW_DATE_SEPARATOR . $day . EW_DATE_SEPARATOR . substr($year,-2);"+"\r\n"+"				break;"+"\r\n"+"			case 14:"+"\r\n"+"				return $day . EW_DATE_SEPARATOR . $month . EW_DATE_SEPARATOR . substr($year,-2);"+"\r\n"+"				break;"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		$DefDateFormat = str_replace(\"yyyy\", $year, EW_DEFAULT_DATE_FORMAT);"+"\r\n"+"		$DefDateFormat = str_replace(\"mm\", $month, $DefDateFormat);"+"\r\n"+"		$DefDateFormat = str_replace(\"dd\", $day, $DefDateFormat);"+"\r\n"+"		switch ($namedformat) {"+"\r\n"+"			case 0:"+"\r\n"+"				return strftime($DefDateFormat.\" %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 1:"+"\r\n"+"				return strftime(\"%A, %B %d, %Y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 2:"+"\r\n"+"				return strftime($DefDateFormat, $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 3:"+"\r\n"+"				return strftime(\"%I:%M:%S %p\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 4:"+"\r\n"+"				return strftime(\"%H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 5:"+"\r\n"+"				return strftime(\"%Y\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%d\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 6:"+"\r\n"+"				return strftime(\"%m\" . EW_DATE_SEPARATOR . \"%d\" . EW_DATE_SEPARATOR . \"%Y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 7:"+"\r\n"+"				return strftime(\"%d\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%Y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 8:"+"\r\n"+"				return strftime($DefDateFormat . (($hour == 0 && $min == 0 && $sec == 0) ? \"\" : \" %H:%M:%S\"), $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 9:"+"\r\n"+"				return strftime(\"%Y\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%d %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 10:"+"\r\n"+"				return strftime(\"%m\" . EW_DATE_SEPARATOR . \"%d\" . EW_DATE_SEPARATOR . \"%Y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 11:"+"\r\n"+"				return strftime(\"%d\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%Y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 12:"+"\r\n"+"				return strftime(\"%y\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%d\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 13:"+"\r\n"+"				return strftime(\"%m\" . EW_DATE_SEPARATOR . \"%d\" . EW_DATE_SEPARATOR . \"%y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 14:"+"\r\n"+"				return strftime(\"%d\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 15:"+"\r\n"+"				return strftime(\"%y\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%d %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 16:"+"\r\n"+"				return strftime(\"%m\" . EW_DATE_SEPARATOR . \"%d\" . EW_DATE_SEPARATOR . \"%y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 17:"+"\r\n"+"				return strftime(\"%d\" . EW_DATE_SEPARATOR . \"%m\" . EW_DATE_SEPARATOR . \"%y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Format currency"+"\r\n"+"// Arguments: Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])"+"\r\n"+"// NumDigitsAfterDecimal is the numeric value indicating how many places to the right of the decimal are displayed"+"\r\n"+"// -1 Use Default"+"\r\n"+"// -2 Retain all values after decimal place"+"\r\n"+"// The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:"+"\r\n"+"// -1 True"+"\r\n"+"// 0 False"+"\r\n"+"// -2 Use Default"+"\r\n"+"function ew_FormatCurrency($amount, $NumDigitsAfterDecimal, $IncludeLeadingDigit = -2, $UseParensForNegativeNumbers = -2, $GroupDigits = -2) {"+"\r\n"+""+"\r\n"+"	extract($GLOBALS[\"DEFAULT_LOCALE\"]);"+"\r\n"+""+"\r\n"+"	// Check $NumDigitsAfterDecimal"+"\r\n"+"	if ($NumDigitsAfterDecimal == -2) { // Use all values after decimal point"+"\r\n"+"		$stramt = strval($amount);"+"\r\n"+"		if (strrpos($stramt, '.') >= 0)"+"\r\n"+"			$frac_digits = strlen($stramt) - strrpos($stramt, '.') - 1;"+"\r\n"+"		else"+"\r\n"+"			$frac_digits = 0;"+"\r\n"+"	} elseif ($NumDigitsAfterDecimal > -1) {"+"\r\n"+"		$frac_digits = $NumDigitsAfterDecimal;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $UseParensForNegativeNumbers"+"\r\n"+"	if ($UseParensForNegativeNumbers == -1) {"+"\r\n"+"		$n_sign_posn = 0;"+"\r\n"+"		if ($p_sign_posn == 0) {"+"\r\n"+"			$p_sign_posn = 3;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($UseParensForNegativeNumbers == 0) {"+"\r\n"+"		if ($n_sign_posn == 0)"+"\r\n"+"			$n_sign_posn = 3;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $GroupDigits"+"\r\n"+"	if ($GroupDigits == -1) {"+"\r\n"+"	} elseif ($GroupDigits == 0) {"+"\r\n"+"		$mon_thousands_sep = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start by formatting the unsigned number"+"\r\n"+"	$number = number_format(abs($amount),"+"\r\n"+"							$frac_digits,"+"\r\n"+"							$mon_decimal_point,"+"\r\n"+"							$mon_thousands_sep);"+"\r\n"+""+"\r\n"+"	// Check $IncludeLeadingDigit"+"\r\n"+"	if ($IncludeLeadingDigit == 0) {"+"\r\n"+"		if (substr($number, 0, 2) == \"0.\")"+"\r\n"+"			$number = substr($number, 1, strlen($number)-1);"+"\r\n"+"	}"+"\r\n"+"	if ($amount < 0) {"+"\r\n"+"		$sign = $negative_sign;"+"\r\n"+""+"\r\n"+"		// \"extracts\" the boolean value as an integer"+"\r\n"+"		$n_cs_precedes  = intval($n_cs_precedes  == true);"+"\r\n"+"		$n_sep_by_space = intval($n_sep_by_space == true);"+"\r\n"+"		$key = $n_cs_precedes . $n_sep_by_space . $n_sign_posn;"+"\r\n"+"	} else {"+"\r\n"+"		$sign = $positive_sign;"+"\r\n"+"		$p_cs_precedes  = intval($p_cs_precedes  == true);"+"\r\n"+"		$p_sep_by_space = intval($p_sep_by_space == true);"+"\r\n"+"		$key = $p_cs_precedes . $p_sep_by_space . $p_sign_posn;"+"\r\n"+"	}"+"\r\n"+"	$formats = array("+"\r\n"+""+"\r\n"+"	  // Currency symbol is after amount"+"\r\n"+""+"\r\n"+"	  // No space between amount and sign"+"\r\n"+"	  '000' => '(%s' . $currency_symbol . ')',"+"\r\n"+"	  '001' => $sign . '%s ' . $currency_symbol,"+"\r\n"+"	  '002' => '%s' . $currency_symbol . $sign,"+"\r\n"+"	  '003' => '%s' . $sign . $currency_symbol,"+"\r\n"+"	  '004' => '%s' . $sign . $currency_symbol,"+"\r\n"+""+"\r\n"+"	  // One space between amount and sign"+"\r\n"+"	  '010' => '(%s ' . $currency_symbol . ')',"+"\r\n"+"	  '011' => $sign . '%s ' . $currency_symbol,"+"\r\n"+"	  '012' => '%s ' . $currency_symbol . $sign,"+"\r\n"+"	  '013' => '%s ' . $sign . $currency_symbol,"+"\r\n"+"	  '014' => '%s ' . $sign . $currency_symbol,"+"\r\n"+""+"\r\n"+"	  // Currency symbol is before amount"+"\r\n"+""+"\r\n"+"	  // No space between amount and sign"+"\r\n"+"	  '100' => '(' . $currency_symbol . '%s)',"+"\r\n"+"	  '101' => $sign . $currency_symbol . '%s',"+"\r\n"+"	  '102' => $currency_symbol . '%s' . $sign,"+"\r\n"+"	  '103' => $sign . $currency_symbol . '%s',"+"\r\n"+"	  '104' => $currency_symbol . $sign . '%s',"+"\r\n"+""+"\r\n"+"	  // One space between amount and sign"+"\r\n"+"	  '110' => '(' . $currency_symbol . ' %s)',"+"\r\n"+"	  '111' => $sign . $currency_symbol . ' %s',"+"\r\n"+"	  '112' => $currency_symbol . ' %s' . $sign,"+"\r\n"+"	  '113' => $sign . $currency_symbol . ' %s',"+"\r\n"+"	  '114' => $currency_symbol . ' ' . $sign . '%s');"+"\r\n"+""+"\r\n"+"	// Lookup the key in the above array"+"\r\n"+"	return sprintf($formats[$key], $number);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Format number"+"\r\n"+"// Arguments: Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])"+"\r\n"+"// NumDigitsAfterDecimal is the numeric value indicating how many places to the right of the decimal are displayed"+"\r\n"+"// -1 Use Default"+"\r\n"+"// -2 Retain all values after decimal place"+"\r\n"+"// The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:"+"\r\n"+"// -1 True"+"\r\n"+"// 0 False"+"\r\n"+"// -2 Use Default"+"\r\n"+"function ew_FormatNumber($amount, $NumDigitsAfterDecimal, $IncludeLeadingDigit = -2, $UseParensForNegativeNumbers = -2, $GroupDigits = -2) {"+"\r\n"+""+"\r\n"+"	extract($GLOBALS[\"DEFAULT_LOCALE\"]);"+"\r\n"+""+"\r\n"+"	// Check $NumDigitsAfterDecimal"+"\r\n"+"	if ($NumDigitsAfterDecimal == -2) { // Use all values after decimal point"+"\r\n"+"		$stramt = strval($amount);"+"\r\n"+"		if (strrpos($stramt, '.') === FALSE)"+"\r\n"+"			$frac_digits = 0;"+"\r\n"+"		else"+"\r\n"+"			$frac_digits = strlen($stramt) - strrpos($stramt, '.') - 1;"+"\r\n"+"	} elseif ($NumDigitsAfterDecimal > -1) {"+"\r\n"+"		$frac_digits = $NumDigitsAfterDecimal;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $UseParensForNegativeNumbers"+"\r\n"+"	if ($UseParensForNegativeNumbers == -1) {"+"\r\n"+"		$n_sign_posn = 0;"+"\r\n"+"		if ($p_sign_posn == 0) {"+"\r\n"+"			$p_sign_posn = 3;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($UseParensForNegativeNumbers == 0) {"+"\r\n"+"		if ($n_sign_posn == 0)"+"\r\n"+"			$n_sign_posn = 3;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $GroupDigits"+"\r\n"+"	if ($GroupDigits == -1) {"+"\r\n"+"	} elseif ($GroupDigits == 0) {"+"\r\n"+"		$thousands_sep = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start by formatting the unsigned number"+"\r\n"+"	$number = number_format(abs($amount),"+"\r\n"+"						  $frac_digits,"+"\r\n"+"						  $decimal_point,"+"\r\n"+"						  $thousands_sep);"+"\r\n"+""+"\r\n"+"	// Check $IncludeLeadingDigit"+"\r\n"+"	if ($IncludeLeadingDigit == 0) {"+"\r\n"+"		if (substr($number, 0, 2) == \"0.\")"+"\r\n"+"			$number = substr($number, 1, strlen($number)-1);"+"\r\n"+"	}"+"\r\n"+"	if ($amount < 0) {"+"\r\n"+"		$sign = $negative_sign;"+"\r\n"+"		$key = $n_sign_posn;"+"\r\n"+"	} else {"+"\r\n"+"		$sign = $positive_sign;"+"\r\n"+"		$key = $p_sign_posn;"+"\r\n"+"	}"+"\r\n"+"	$formats = array("+"\r\n"+"		'0' => '(%s)',"+"\r\n"+"		'1' => $sign . '%s',"+"\r\n"+"		'2' => $sign . '%s',"+"\r\n"+"		'3' => $sign . '%s',"+"\r\n"+"		'4' => $sign . '%s');"+"\r\n"+""+"\r\n"+"	// Lookup the key in the above array"+"\r\n"+"	return sprintf($formats[$key], $number);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Format percent"+"\r\n"+"// Arguments: Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit	[,UseParensForNegativeNumbers [,GroupDigits]]]])"+"\r\n"+"// NumDigitsAfterDecimal is the numeric value indicating how many places to the right of the decimal are displayed"+"\r\n"+"// -1 Use Default"+"\r\n"+"// The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:"+"\r\n"+"// -1 True"+"\r\n"+"// 0 False"+"\r\n"+"// -2 Use Default"+"\r\n"+"function ew_FormatPercent($amount, $NumDigitsAfterDecimal, $IncludeLeadingDigit = -2, $UseParensForNegativeNumbers = -2, $GroupDigits = -2) {"+"\r\n"+""+"\r\n"+"	extract($GLOBALS[\"DEFAULT_LOCALE\"]);"+"\r\n"+""+"\r\n"+"	// Check $NumDigitsAfterDecimal"+"\r\n"+"	if ($NumDigitsAfterDecimal > -1)"+"\r\n"+"		$frac_digits = $NumDigitsAfterDecimal;"+"\r\n"+""+"\r\n"+"	// Check $UseParensForNegativeNumbers"+"\r\n"+"	if ($UseParensForNegativeNumbers == -1) {"+"\r\n"+"		$n_sign_posn = 0;"+"\r\n"+"		if ($p_sign_posn == 0) {"+"\r\n"+"			$p_sign_posn = 3;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($UseParensForNegativeNumbers == 0) {"+"\r\n"+"		if ($n_sign_posn == 0)"+"\r\n"+"			$n_sign_posn = 3;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $GroupDigits"+"\r\n"+"	if ($GroupDigits == -1) {"+"\r\n"+"	} elseif ($GroupDigits == 0) {"+"\r\n"+"		$thousands_sep = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start by formatting the unsigned number"+"\r\n"+"	$number = number_format(abs($amount)*100,"+"\r\n"+"							$frac_digits,"+"\r\n"+"							$decimal_point,"+"\r\n"+"							$thousands_sep);"+"\r\n"+""+"\r\n"+"	// Check $IncludeLeadingDigit"+"\r\n"+"	if ($IncludeLeadingDigit == 0) {"+"\r\n"+"		if (substr($number, 0, 2) == \"0.\")"+"\r\n"+"			$number = substr($number, 1, strlen($number)-1);"+"\r\n"+"	}"+"\r\n"+"	if ($amount < 0) {"+"\r\n"+"		$sign = $negative_sign;"+"\r\n"+"		$key = $n_sign_posn;"+"\r\n"+"	} else {"+"\r\n"+"		$sign = $positive_sign;"+"\r\n"+"		$key = $p_sign_posn;"+"\r\n"+"	}"+"\r\n"+"	$formats = array("+"\r\n"+"		'0' => '(%s%%)',"+"\r\n"+"		'1' => $sign . '%s%%',"+"\r\n"+"		'2' => $sign . '%s%%',"+"\r\n"+"		'3' => $sign . '%s%%',"+"\r\n"+"		'4' => $sign . '%s%%');"+"\r\n"+""+"\r\n"+"	// Lookup the key in the above array"+"\r\n"+"	return sprintf($formats[$key], $number);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Format sequence number"+"\r\n"+"function ew_FormatSeqNo($seq) {"+"\r\n"+"	global $Language;"+"\r\n"+"	return str_replace(\"%s\", $seq, $Language->Phrase(\"SequenceNumber\"));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode value for single-quoted JavaScript string"+"\r\n"+"function ew_JsEncode($val) {"+"\r\n"+"	$val = strval($val);"+"\r\n"+"	if (EW_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ew_ConvertToUtf8($val);"+"\r\n"+"	$val = str_replace(\"\\\\\", \"\\\\\\\\\", $val);"+"\r\n"+"	$val = str_replace(\"'\", \"\\\\'\", $val);"+"\r\n"+"	$val = str_replace(\"\\r\\n\", \"<br>\", $val);"+"\r\n"+"	$val = str_replace(\"\\r\", \"<br>\", $val);"+"\r\n"+"	$val = str_replace(\"\\n\", \"<br>\", $val);"+"\r\n"+"	if (EW_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ew_ConvertFromUtf8($val);"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Display field value separator"+"\r\n"+"// idx (int) display field index (1|2|3)"+"\r\n"+"// fld (object) field object"+"\r\n"+"function ew_ValueSeparator($idx, &$fld) {"+"\r\n"+"	$sep = ($fld) ? $fld->DisplayValueSeparator : \", \";"+"\r\n"+"	return (is_array($sep)) ? @$sep[$idx - 1] : $sep;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Delimited values separator (for select-multiple or checkbox)"+"\r\n"+"// idx (int) zero based value index"+"\r\n"+"function ew_ViewOptionSeparator($idx = -1) {"+"\r\n"+"	return \", \";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get temp upload path"+"\r\n"+"function ew_UploadTempPath($fldvar = \"\", $tblvar = \"\") {"+"\r\n"+"	$path = (EW_UPLOAD_TEMP_PATH) ? ew_IncludeTrailingDelimiter(EW_UPLOAD_TEMP_PATH, TRUE) : ew_UploadPathEx(TRUE, EW_UPLOAD_DEST_PATH);"+"\r\n"+"	$path .= EW_UPLOAD_TEMP_FOLDER_PREFIX . session_id();"+"\r\n"+"	if ($tblvar <> \"\")"+"\r\n"+"		$path .= EW_PATH_DELIMITER . $tblvar;"+"\r\n"+"	if ($fldvar <> \"\")"+"\r\n"+"		$path .= EW_PATH_DELIMITER . $fldvar;"+"\r\n"+"	return $path;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Render upload field to temp path"+"\r\n"+"function ew_RenderUploadField(&$fld, $idx = -1) {"+"\r\n"+"	global $Language;"+"\r\n"+"	$fldvar = ($idx < 0) ? $fld->FldVar : substr($fld->FldVar, 0, 1) . $idx . substr($fld->FldVar, 1);"+"\r\n"+"	$folder = ew_UploadTempPath($fldvar, $fld->TblVar);"+"\r\n"+"	ew_CleanUploadTempPaths(); // Clean all old temp folders"+"\r\n"+"	ew_CleanPath($folder); // Clean the upload folder"+"\r\n"+"	if (!file_exists($folder)) {"+"\r\n"+"		if (!ew_CreateFolder($folder))"+"\r\n"+"			die(\"Cannot create folder: \" . $folder);"+"\r\n"+"	}"+"\r\n"+"	$thumbnailfolder = ew_PathCombine($folder, EW_UPLOAD_THUMBNAIL_FOLDER, TRUE);"+"\r\n"+"	if (!file_exists($thumbnailfolder)) {"+"\r\n"+"		if (!ew_CreateFolder($thumbnailfolder))"+"\r\n"+"			die(\"Cannot create folder: \" . $thumbnailfolder);"+"\r\n"+"	}"+"\r\n"+"	if ($fld->FldDataType == EW_DATATYPE_BLOB) { // Blob field"+"\r\n"+"		if (!ew_Empty($fld->Upload->DbValue)) {"+"\r\n"+"			// Create upload file"+"\r\n"+"			$filename = ($fld->Upload->FileName <> \"\") ? $fld->Upload->FileName : substr($fld->FldVar, 2);"+"\r\n"+"			$f = ew_IncludeTrailingDelimiter($folder, TRUE) . $filename;"+"\r\n"+"			ew_CreateUploadFile($f, $fld->Upload->DbValue);"+"\r\n"+"			// Create thumbnail file"+"\r\n"+"			$f = ew_IncludeTrailingDelimiter($thumbnailfolder, TRUE) . $filename;"+"\r\n"+"			$data = $fld->Upload->DbValue;"+"\r\n"+"			$width = EW_UPLOAD_THUMBNAIL_WIDTH;"+"\r\n"+"			$height = EW_UPLOAD_THUMBNAIL_HEIGHT;"+"\r\n"+"			ew_ResizeBinary($data, $width, $height);"+"\r\n"+"			ew_CreateUploadFile($f, $data);"+"\r\n"+"			$fld->Upload->FileName = basename($f); // Update file name"+"\r\n"+"		}"+"\r\n"+"	} else { // Upload to folder"+"\r\n"+"		$fld->Upload->FileName = $fld->Upload->DbValue; // Update file name"+"\r\n"+"		if (!ew_Empty($fld->Upload->FileName)) {"+"\r\n"+"			// Create upload file"+"\r\n"+"			$pathinfo = pathinfo($fld->Upload->FileName);"+"\r\n"+"			$filename = $pathinfo['basename'];"+"\r\n"+"			$filepath = (@$pathinfo['dirname'] <> \"\") ? $fld->UploadPath . '/' . $pathinfo['dirname'] : $fld->UploadPath;"+"\r\n"+"			if ($fld->UploadMultiple)"+"\r\n"+"				$files = explode(EW_MULTIPLE_UPLOAD_SEPARATOR, $filename);"+"\r\n"+"			else"+"\r\n"+"				$files = array($filename);"+"\r\n"+"			$cnt = count($files);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				$filename = $files[$i];"+"\r\n"+"				if ($filename <> \"\") {"+"\r\n"+"					$srcfile = ew_UploadPathEx(TRUE, $filepath) . $filename;"+"\r\n"+"					$f = ew_IncludeTrailingDelimiter($folder, TRUE) . $filename;"+"\r\n"+"					if (!is_dir($srcfile) && file_exists($srcfile)) {"+"\r\n"+"						$data = file_get_contents($srcfile);"+"\r\n"+"						ew_CreateUploadFile($f, $data);"+"\r\n"+"					} else {"+"\r\n"+"						ew_CreateImageFromText($Language->Phrase(\"FileNotFound\"), $f);"+"\r\n"+"						$data = file_get_contents($f);"+"\r\n"+"					}"+"\r\n"+"					// Create thumbnail file"+"\r\n"+"					$f = ew_IncludeTrailingDelimiter($thumbnailfolder, TRUE) . $filename;"+"\r\n"+"					$width = EW_UPLOAD_THUMBNAIL_WIDTH;"+"\r\n"+"					$height = EW_UPLOAD_THUMBNAIL_HEIGHT;"+"\r\n"+"					ew_ResizeBinary($data, $width, $height);"+"\r\n"+"					ew_CreateUploadFile($f, $data);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write uploaded file"+"\r\n"+"function ew_CreateUploadFile(&$f, $data) {"+"\r\n"+"	$handle = fopen($f, 'w+');"+"\r\n"+"	fwrite($handle, $data);"+"\r\n"+"	fclose($handle);"+"\r\n"+"	$pathinfo = pathinfo($f);"+"\r\n"+"	if (!isset($pathinfo['extension']) || $pathinfo['extension'] == '') {"+"\r\n"+"		$info = @getimagesize($f);"+"\r\n"+"		switch (@$info[2]) {"+"\r\n"+"			case 1:"+"\r\n"+"				rename($f, $f .= '.gif'); break;"+"\r\n"+"			case 2:"+"\r\n"+"				rename($f, $f .= '.jpg'); break;"+"\r\n"+"			case 3:"+"\r\n"+"				rename($f, $f .= '.png'); break;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create image from text"+"\r\n"+"function ew_CreateImageFromText($txt, $file, $width = EW_UPLOAD_THUMBNAIL_WIDTH, $height = 0, $font = EW_TMP_IMAGE_FONT) {"+"\r\n"+"	$pt = round(EW_FONT_SIZE/1.33); // 1pt = 1.33px"+"\r\n"+"	$h = ($height > 0) ? $height : round(EW_FONT_SIZE / 14 * 20);"+"\r\n"+"	$im = @imagecreate($width, $h);"+"\r\n"+"	$color = @imagecolorallocate($im, 255, 255, 255);"+"\r\n"+"	$color = @imagecolorallocate($im, 0, $h, 0);"+"\r\n"+"	if (strrpos($font, '.') === FALSE)"+"\r\n"+"		$font .= '.ttf';"+"\r\n"+"	$font = $GLOBALS[\"EW_FONT_PATH\"] . EW_PATH_DELIMITER . $font; // Always use full path"+"\r\n"+"	@imagettftext($im, $pt, 0, 0, round(($h - EW_FONT_SIZE)/2 + EW_FONT_SIZE), $color, $font, ew_ConvertToUtf8($txt));"+"\r\n"+"	@imagepng($im, $file);"+"\r\n"+"	@imagedestroy($im);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Clean temp upload folders"+"\r\n"+"function ew_CleanUploadTempPaths($sessionid = \"\") {"+"\r\n"+"	$folder = (EW_UPLOAD_TEMP_PATH) ? ew_IncludeTrailingDelimiter(EW_UPLOAD_TEMP_PATH, TRUE) : ew_UploadPathEx(TRUE, EW_UPLOAD_DEST_PATH);"+"\r\n"+"	if (@is_dir($folder)) {"+"\r\n"+"		// Load temp folders"+"\r\n"+"		foreach (glob($folder . EW_UPLOAD_TEMP_FOLDER_PREFIX . \"*\", GLOB_ONLYDIR) as $tempfolder) {"+"\r\n"+"			$subfolder = basename($tempfolder);"+"\r\n"+"			if (EW_UPLOAD_TEMP_FOLDER_PREFIX . $sessionid == $subfolder) { // Clean session folder"+"\r\n"+"				ew_CleanPath($tempfolder, TRUE);"+"\r\n"+"			} else {"+"\r\n"+"				if (EW_UPLOAD_TEMP_FOLDER_PREFIX . session_id() <> $subfolder) {"+"\r\n"+"					if (ew_IsEmptyPath($tempfolder)) { // Empty folder"+"\r\n"+"						ew_CleanPath($tempfolder, TRUE);"+"\r\n"+"					} else { // Old folder"+"\r\n"+"						$lastmdtime = filemtime($tempfolder);"+"\r\n"+"						if ((time() - $lastmdtime) / 60 > EW_UPLOAD_TEMP_FOLDER_TIME_LIMIT || count(@scandir($tempfolder)) == 2)"+"\r\n"+"							ew_CleanPath($tempfolder, TRUE);"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Clean temp upload folder"+"\r\n"+"function ew_CleanUploadTempPath($fld, $idx = -1) {"+"\r\n"+"	$fldvar = ($idx < 0) ? $fld->FldVar : substr($fld->FldVar, 0, 1) . $idx . substr($fld->FldVar, 1);"+"\r\n"+"	$folder = ew_UploadTempPath($fldvar, $fld->TblVar);"+"\r\n"+"	ew_CleanPath($folder, TRUE); // Clean the upload folder"+"\r\n"+"	// Remove table temp folder if empty"+"\r\n"+"	$folder = ew_UploadTempPath(\"\", $fld->TblVar);"+"\r\n"+"	$files = @scandir($folder);"+"\r\n"+"	if (count($files) <= 2)"+"\r\n"+"		ew_CleanPath($folder, TRUE);"+"\r\n"+"	// Remove complete temp folder if empty"+"\r\n"+"	$folder = ew_UploadTempPath();"+"\r\n"+"	$files = @scandir($folder);"+"\r\n"+"	if (count($files) <= 2)"+"\r\n"+"		ew_CleanPath($folder, TRUE);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Clean folder"+"\r\n"+"function ew_CleanPath($folder, $delete = FALSE) {"+"\r\n"+"	$folder = ew_IncludeTrailingDelimiter($folder, TRUE);"+"\r\n"+"	try {"+"\r\n"+"		if (@is_dir($folder)) {"+"\r\n"+"			// Delete files in the folder"+"\r\n"+"			if ($ar = glob($folder . '*.*')) {"+"\r\n"+"				foreach ($ar as $v) {"+"\r\n"+"					@unlink($v);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			// Clear sub folders"+"\r\n"+"			if ($dir_handle = @opendir($folder)) {"+"\r\n"+"				while (FALSE !== ($subfolder = readdir($dir_handle))) {"+"\r\n"+"					$tempfolder = ew_PathCombine($folder, $subfolder, TRUE);"+"\r\n"+"					if ($subfolder == \".\" || $subfolder == \"..\" || !@is_dir($tempfolder))"+"\r\n"+"						continue;"+"\r\n"+"					ew_CleanPath($tempfolder, $delete);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if ($delete) {"+"\r\n"+"				@closedir($dir_handle);"+"\r\n"+"				@rmdir($folder);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	} catch (Exception $e) {"+"\r\n"+"		if (EW_DEBUG_ENABLED)"+"\r\n"+"			throw $e;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if empty folder"+"\r\n"+"function ew_IsEmptyPath($folder) {"+"\r\n"+"	$IsEmptyPath = TRUE;"+"\r\n"+"	// Check folder"+"\r\n"+"	$folder = ew_IncludeTrailingDelimiter($folder, TRUE);"+"\r\n"+"	if (is_dir($folder)) {"+"\r\n"+"		if (count(@scandir($folder)) > 2)"+"\r\n"+"			return FALSE;"+"\r\n"+"		if ($dir_handle = @opendir($folder)) {"+"\r\n"+"			while (FALSE !== ($subfolder = readdir($dir_handle))) {"+"\r\n"+"				$tempfolder = ew_PathCombine($folder, $subfolder, TRUE);"+"\r\n"+"				if ($subfolder == \".\" || $subfolder == \"..\")"+"\r\n"+"					continue;"+"\r\n"+"				if (is_dir($tempfolder))"+"\r\n"+"					$IsEmptyPath = ew_IsEmptyPath($tempfolder);"+"\r\n"+"				if (!$IsEmptyPath)"+"\r\n"+"					return FALSE; // No need to check further"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		$IsEmptyPath = FALSE;"+"\r\n"+"	}"+"\r\n"+"	return $IsEmptyPath;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Move uploaded file"+"\r\n"+"function ew_MoveUploadFile($srcfile, $destfile) {"+"\r\n"+"	$res = move_uploaded_file($srcfile, $destfile);"+"\r\n"+"	if ($res) chmod($destfile, EW_UPLOADED_FILE_MODE);"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Truncate Memo Field based on specified length, string truncated to nearest space or CrLf"+"\r\n"+"function ew_TruncateMemo($memostr, $ln, $removehtml) {"+"\r\n"+"	$str = ($removehtml) ? ew_RemoveHtml($memostr) : $memostr;"+"\r\n"+"	if (strlen($str) > 0 && strlen($str) > $ln) {"+"\r\n"+"		$k = 0;"+"\r\n"+"		while ($k >= 0 && $k < strlen($str)) {"+"\r\n"+"			$i = strpos($str, \" \", $k);"+"\r\n"+"			$j = strpos($str, chr(10), $k);"+"\r\n"+"			if ($i === FALSE && $j === FALSE) { // Not able to truncate"+"\r\n"+"				return $str;"+"\r\n"+"			} else {"+"\r\n"+"				// Get nearest space or CrLf"+"\r\n"+"				if ($i > 0 && $j > 0) {"+"\r\n"+"					if ($i < $j) {"+"\r\n"+"						$k = $i;"+"\r\n"+"					} else {"+"\r\n"+"						$k = $j;"+"\r\n"+"					}"+"\r\n"+"				} elseif ($i > 0) {"+"\r\n"+"					$k = $i;"+"\r\n"+"				} elseif ($j > 0) {"+"\r\n"+"					$k = $j;"+"\r\n"+"				}"+"\r\n"+"				// Get truncated text"+"\r\n"+"				if ($k >= $ln) {"+"\r\n"+"					return substr($str, 0, $k) . \"...\";"+"\r\n"+"				} else {"+"\r\n"+"					$k++;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return $str;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove HTML tags from text"+"\r\n"+"function ew_RemoveHtml($str) {"+"\r\n"+"	return preg_replace('/<[^>]*>/', '', strval($str));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Extract JavaScript from HTML and return converted script"+"\r\n"+"function ew_ExtractScript(&$html, $class = \"\") {"+"\r\n"+"	if (!preg_match_all('/<script([^>]*)>([\\s\\S]*?)<\\/script\\s*>/i', $html, $matches, PREG_SET_ORDER))"+"\r\n"+"		return \"\";"+"\r\n"+"	$scripts = \"\";"+"\r\n"+"	foreach ($matches as $match) {"+"\r\n"+"		if (preg_match('/(\\s+type\\s*=\\s*[\\'\"]*(text|application)\\/(java|ecma)script[\\'\"]*)|^((?!\\s+type\\s*=).)*$/i', $match[1])) { // JavaScript"+"\r\n"+"			$html = str_replace($match[0], \"\", $html); // Remove the script from HTML"+"\r\n"+"			$scripts .= ew_HtmlElement(\"script\", array(\"type\" => \"text/html\", \"class\" => $class), $match[2]); // Convert script type and add CSS class, if specified"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return $scripts; // Return converted scripts"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Include PHPMailer class"+"\r\n"+"include_once($EW_RELATIVE_PATH . \"phpmailer5214/PHPMailerAutoload.php\");"+"\r\n"+""+"\r\n"+"// Function to send email"+"\r\n"+"function ew_SendEmail($sFrEmail, $sToEmail, $sCcEmail, $sBccEmail, $sSubject, $sMail, $sFormat, $sCharset, $sSmtpSecure = \"\", $arAttachments = array(), $arImages = array(), $arProperties = NULL) {"+"\r\n"+"	global $Language, $gsEmailErrDesc;"+"\r\n"+"	"+"\r\n"+"	$res = FALSE;"+"\r\n"+"	"+"\r\n"+"	$mail = new PHPMailer();"+"\r\n"+"	$mail->IsSMTP(); "+"\r\n"+"	$mail->Host = EW_SMTP_SERVER;"+"\r\n"+"	$mail->SMTPAuth = (EW_SMTP_SERVER_USERNAME <> \"\" && EW_SMTP_SERVER_PASSWORD <> \"\");"+"\r\n"+"	$mail->Username = EW_SMTP_SERVER_USERNAME;"+"\r\n"+"	$mail->Password = EW_SMTP_SERVER_PASSWORD;"+"\r\n"+"	$mail->Port = EW_SMTP_SERVER_PORT;"+"\r\n"+"	"+"\r\n"+"	if ($sSmtpSecure <> \"\") {"+"\r\n"+"		$mail->SMTPSecure = $sSmtpSecure;"+"\r\n"+"		$mail->SMTPOptions = array(\"ssl\" => array(\"verify_peer\" => FALSE, \"verify_peer_name\" => FALSE, \"allow_self_signed\" => TRUE));"+"\r\n"+"	}"+"\r\n"+"	if (preg_match('/^(.+)<([\\w.%+-]+@[\\w.-]+\\.[A-Z]{2,6})>$/i', trim($sFrEmail), $m)) {"+"\r\n"+"		$mail->From = $m[2];"+"\r\n"+"		$mail->FromName = trim($m[1]);"+"\r\n"+"	} else {"+"\r\n"+"		$mail->From = $sFrEmail;"+"\r\n"+"		$mail->FromName = $sFrEmail;"+"\r\n"+"	}"+"\r\n"+"	$mail->Subject = $sSubject;"+"\r\n"+""+"\r\n"+"	if (ew_SameText($sFormat, \"html\")) {"+"\r\n"+"		$mail->IsHTML(TRUE);"+"\r\n"+"		$mail->Body = $sMail;"+"\r\n"+"";
ewAr[155] = ""+"\r\n"+"		$mail->AltBody = @Html2Text\\Html2Text::convert($sMail);"+"\r\n"+"";
ewAr[156] = ""+"\r\n"+"	} else {"+"\r\n"+"		$mail->IsHTML(FALSE);"+"\r\n"+"		$mail->Body = @Html2Text\\Html2Text::convert($sMail);"+"\r\n"+"    }"+"\r\n"+""+"\r\n"+"	if ($sCharset <> \"\" && strtolower($sCharset) <> \"iso-8859-1\")"+"\r\n"+"		$mail->CharSet = $sCharset;"+"\r\n"+"	"+"\r\n"+"	$sToEmail = str_replace(\";\", \",\", $sToEmail);"+"\r\n"+"	$arrTo = explode(\",\", $sToEmail);"+"\r\n"+"	"+"\r\n"+"	foreach ($arrTo as $sTo) {"+"\r\n"+"		$mail->AddAddress(trim($sTo));"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	if ($sCcEmail <> \"\") {"+"\r\n"+"		$sCcEmail = str_replace(\";\", \",\", $sCcEmail);"+"\r\n"+"		$arrCc = explode(\",\", $sCcEmail);"+"\r\n"+"	"+"\r\n"+"		foreach ($arrCc as $sCc) {"+"\r\n"+"			$mail->AddCC(trim($sCc));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	if ($sBccEmail <> \"\") {"+"\r\n"+"		$sBccEmail = str_replace(\";\", \",\", $sBccEmail);"+"\r\n"+"		$arrBcc = explode(\",\", $sBccEmail);"+"\r\n"+"	"+"\r\n"+"		foreach ($arrBcc as $sBcc) {"+"\r\n"+"			$mail->AddBCC(trim($sBcc));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	if (is_array($arAttachments)) {"+"\r\n"+"		foreach ($arAttachments as $attachment) {"+"\r\n"+"			$filename = @$attachment[\"filename\"];"+"\r\n"+"			$content = @$attachment[\"content\"];"+"\r\n"+"			if ($content <> \"\" && $filename <> \"\") {"+"\r\n"+"				$mail->AddStringAttachment($content, $filename);"+"\r\n"+"			} else if ($filename <> \"\") {"+"\r\n"+"				$mail->AddAttachment($filename);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (is_array($arImages)) {"+"\r\n"+"		foreach ($arImages as $tmpimage) {"+"\r\n"+"			$file = ew_UploadPathEx(TRUE, EW_UPLOAD_DEST_PATH) . $tmpimage;"+"\r\n"+"			$cid = ew_TmpImageLnk($tmpimage, \"cid\");"+"\r\n"+"			$mail->AddEmbeddedImage($file, $cid, $tmpimage);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (is_array($arProperties)) {"+"\r\n"+"		foreach ($arProperties as $key => $value)"+"\r\n"+"			$mail->set($key, $value);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	$res = $mail->Send();"+"\r\n"+"	$gsEmailErrDesc = $mail->ErrorInfo;"+"\r\n"+"	"+"\r\n"+"	// Uncomment to debug"+"\r\n"+"//		var_dump($mail); exit();"+"\r\n"+""+"\r\n"+"	return $res;"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Clean email content"+"\r\n"+"function ew_CleanEmailContent($Content) {"+"\r\n"+"	$Content = str_replace(\"class=\\\"panel panel-default ewGrid\\\"\", \"\", $Content);"+"\r\n"+"	$Content = str_replace(\"class=\\\"table-responsive ewGridMiddlePanel\\\"\", \"\", $Content);"+"\r\n"+"	$Content = str_replace(\"table ewTable\", \"ewExportTable\", $Content);"+"\r\n"+"	return $Content;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Field data type"+"\r\n"+"function ew_FieldDataType($fldtype) {"+"\r\n"+"	switch ($fldtype) {"+"\r\n"+"		case 20:"+"\r\n"+"		case 3:"+"\r\n"+"		case 2:"+"\r\n"+"		case 16:"+"\r\n"+"		case 4:"+"\r\n"+"		case 5:"+"\r\n"+"		case 131:"+"\r\n"+"		case 139:"+"\r\n"+"		case 6:"+"\r\n"+"		case 17:"+"\r\n"+"		case 18:"+"\r\n"+"		case 19:"+"\r\n"+"		case 21: // Numeric"+"\r\n"+"			return EW_DATATYPE_NUMBER;"+"\r\n"+"		case 7:"+"\r\n"+"		case 133:"+"\r\n"+"		case 135: // Date"+"\r\n"+"		case 146: // DateTiemOffset"+"\r\n"+"			return EW_DATATYPE_DATE;"+"\r\n"+"		case 134: // Time"+"\r\n"+"		case 145: // Time"+"\r\n"+"			return EW_DATATYPE_TIME;"+"\r\n"+"		case 201:"+"\r\n"+"		case 203: // Memo"+"\r\n"+"			return EW_DATATYPE_MEMO;"+"\r\n"+"		case 129:"+"\r\n"+"		case 130:"+"\r\n"+"		case 200:"+"\r\n"+"		case 202: // String"+"\r\n"+"			return EW_DATATYPE_STRING;"+"\r\n"+"		case 11: // Boolean"+"\r\n"+"			return EW_DATATYPE_BOOLEAN;"+"\r\n"+"		case 72: // GUID"+"\r\n"+"			return EW_DATATYPE_GUID;"+"\r\n"+"		case 128:"+"\r\n"+"		case 204:"+"\r\n"+"		case 205: // Binary"+"\r\n"+"			return EW_DATATYPE_BLOB;"+"\r\n"+"		case 141: // XML"+"\r\n"+"			return EW_DATATYPE_XML;"+"\r\n"+"		default:"+"\r\n"+"			return EW_DATATYPE_OTHER;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Application root"+"\r\n"+"function ew_AppRoot() {"+"\r\n"+"	global $EW_ROOT_RELATIVE_PATH;"+"\r\n"+""+"\r\n"+"	// 1. use root relative path"+"\r\n"+"	if ($EW_ROOT_RELATIVE_PATH <> \"\") {"+"\r\n"+"		$Path = realpath($EW_ROOT_RELATIVE_PATH);"+"\r\n"+"		$Path = str_replace(\"\\\\\\\\\", EW_PATH_DELIMITER, $Path);"+"\r\n"+"	} else {"+"\r\n"+"		$Path = realpath(\".\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// 2. if empty, use the document root if available"+"\r\n"+"	if (empty($Path))"+"\r\n"+"		$Path = ew_ServerVar(\"APPL_PHYSICAL_PATH\"); // IIS"+"\r\n"+"		"+"\r\n"+"	if (empty($Path))"+"\r\n"+"		$Path = ew_ServerVar(\"DOCUMENT_ROOT\");"+"\r\n"+"	"+"\r\n"+"	// 3. if empty, use current folder"+"\r\n"+"	if (empty($Path))"+"\r\n"+"		$Path = realpath(\".\");"+"\r\n"+"	"+"\r\n"+"	// 4. use custom path, uncomment the following line and enter your path, e.g.:"+"\r\n"+"	// $Path = 'C:\\Inetpub\\wwwroot\\MyWebRoot'; // Windows"+"\r\n"+"	//$Path = 'enter your path here';"+"\r\n"+"	"+"\r\n"+"	if (empty($Path))"+"\r\n"+"		die(\"Path of website root unknown.\");"+"\r\n"+"	"+"\r\n"+"	return ew_IncludeTrailingDelimiter($Path, TRUE);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get path relative to application root"+"\r\n"+"function ew_ServerMapPath($Path) {"+"\r\n"+"	return ew_RemoveTrailingDelimiter(ew_PathCombine(ew_AppRoot(), $Path, TRUE), TRUE);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write the paths for config/debug only"+"\r\n"+"function ew_WritePaths() {"+"\r\n"+"	global $EW_ROOT_RELATIVE_PATH, $EW_RELATIVE_PATH;"+"\r\n"+"	echo \"EW_RELATIVE_PATH = \" . $EW_RELATIVE_PATH . \"<br>\";"+"\r\n"+"	echo \"EW_ROOT_RELATIVE_PATH = \" . $EW_ROOT_RELATIVE_PATH . \"<br>\";"+"\r\n"+"	echo \"EW_UPLOAD_DEST_PATH = \" . EW_UPLOAD_DEST_PATH . \"<br>\";"+"\r\n"+"	echo \"ew_AppRoot() = \" . ew_AppRoot() . \"<br>\";"+"\r\n"+"	echo \"realpath('.') = \" . realpath(\".\") . \"<br>\";"+"\r\n"+"	echo \"DOCUMENT_ROOT = \" . ew_ServerVar(\"DOCUMENT_ROOT\") . \"<br>\";"+"\r\n"+"	echo \"__FILE__ = \" . __FILE__ . \"<br>\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write info for config/debug only"+"\r\n"+"function ew_Info() {"+"\r\n"+"	global $Security;"+"\r\n"+"	ew_WritePaths();"+"\r\n"+"	echo \"CurrentUserName() = \" . CurrentUserName() . \"<br>\";"+"\r\n"+"	echo \"CurrentUserID() = \" . CurrentUserID() . \"<br>\";"+"\r\n"+"	echo \"CurrentParentUserID() = \" . CurrentParentUserID() . \"<br>\";"+"\r\n"+"	echo \"IsLoggedIn() = \" . (IsLoggedIn() ? \"TRUE\" : \"FALSE\") . \"<br>\";"+"\r\n"+"	echo \"IsAdmin() = \" . (IsAdmin() ? \"TRUE\" : \"FALSE\") . \"<br>\";"+"\r\n"+"	echo \"IsSysAdmin() = \" . (IsSysAdmin() ? \"TRUE\" : \"FALSE\") . \"<br>\";"+"\r\n"+"	if (isset($Security))"+"\r\n"+"		$Security->ShowUserLevelInfo();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Upload path"+"\r\n"+"// If PhyPath is TRUE(1), return physical path on the server"+"\r\n"+"// If PhyPath is FALSE(0), return relative URL"+"\r\n"+"function ew_UploadPathEx($PhyPath, $DestPath) {"+"\r\n"+"	global $EW_ROOT_RELATIVE_PATH;"+"\r\n"+"	if ($PhyPath) {"+"\r\n"+"		$Path = ew_PathCombine(ew_AppRoot(), str_replace(\"/\", EW_PATH_DELIMITER, $DestPath), TRUE);"+"\r\n"+"	} else {"+"\r\n"+"		$Path = ew_PathCombine($EW_ROOT_RELATIVE_PATH, $DestPath, FALSE);"+"\r\n"+"	}"+"\r\n"+"	return ew_IncludeTrailingDelimiter($Path, $PhyPath);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Global upload path"+"\r\n"+"// If PhyPath is TRUE(1), return physical path on the server"+"\r\n"+"// If PhyPath is FALSE(0), return relative URL"+"\r\n"+"function ew_UploadPath($PhyPath) {"+"\r\n"+"	return ew_UploadPathEx($PhyPath, EW_UPLOAD_DEST_PATH);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Upload file name"+"\r\n"+"function ew_UploadFileNameEx($folder, $sFileName) {"+"\r\n"+"	// By default, ew_UniqueFileName() is used to get an unique file name"+"\r\n"+"	// You can change the logic here"+"\r\n"+"	$sOutFileName = ew_UniqueFilename($folder, $sFileName);"+"\r\n"+"	// Return computed output file name"+"\r\n"+"	return $sOutFileName;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Generate an unique file name (filename(n).ext)"+"\r\n"+"function ew_UniqueFilename($folder, $orifn, $indexed = FALSE) {"+"\r\n"+"	if ($orifn == \"\")"+"\r\n"+"		$orifn = date(\"YmdHis\") . \".bin\";"+"\r\n"+"	//$info = pathinfo(preg_replace('/\\s/', '_', $orifn));"+"\r\n"+"	//$newfn = strtolower($info[\"basename\"]);"+"\r\n"+"	$info = pathinfo($orifn);"+"\r\n"+"	$newfn = $info[\"basename\"];"+"\r\n"+"	$destpath = $folder . $newfn;"+"\r\n"+"	$i = 1;"+"\r\n"+"	if ($indexed && preg_match('/\\(\\d+\\)$/', $newfn, $matches)) // Match '(n)' at the end of the file name"+"\r\n"+"		$i = intval($matches[1]);"+"\r\n"+"	if (!file_exists($folder) && !ew_CreateFolder($folder))"+"\r\n"+"		die(\"Folder does not exist: \" . $folder);"+"\r\n"+"	while (file_exists(ew_Convert(EW_ENCODING, EW_FILE_SYSTEM_ENCODING, $destpath))) {"+"\r\n"+"		//$file_name = preg_replace('/\\(\\d+\\)$/', '', strtolower($info[\"filename\"])); // Remove \"(n)\" at the end of the file name"+"\r\n"+"		//$newfn = $file_name . \"(\" . $i++ . \").\" . strtolower($info[\"extension\"]);"+"\r\n"+"		$file_name = preg_replace('/\\(\\d+\\)$/', '', $info[\"filename\"]); // Remove \"(n)\" at the end of the file name"+"\r\n"+"		$newfn = $file_name . \"(\" . $i++ . \").\" . $info[\"extension\"];"+"\r\n"+"		$destpath = $folder . $newfn;"+"\r\n"+"	}"+"\r\n"+"	return $newfn;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get refer URL"+"\r\n"+"function ew_ReferURL() {"+"\r\n"+"	return ew_ServerVar(\"HTTP_REFERER\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get refer page name"+"\r\n"+"function ew_ReferPage() {"+"\r\n"+"	return ew_GetPageName(ew_ReferURL());"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get script physical folder"+"\r\n"+"function ew_ScriptFolder() {"+"\r\n"+"	$folder = \"\";"+"\r\n"+"	$path = ew_ServerVar(\"SCRIPT_FILENAME\");"+"\r\n"+"	$p = strrpos($path, EW_PATH_DELIMITER);"+"\r\n"+"	if ($p !== FALSE)"+"\r\n"+"		$folder = substr($path, 0, $p);"+"\r\n"+"	return ($folder <> \"\") ? $folder : realpath(\".\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get a temp folder for temp file"+"\r\n"+"function ew_TmpFolder() {"+"\r\n"+"	$tmpfolder = NULL;"+"\r\n"+""+"\r\n"+"	$folders = array();"+"\r\n"+""+"\r\n"+"	if (EW_IS_WINDOWS) {"+"\r\n"+"		$folders[] = ew_ServerVar(\"TEMP\");"+"\r\n"+"		$folders[] = ew_ServerVar(\"TMP\");"+"\r\n"+"	} else {"+"\r\n"+"		if (EW_UPLOAD_TMP_PATH <> \"\") $folders[] = ew_AppRoot() . str_replace(\"/\", EW_PATH_DELIMITER, EW_UPLOAD_TMP_PATH);"+"\r\n"+"		$folders[] = '/tmp';"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (ini_get('upload_tmp_dir')) {"+"\r\n"+"		$folders[] = ini_get('upload_tmp_dir');"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	foreach ($folders as $folder) {"+"\r\n"+"		if (!$tmpfolder && is_dir($folder)) {"+"\r\n"+"			$tmpfolder = $folder;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	//if ($tmpfolder) $tmpfolder = ew_IncludeTrailingDelimiter($tmpfolder, TRUE);"+"\r\n"+""+"\r\n"+"	return $tmpfolder;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create folder"+"\r\n"+"function ew_CreateFolder($dir, $mode = 0777) {"+"\r\n"+"	return (is_dir($dir) || @mkdir($dir, $mode, TRUE));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Save file"+"\r\n"+"function ew_SaveFile($folder, $fn, $filedata) {"+"\r\n"+"	$fn = ew_Convert(EW_ENCODING, EW_FILE_SYSTEM_ENCODING, $fn);"+"\r\n"+"	$res = FALSE;"+"\r\n"+"	if (ew_CreateFolder($folder)) {"+"\r\n"+"		if ($handle = fopen($folder . $fn, 'w')) { // P6"+"\r\n"+"			$res = fwrite($handle, $filedata);"+"\r\n"+"			fclose($handle);"+"\r\n"+"		}"+"\r\n"+"		if ($res)"+"\r\n"+"			chmod($folder . $fn, EW_UPLOADED_FILE_MODE);"+"\r\n"+"	}"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Copy file"+"\r\n"+"function ew_CopyFile($folder, $fn, $file) {"+"\r\n"+"	$fn = ew_Convert(EW_ENCODING, EW_FILE_SYSTEM_ENCODING, $fn);"+"\r\n"+"	if (file_exists($file)) {"+"\r\n"+"		if (ew_CreateFolder($folder)) {"+"\r\n"+"			$newfile = ew_UploadPathEx(TRUE, $folder) . $fn;"+"\r\n"+"			return copy($file, $newfile);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Generate random number"+"\r\n"+"function ew_Random() {"+"\r\n"+"	return mt_rand();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove CR and LF"+"\r\n"+"function ew_RemoveCrLf($s) {"+"\r\n"+"	if (strlen($s) > 0) {"+"\r\n"+"		$s = str_replace(\"\\n\", \" \", $s);"+"\r\n"+"		$s = str_replace(\"\\r\", \" \", $s);"+"\r\n"+"		$s = str_replace(\"\\l\", \" \", $s);"+"\r\n"+"	}"+"\r\n"+"	return $s;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Calculate field hash"+"\r\n"+"function ew_GetFldHash($value) {"+"\r\n"+"	return md5(ew_GetFldValueAsString($value));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get field value as string"+"\r\n"+"function ew_GetFldValueAsString($value) {"+"\r\n"+"	if (is_null($value)) {"+"\r\n"+"		return \"\";"+"\r\n"+"	} else {"+"\r\n"+"		if (strlen($value) > 65535) { // BLOB/TEXT"+"\r\n"+"			if (EW_BLOB_FIELD_BYTE_COUNT > 0) {"+"\r\n"+"				return substr($value, 0, EW_BLOB_FIELD_BYTE_COUNT);"+"\r\n"+"			} else {"+"\r\n"+"				return $value;"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			return strval($value);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert byte array to binary string"+"\r\n"+"function ew_BytesToStr($bytes) {"+"\r\n"+"	$str = \"\";"+"\r\n"+"	foreach ($bytes as $byte)"+"\r\n"+"		$str .= chr($byte);"+"\r\n"+"	return $str;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert binary string to byte array"+"\r\n"+"function ew_StrToBytes($str) {"+"\r\n"+"	$cnt = strlen($str);"+"\r\n"+"	$bytes = array();"+"\r\n"+"	for ($i = 0; $i < $cnt; $i++)"+"\r\n"+"		$bytes[] = ord($str[$i]);"+"\r\n"+"	return $bytes;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create temp image file from binary data"+"\r\n"+"function ew_TmpImage(&$filedata) {"+"\r\n"+"	global $gTmpImages;"+"\r\n"+"	$export = \"\";"+"\r\n"+"	if (@$_GET[\"export\"] <> \"\")"+"\r\n"+"		$export = $_GET[\"export\"];"+"\r\n"+"	elseif (@$_POST[\"export\"] <> \"\")"+"\r\n"+"		$export = $_POST[\"export\"];"+"\r\n"+"	elseif (@$_POST[\"exporttype\"] <> \"\")"+"\r\n"+"		$export = $_POST[\"exporttype\"];"+"\r\n"+"//  $f = tempnam(ew_TmpFolder(), \"tmp\");"+"\r\n"+"	$folder = ew_AppRoot() . EW_UPLOAD_DEST_PATH;"+"\r\n"+"	$f = tempnam($folder, \"tmp\");"+"\r\n"+"	$handle = fopen($f, 'w+');"+"\r\n"+"	fwrite($handle, $filedata);"+"\r\n"+"	fclose($handle);"+"\r\n"+"	$info = @getimagesize($f);"+"\r\n"+"	switch ($info[2]) {"+"\r\n"+"		case 1:"+"\r\n"+"			rename($f, $f .= '.gif'); break;"+"\r\n"+"		case 2:"+"\r\n"+"			rename($f, $f .= '.jpg'); break;"+"\r\n"+"		case 3:"+"\r\n"+"			rename($f, $f .= '.png'); break;"+"\r\n"+"		case 6:"+"\r\n"+"			rename($f, $f .= '.bmp'); break;"+"\r\n"+"		default:"+"\r\n"+"			return \"\";"+"\r\n"+"	}"+"\r\n"+"	$tmpimage = basename($f);"+"\r\n"+"	$gTmpImages[] = $tmpimage;"+"\r\n"+"	//return EW_UPLOAD_DEST_PATH . $tmpimage;"+"\r\n"+"	return ew_TmpImageLnk($tmpimage, $export);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Delete temp images"+"\r\n"+"function ew_DeleteTmpImages() {"+"\r\n"+"	global $gTmpImages;"+"\r\n"+"	foreach ($gTmpImages as $tmpimage)"+"\r\n"+"		@unlink(ew_AppRoot() . EW_UPLOAD_DEST_PATH . $tmpimage);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get temp image link"+"\r\n"+"function ew_TmpImageLnk($file, $lnktype = \"\") {"+"\r\n"+"	global $EW_ROOT_RELATIVE_PATH;"+"\r\n"+"	if ($file == \"\") return \"\";"+"\r\n"+"	if ($lnktype == \"email\" || $lnktype == \"cid\") {"+"\r\n"+"		$ar = explode('.', $file);"+"\r\n"+"		$lnk = implode(\".\", array_slice($ar, 0, count($ar)-1));"+"\r\n"+"		if ($lnktype == \"email\") $lnk = \"cid:\" . $lnk;"+"\r\n"+"		return $lnk;"+"\r\n"+"	} else {"+"\r\n"+"		if ($lnktype == \"excel\" && defined('EW_USE_PHPEXCEL') || $lnktype == \"word\" && defined('EW_USE_PHPWORD')) {"+"\r\n"+"			return EW_UPLOAD_DEST_PATH . $file;"+"\r\n"+"		} else {"+"\r\n"+"			$fn = EW_UPLOAD_DEST_PATH . $file;"+"\r\n"+"			if ($EW_ROOT_RELATIVE_PATH <> \".\") $fn = $EW_ROOT_RELATIVE_PATH . \"/\" . $fn;"+"\r\n"+"			return $fn;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Hash Url"+"\r\n"+"function ew_GetHashUrl($url, $hash) {"+"\r\n"+"	$wrkurl = $url;"+"\r\n"+"	$wrkurl .= \"#\" . $hash;"+"\r\n"+"	return $wrkurl;"+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[157] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Form class"+"\r\n"+" */"+"\r\n"+"class cFormObj {"+"\r\n"+"	var $Index;"+"\r\n"+"	var $FormName = \"\";"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct() {"+"\r\n"+"		$this->Index = -1;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get form element name based on index"+"\r\n"+"	function GetIndexedName($name) {"+"\r\n"+"		if ($this->Index < 0) {"+"\r\n"+"			return $name;"+"\r\n"+"		} else {"+"\r\n"+"			return substr($name, 0, 1) . $this->Index . substr($name, 1);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Has value for form element"+"\r\n"+"	function HasValue($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return isset($_POST[$wrkname]);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get value for form element"+"\r\n"+"	function GetValue($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		$value = @$_POST[$wrkname];"+"\r\n"+"		if ($this->FormName <> \"\") {"+"\r\n"+"			$wrkname = $this->FormName . '$' . $wrkname;"+"\r\n"+"			if (isset($_POST[$wrkname]))"+"\r\n"+"				$value = $_POST[$wrkname];"+"\r\n"+"		}"+"\r\n"+"		return $value;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get upload file size"+"\r\n"+"	function GetUploadFileSize($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return @$_FILES[$wrkname]['size'];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get upload file name"+"\r\n"+"	function GetUploadFileName($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return @$_FILES[$wrkname]['name'];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get file content type"+"\r\n"+"	function GetUploadFileContentType($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return @$_FILES[$wrkname]['type'];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get file error"+"\r\n"+"	function GetUploadFileError($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return @$_FILES[$wrkname]['error'];"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get file temp name"+"\r\n"+"	function GetUploadFileTmpName($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return @$_FILES[$wrkname]['tmp_name'];"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Check if is upload file"+"\r\n"+"	function IsUploadedFile($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		return is_uploaded_file(@$_FILES[$wrkname][\"tmp_name\"]);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get upload file data"+"\r\n"+"	function GetUploadFileData($name) {"+"\r\n"+"		if ($this->IsUploadedFile($name)) {"+"\r\n"+"			$wrkname = $this->GetIndexedName($name);"+"\r\n"+"			return file_get_contents($_FILES[$wrkname][\"tmp_name\"]);"+"\r\n"+"		} else {"+"\r\n"+"			return NULL;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get upload image size"+"\r\n"+"	function GetUploadImageSize($name) {"+"\r\n"+"		$wrkname = $this->GetIndexedName($name);"+"\r\n"+"		$file = @$_FILES[$wrkname]['tmp_name'];"+"\r\n"+"		return (file_exists($file)) ? @getimagesize($file) : array(NULL, NULL);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[158] = ""+"\r\n"+"<?php"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Functions for image resize"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Resize binary to thumbnail"+"\r\n"+"function ew_ResizeBinary(&$filedata, &$width, &$height, $quality = EW_THUMBNAIL_DEFAULT_QUALITY, $plugins = array()) {"+"\r\n"+"	global $EW_THUMBNAIL_CLASS, $EW_RESIZE_OPTIONS;"+"\r\n"+"	if ($width <= 0 && $height <= 0)"+"\r\n"+"		return FALSE;"+"\r\n"+"	$f = tempnam(ew_TmpFolder(), \"tmp\");"+"\r\n"+"	$handle = @fopen($f, 'wb');"+"\r\n"+"	if ($handle) {"+"\r\n"+"		fwrite($handle, $filedata);"+"\r\n"+"		fclose($handle);"+"\r\n"+"	}"+"\r\n"+"	$format = \"\";"+"\r\n"+"	if (file_exists($f) && filesize($f) > 0) { // temp file created"+"\r\n"+"		$info = @getimagesize($f);"+"\r\n"+"		@unlink($f);"+"\r\n"+"		if (!$info || !in_array($info[2], array(1, 2, 3))) { // not gif/jpg/png"+"\r\n"+"			return FALSE;"+"\r\n"+"		} elseif ($info[2] == 1) {"+"\r\n"+"			$format = \"GIF\";"+"\r\n"+"		} elseif ($info[2] == 2) {"+"\r\n"+"			$format = \"JPG\";"+"\r\n"+"		} elseif ($info[2] == 3) {"+"\r\n"+"			$format = \"PNG\";"+"\r\n"+"		}"+"\r\n"+"	} else { // temp file not created"+"\r\n"+"		if (substr($filedata, 0, 6) == \"\\x47\\x49\\x46\\x38\\x37\\x61\" || substr($filedata, 0, 6) == \"\\x47\\x49\\x46\\x38\\x39\\x61\") {"+"\r\n"+"			$format = \"GIF\";"+"\r\n"+"		} elseif (substr($filedata, 0, 4) == \"\\xFF\\xD8\\xFF\\xE0\" && substr($filedata, 6, 5) == \"\\x4A\\x46\\x49\\x46\\x00\") {"+"\r\n"+"			$format = \"JPG\";"+"\r\n"+"		} elseif (substr($filedata, 0, 8) == \"\\x89\\x50\\x4E\\x47\\x0D\\x0A\\x1A\\x0A\") {"+"\r\n"+"			$format = \"PNG\";"+"\r\n"+"		} else {"+"\r\n"+"			return FALSE;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$thumb = new $EW_THUMBNAIL_CLASS($filedata, $EW_RESIZE_OPTIONS + array(\"isDataStream\" => TRUE, \"format\" => $format), $plugins);"+"\r\n"+"	return $thumb->resizeEx($filedata, $width, $height);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Resize file to thumbnail file"+"\r\n"+"function ew_ResizeFile($fn, $tn, &$width, &$height, $plugins = array()) {"+"\r\n"+"	global $EW_THUMBNAIL_CLASS, $EW_RESIZE_OPTIONS;"+"\r\n"+"	$info = @getimagesize($fn);"+"\r\n"+"	if (!$info || !in_array($info[2], array(1, 2, 3)) ||"+"\r\n"+"		($width <= 0 && $height <= 0)) {"+"\r\n"+"		if ($fn <> $tn) copy($fn, $tn);"+"\r\n"+"		return;"+"\r\n"+"	}"+"\r\n"+"	$thumb = new $EW_THUMBNAIL_CLASS($fn, $EW_RESIZE_OPTIONS, $plugins);"+"\r\n"+"	$fdata = NULL;"+"\r\n"+"	if (!$thumb->resizeEx($fdata, $width, $height, $tn))"+"\r\n"+"		if ($fn <> $tn) copy($fn, $tn);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Resize file to binary"+"\r\n"+"function ew_ResizeFileToBinary($fn, &$width, &$height, $plugins = array()) {"+"\r\n"+"	global $EW_THUMBNAIL_CLASS, $EW_RESIZE_OPTIONS;"+"\r\n"+"	$info = @getimagesize($fn);"+"\r\n"+"	if (!$info)"+"\r\n"+"		return NULL;"+"\r\n"+"	if (!in_array($info[2], array(1, 2, 3)) ||"+"\r\n"+"		($width <= 0 && $height <= 0)) {"+"\r\n"+"		$fdata = file_get_contents($fn);"+"\r\n"+"	} else {"+"\r\n"+"		$thumb = new $EW_THUMBNAIL_CLASS($fn, $EW_RESIZE_OPTIONS, $plugins);"+"\r\n"+"		$fdata = NULL;"+"\r\n"+"		if (!$thumb->resizeEx($fdata, $width, $height))"+"\r\n"+"			$fdata = file_get_contents($fn);"+"\r\n"+"	}"+"\r\n"+"	return $fdata;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Class Thumbnail (extends GD)"+"\r\n"+" * Constructor: public function __construct($file, $options = array(), array $plugins = array())"+"\r\n"+" * @param string $file (file name or file data)"+"\r\n"+" * @param array $options: 'jpegQuality'(int), resizeUp'(bool), 'keepAspectRatio'(bool), 'isDataStream'(bool), 'format'(string)"+"\r\n"+" * @param array $plugins: anonymous function with an argument $phpthumb(cThumbnail)"+"\r\n"+" */"+"\r\n"+"class cThumbnail extends GD {"+"\r\n"+""+"\r\n"+"	// Extended resize method"+"\r\n"+"	function resizeEx(&$fdata, &$width, &$height, $fn = \"\") {"+"\r\n"+"		try {"+"\r\n"+"			$this->executePlugins()->resize($width, $height); // Execute plugins and resize"+"\r\n"+"			$dimensions = $this->getCurrentDimensions();"+"\r\n"+"			$width = $dimensions[\"width\"];"+"\r\n"+"			$height = $dimensions[\"height\"];"+"\r\n"+"			if ($fn <> \"\")"+"\r\n"+"				$this->save($fn);"+"\r\n"+"			else"+"\r\n"+"				$fdata = $this->getImageAsString();"+"\r\n"+"			return TRUE;"+"\r\n"+"		} catch (Exception $e) {"+"\r\n"+"			if (EW_DEBUG_ENABLED)"+"\r\n"+"				throw $e;"+"\r\n"+"			return FALSE;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"?>"+"\r\n"+"";
ewAr[159] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Functions for search"+"\r\n"+" */"+"\r\n"+" "+"\r\n"+"// Highlight value based on basic search / advanced search keywords"+"\r\n"+"function ew_Highlight($name, $src, $bkw, $bkwtype, $akw, $akw2=\"\") {"+"\r\n"+""+"\r\n"+"	$outstr = \"\";"+"\r\n"+"	if (strlen($src) > 0 && (strlen($bkw) > 0 || strlen($akw) > 0 || strlen($akw2) > 0)) {"+"\r\n"+"		$xx = 0;"+"\r\n"+"		$yy = strpos($src, \"<\", $xx);"+"\r\n"+"		if ($yy === FALSE) $yy = strlen($src);"+"\r\n"+"		while ($yy >= 0) {"+"\r\n"+"			if ($yy > $xx) {"+"\r\n"+"				$wrksrc = substr($src, $xx, $yy - $xx);"+"\r\n"+"				$kwstr = trim($bkw);"+"\r\n"+"				if (strlen($bkw) > 0 && strlen($bkwtype) == 0) { // Check for exact phase"+"\r\n"+"					$kwlist = array($kwstr); // Use single array element"+"\r\n"+"				} else {"+"\r\n"+"					$kwlist = explode(\" \", $kwstr);"+"\r\n"+"				}"+"\r\n"+"				if (strlen($akw) > 0)"+"\r\n"+"					$kwlist[] = $akw;"+"\r\n"+"				if (strlen($akw2) > 0)"+"\r\n"+"					$kwlist[] = $akw2;"+"\r\n"+"				$x = 0;"+"\r\n"+"				ew_GetKeyword($wrksrc, $kwlist, $x, $y, $kw);"+"\r\n"+"				while ($y >= 0) {"+"\r\n"+"					$outstr .= substr($wrksrc, $x, $y-$x) ."+"\r\n"+"						\"<span class=\\\"\" . $name . \" ewHighlightSearch\\\">\" ."+"\r\n"+"						substr($wrksrc, $y, strlen($kw)) . \"</span>\";"+"\r\n"+"					$x = $y + strlen($kw);"+"\r\n"+"					ew_GetKeyword($wrksrc, $kwlist, $x, $y, $kw);"+"\r\n"+"				}"+"\r\n"+"				$outstr .= substr($wrksrc, $x);"+"\r\n"+"				$xx += strlen($wrksrc);"+"\r\n"+"			}"+"\r\n"+"			if ($xx < strlen($src)) {"+"\r\n"+"				$yy = strpos($src, \">\", $xx);"+"\r\n"+"				if ($yy !== FALSE) {"+"\r\n"+"					$outstr .= substr($src, $xx, $yy - $xx + 1);"+"\r\n"+"					$xx = $yy + 1;"+"\r\n"+"					$yy = strpos($src, \"<\", $xx);"+"\r\n"+"					if ($yy === FALSE) $yy = strlen($src);"+"\r\n"+"				} else {"+"\r\n"+"					$outstr .= substr($src, $xx);"+"\r\n"+"					$yy = -1;"+"\r\n"+"				}"+"\r\n"+"			} else {"+"\r\n"+"				$yy = -1;"+"\r\n"+"			}"+"\r\n"+"		}	"+"\r\n"+"	} else {"+"\r\n"+"		$outstr = $src;"+"\r\n"+"	}"+"\r\n"+"	return $outstr;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get keyword"+"\r\n"+"function ew_GetKeyword(&$src, &$kwlist, &$x, &$y, &$kw) {"+"\r\n"+"	$thisy = -1;"+"\r\n"+"	$thiskw = \"\";"+"\r\n"+"	foreach ($kwlist as $wrkkw) {"+"\r\n"+"		$wrkkw = trim($wrkkw);"+"\r\n"+"		if ($wrkkw <> \"\") {"+"\r\n"+"			if (EW_HIGHLIGHT_COMPARE) { // Case-insensitive"+"\r\n"+"				$wrky = stripos($src, $wrkkw, $x);"+"\r\n"+"			} else {"+"\r\n"+"				$wrky = strpos($src, $wrkkw, $x);"+"\r\n"+"			}"+"\r\n"+"			if ($wrky !== FALSE) {"+"\r\n"+"				if ($thisy == -1) {"+"\r\n"+"					$thisy = $wrky;"+"\r\n"+"					$thiskw = $wrkkw;"+"\r\n"+"				} elseif ($wrky < $thisy) {"+"\r\n"+"					$thisy = $wrky;"+"\r\n"+"					$thiskw = $wrkkw;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$y = $thisy;"+"\r\n"+"	$kw = $thiskw;"+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[160] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Functions for Auto-Update fields"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Get user IP"+"\r\n"+"function ew_CurrentUserIP() {"+"\r\n"+"	return ew_ServerVar(\"REMOTE_ADDR\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current host name, e.g. \"www.mycompany.com\""+"\r\n"+"function ew_CurrentHost() {"+"\r\n"+"	return ew_ServerVar(\"HTTP_HOST\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current date in default date format"+"\r\n"+"// $namedformat = -1|5|6|7 (see comment for ew_FormatDateTime)"+"\r\n"+"function ew_CurrentDate($namedformat = -1) {"+"\r\n"+"	if (in_array($namedformat, array(5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17))) {"+"\r\n"+"		if ($namedformat == 5 || $namedformat == 9 || $namedformat == 12 || $namedformat == 15) {"+"\r\n"+"			$DT = ew_FormatDateTime(date('Y-m-d'), 5);"+"\r\n"+"		} elseif ($namedformat == 6 || $namedformat == 10 || $namedformat == 13 || $namedformat == 16) {"+"\r\n"+"			$DT = ew_FormatDateTime(date('Y-m-d'), 6);"+"\r\n"+"		} else {"+"\r\n"+"			$DT = ew_FormatDateTime(date('Y-m-d'), 7);"+"\r\n"+"		}"+"\r\n"+"		return $DT;"+"\r\n"+"	} else {"+"\r\n"+"		return date('Y-m-d');"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current time in hh:mm:ss format"+"\r\n"+"function ew_CurrentTime() {"+"\r\n"+"	return date(\"H:i:s\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current date in default date format with time in hh:mm:ss format"+"\r\n"+"// $namedformat = -1, 5-7, 9-11 (see comment for ew_FormatDateTime)"+"\r\n"+"function ew_CurrentDateTime($namedformat = -1) {"+"\r\n"+"	if (in_array($namedformat, array(5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17))) {"+"\r\n"+"		if ($namedformat == 5 || $namedformat == 9 || $namedformat == 12 || $namedformat == 15) {"+"\r\n"+"			$DT = ew_FormatDateTime(date('Y-m-d H:i:s'), 9);"+"\r\n"+"		} elseif ($namedformat == 6 || $namedformat == 10 || $namedformat == 13 || $namedformat == 16) {"+"\r\n"+"			$DT = ew_FormatDateTime(date('Y-m-d H:i:s'), 10);"+"\r\n"+"		} else {"+"\r\n"+"			$DT = ew_FormatDateTime(date('Y-m-d H:i:s'), 11);"+"\r\n"+"		}"+"\r\n"+"		return $DT;"+"\r\n"+"	} else {"+"\r\n"+"		return date('Y-m-d H:i:s');"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current date in standard format (yyyy/mm/dd)"+"\r\n"+"function ew_StdCurrentDate() {"+"\r\n"+"	return date('Y/m/d');"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get date in standard format (yyyy/mm/dd)"+"\r\n"+"function ew_StdDate($ts) {"+"\r\n"+"	return date('Y/m/d', $ts);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current date and time in standard format (yyyy/mm/dd hh:mm:ss)"+"\r\n"+"function ew_StdCurrentDateTime() {"+"\r\n"+"	return date('Y/m/d H:i:s');"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get date/time in standard format (yyyy/mm/dd hh:mm:ss)"+"\r\n"+"function ew_StdDateTime($ts) {"+"\r\n"+"	return date('Y/m/d H:i:s', $ts);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encrypt password"+"\r\n"+"function ew_EncryptPassword($input, $salt = '') {"+"\r\n"+"	return (strval($salt) <> \"\") ? md5($input . $salt) . \":\" . $salt : md5($input);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Compare password"+"\r\n"+"// Note: If salted, password must be stored in '<hashedstring>:<salt>' or in phpass format"+"\r\n"+"function ew_ComparePassword($pwd, $input, $encrypted = FALSE) {"+"\r\n"+"	if ($encrypted)"+"\r\n"+"		return $pwd == $input;"+"\r\n"+"	if (preg_match('/^\\$[HP]\\$/', $pwd)) { // phpass"+"\r\n"+"		include \"passwordhash.php\";"+"\r\n"+"		$ar = json_decode(EW_PHPASS_ITERATION_COUNT_LOG2);"+"\r\n"+"		if (is_array($ar)) {"+"\r\n"+"			foreach ($ar as $i) {"+"\r\n"+"				$hasher = new PasswordHash($i, TRUE);"+"\r\n"+"				if ($hasher->CheckPassword($input, $pwd))"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"			return FALSE;"+"\r\n"+"		}"+"\r\n"+"	} elseif (strpos($pwd, ':') !== FALSE) { // <hashedstring>:<salt>"+"\r\n"+"		@list($crypt, $salt) = explode(\":\", $pwd, 2);"+"\r\n"+"		return ($pwd == ew_EncryptPassword($input, $salt));"+"\r\n"+"	} else {"+"\r\n"+"		if (EW_CASE_SENSITIVE_PASSWORD) {"+"\r\n"+"			if (EW_ENCRYPTED_PASSWORD) {"+"\r\n"+"				return ($pwd == ew_EncryptPassword($input));"+"\r\n"+"			} else {"+"\r\n"+"				return ($pwd == $input);"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			if (EW_ENCRYPTED_PASSWORD) {"+"\r\n"+"				return ($pwd == ew_EncryptPassword(strtolower($input)));"+"\r\n"+"			} else {"+"\r\n"+"				return (strtolower($pwd) == strtolower($input));"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get security object"+"\r\n"+"function &Security() {"+"\r\n"+"	return $GLOBALS[\"Security\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get profile object"+"\r\n"+"function &Profile() {"+"\r\n"+"	return $GLOBALS[\"UserProfile\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get language object"+"\r\n"+"function &Language() {"+"\r\n"+"	return $GLOBALS[\"Language\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get breadcrumb object"+"\r\n"+"function &Breadcrumb() {"+"\r\n"+"	return $GLOBALS[\"Breadcrumb\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Functions for backward compatibilty"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Get current user name"+"\r\n"+"function CurrentUserName() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentUserName() : strval(@$_SESSION[EW_SESSION_USER_NAME]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user ID"+"\r\n"+"function CurrentUserID() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentUserID() : strval(@$_SESSION[EW_SESSION_USER_ID]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current parent user ID"+"\r\n"+"function CurrentParentUserID() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentParentUserID() : strval(@$_SESSION[EW_SESSION_PARENT_USER_ID]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user level"+"\r\n"+"function CurrentUserLevel() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentUserLevelID() : @$_SESSION[EW_SESSION_USER_LEVEL_ID];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user level list"+"\r\n"+"function CurrentUserLevelList() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->UserLevelList() : strval(@$_SESSION[EW_SESSION_USER_LEVEL_LIST]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Current user info"+"\r\n"+"function CurrentUserInfo($fldname) {"+"\r\n"+"	global $Security, $UserTableConn;"+"\r\n"+"	if (isset($Security)) {"+"\r\n"+"		return $Security->CurrentUserInfo($fldname);"+"\r\n"+"	} elseif (defined(\"EW_USER_TABLE\") && !IsSysAdmin()) {"+"\r\n"+"		$user = CurrentUserName();"+"\r\n"+"		if (strval($user) <> \"\")"+"\r\n"+"			return ew_ExecuteScalar(\"SELECT \" . ew_QuotedName($fldname, EW_USER_TABLE_DBID) . \" FROM \" . EW_USER_TABLE . \" WHERE \" ."+"\r\n"+"				str_replace(\"%u\", ew_AdjustSql($user, EW_USER_TABLE_DBID), EW_USER_NAME_FILTER), $UserTableConn);"+"\r\n"+"	}"+"\r\n"+"	return NULL;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current page ID"+"\r\n"+"function CurrentPageID() {"+"\r\n"+"	if (isset($GLOBALS[\"Page\"])) {"+"\r\n"+"		return $GLOBALS[\"Page\"]->PageID;"+"\r\n"+"	} elseif (defined(\"EW_PAGE_ID\")) {"+"\r\n"+"		return EW_PAGE_ID;"+"\r\n"+"	}"+"\r\n"+"	return \"\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Allow list"+"\r\n"+"function AllowList($TableName) {"+"\r\n"+"	global $Security;"+"\r\n"+"	return $Security->AllowList($TableName);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Allow add"+"\r\n"+"function AllowAdd($TableName) {"+"\r\n"+"	global $Security;"+"\r\n"+"	return $Security->AllowAdd($TableName);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is password expired"+"\r\n"+"function IsPasswordExpired() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsPasswordExpired() : (@$_SESSION[EW_SESSION_STATUS] == \"passwordexpired\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Set session password expired"+"\r\n"+"function SetSessionPasswordExpired() {"+"\r\n"+"	global $Security;"+"\r\n"+"	if (isset($Security))"+"\r\n"+"		$Security->SetSessionPasswordExpired();"+"\r\n"+"	else"+"\r\n"+"		$_SESSION[EW_SESSION_STATUS] = \"passwordexpired\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is password reset"+"\r\n"+"function IsPasswordReset() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsPasswordReset() : (@$_SESSION[EW_SESSION_STATUS] == \"passwordreset\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is logging in"+"\r\n"+"function IsLoggingIn() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsLoggingIn() : (@$_SESSION[EW_SESSION_STATUS] == \"loggingin\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is logged in"+"\r\n"+"function IsLoggedIn() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsLoggedIn() : (@$_SESSION[EW_SESSION_STATUS] == \"login\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is admin"+"\r\n"+"function IsAdmin() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsAdmin() : (@$_SESSION[EW_SESSION_SYS_ADMIN] == 1);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is system admin"+"\r\n"+"function IsSysAdmin() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsSysAdmin() : (@$_SESSION[EW_SESSION_SYS_ADMIN] == 1);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Class for TEA encryption/decryption"+"\r\n"+" */"+"\r\n"+"class cTEA {"+"\r\n"+""+"\r\n"+"	function long2str($v, $w) {"+"\r\n"+"		$len = count($v);"+"\r\n"+"		$s = array();"+"\r\n"+"		for ($i = 0; $i < $len; $i++)"+"\r\n"+"		{"+"\r\n"+"			$s[$i] = pack(\"V\", $v[$i]);"+"\r\n"+"		}"+"\r\n"+"		if ($w) {"+"\r\n"+"			return substr(join('', $s), 0, $v[$len - 1]);"+"\r\n"+"		}	else {"+"\r\n"+"			return join('', $s);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function str2long($s, $w) {"+"\r\n"+"		$v = unpack(\"V*\", $s. str_repeat(\"\\0\", (4 - strlen($s) % 4) & 3));"+"\r\n"+"		$v = array_values($v);"+"\r\n"+"		if ($w) {"+"\r\n"+"			$v[count($v)] = strlen($s);"+"\r\n"+"		}"+"\r\n"+"		return $v;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Encrypt"+"\r\n"+"	public function Encrypt($str, $key = EW_RANDOM_KEY) {"+"\r\n"+"		if ($str == \"\") {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"		$v = $this->str2long($str, true);"+"\r\n"+"		$k = $this->str2long($key, false);"+"\r\n"+"		$cntk = count($k);"+"\r\n"+"		if ($cntk < 4) {"+"\r\n"+"			for ($i = $cntk; $i < 4; $i++) {"+"\r\n"+"				$k[$i] = 0;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$n = count($v) - 1;"+"\r\n"+"		"+"\r\n"+"		$z = $v[$n];"+"\r\n"+"		$y = $v[0];"+"\r\n"+"		$delta = 0x9E3779B9;"+"\r\n"+"		$q = floor(6 + 52 / ($n + 1));"+"\r\n"+"		$sum = 0;"+"\r\n"+"		while (0 < $q--) {"+"\r\n"+"			$sum = $this->int32($sum + $delta);"+"\r\n"+"			$e = $sum >> 2 & 3;"+"\r\n"+"			for ($p = 0; $p < $n; $p++) {"+"\r\n"+"				$y = $v[$p + 1];"+"\r\n"+"				$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"				$z = $v[$p] = $this->int32($v[$p] + $mx);"+"\r\n"+"			}"+"\r\n"+"			$y = $v[0];"+"\r\n"+"			$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"			$z = $v[$n] = $this->int32($v[$n] + $mx);"+"\r\n"+"		}"+"\r\n"+"		return $this->UrlEncode($this->long2str($v, false));"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Decrypt"+"\r\n"+"	public function Decrypt($str, $key = EW_RANDOM_KEY) {"+"\r\n"+"		$str = $this->UrlDecode($str);"+"\r\n"+"		if ($str == \"\") {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"		$v = $this->str2long($str, false);"+"\r\n"+"		$k = $this->str2long($key, false);"+"\r\n"+"		$cntk = count($k);"+"\r\n"+"		if ($cntk < 4) {"+"\r\n"+"			for ($i = $cntk; $i < 4; $i++) {"+"\r\n"+"				$k[$i] = 0;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$n = count($v) - 1;"+"\r\n"+"		"+"\r\n"+"		$z = $v[$n];"+"\r\n"+"		$y = $v[0];"+"\r\n"+"		$delta = 0x9E3779B9;"+"\r\n"+"		$q = floor(6 + 52 / ($n + 1));"+"\r\n"+"		$sum = $this->int32($q * $delta);"+"\r\n"+"		while ($sum != 0) {"+"\r\n"+"			$e = $sum >> 2 & 3;"+"\r\n"+"			for ($p = $n; $p > 0; $p--) {"+"\r\n"+"				$z = $v[$p - 1];"+"\r\n"+"				$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"				$y = $v[$p] = $this->int32($v[$p] - $mx);"+"\r\n"+"			}"+"\r\n"+"			$z = $v[$n];"+"\r\n"+"			$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"			$y = $v[0] = $this->int32($v[0] - $mx);"+"\r\n"+"			$sum = $this->int32($sum - $delta);"+"\r\n"+"		}"+"\r\n"+"		return $this->long2str($v, true);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function int32($n) {"+"\r\n"+"		while ($n >= 2147483648) $n -= 4294967296;"+"\r\n"+"		while ($n <= -2147483649) $n += 4294967296;"+"\r\n"+"		return (int)$n;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function UrlEncode($string) {"+"\r\n"+"		$data = base64_encode($string);"+"\r\n"+"		return str_replace(array('+','/','='), array('-','_','.'), $data);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function UrlDecode($string) {"+"\r\n"+"		$data = str_replace(array('-','_','.'), array('+','/','='), $string);"+"\r\n"+"		return base64_decode($data);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encrypt"+"\r\n"+"function ew_Encrypt($str, $key = EW_RANDOM_KEY) {"+"\r\n"+"	$tea = new cTEA;"+"\r\n"+"	return $tea->Encrypt($str, $key);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Decrypt"+"\r\n"+"function ew_Decrypt($str, $key = EW_RANDOM_KEY) {"+"\r\n"+"	$tea = new cTEA;"+"\r\n"+"	return $tea->Decrypt($str, $key);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove XSS"+"\r\n"+"function ew_RemoveXSS($val) {"+"\r\n"+"	// Remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed "+"\r\n"+"	// This prevents some character re-spacing such as <java\\0script> "+"\r\n"+"	// Note that you have to handle splits with \\n, \\r, and \\t later since they *are* allowed in some inputs "+"\r\n"+"	$val = preg_replace('/([\\x00-\\x08][\\x0b-\\x0c][\\x0e-\\x20])/', '', $val); "+"\r\n"+"	 "+"\r\n"+"	// Straight replacements, the user should never need these since they're normal characters "+"\r\n"+"	// This prevents like <IMG SRC=&#X40&#X61&#X76&#X61&#X73&#X63&#X72&#X69&#X70&#X74&#X3A&#X61&#X6C&#X65&#X72&#X74&#X28&#X27&#X58&#X53&#X53&#X27&#X29> "+"\r\n"+"	$search = 'abcdefghijklmnopqrstuvwxyz'; "+"\r\n"+"	$search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; "+"\r\n"+"	$search .= '1234567890!@#$%^&*()'; "+"\r\n"+"	$search .= '~`\";:?+/={}[]-_|\\'\\\\'; "+"\r\n"+"	for ($i = 0; $i < strlen($search); $i++) { "+"\r\n"+"	   // ;? matches the ;, which is optional "+"\r\n"+"	   // 0{0,7} matches any padded zeros, which are optional and go up to 8 chars "+"\r\n"+"	 "+"\r\n"+"	   // &#x0040 @ search for the hex values "+"\r\n"+"	   $val = preg_replace('/(&#[x|X]0{0,8}'.dechex(ord($search[$i])).';?)/i', $search[$i], $val); // With a ; "+"\r\n"+"	   // &#00064 @ 0{0,7} matches '0' zero to seven times "+"\r\n"+"	   $val = preg_replace('/(&#0{0,8}'.ord($search[$i]).';?)/', $search[$i], $val); // With a ; "+"\r\n"+"	} "+"\r\n"+"	 "+"\r\n"+"	// Now the only remaining whitespace attacks are \\t, \\n, and \\r "+"\r\n"+"	$ra = $GLOBALS[\"EW_XSS_ARRAY\"]; // Note: Customize $EW_XSS_ARRAY in ewcfg*.php"+"\r\n"+"	 "+"\r\n"+"	$found = true; // Keep replacing as long as the previous round replaced something "+"\r\n"+"	while ($found == true) { "+"\r\n"+"	   $val_before = $val; "+"\r\n"+"	   for ($i = 0; $i < sizeof($ra); $i++) { "+"\r\n"+"	      $pattern = '/'; "+"\r\n"+"	      for ($j = 0; $j < strlen($ra[$i]); $j++) { "+"\r\n"+"	         if ($j > 0) { "+"\r\n"+"	            $pattern .= '('; "+"\r\n"+"	            $pattern .= '(&#[x|X]0{0,8}([9][a][b]);?)?'; "+"\r\n"+"	            $pattern .= '|(&#0{0,8}([9][10][13]);?)?'; "+"\r\n"+"	            $pattern .= ')?'; "+"\r\n"+"	         } "+"\r\n"+"	         $pattern .= $ra[$i][$j]; "+"\r\n"+"	      } "+"\r\n"+"	      $pattern .= '/i'; "+"\r\n"+"	      $replacement = substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2); // Add in <> to nerf the tag "+"\r\n"+"	      $val = preg_replace($pattern, $replacement, $val); // Filter out the hex tags "+"\r\n"+"	      if ($val_before == $val) { "+"\r\n"+"	         // No replacements were made, so exit the loop "+"\r\n"+"	         $found = false; "+"\r\n"+"	      } "+"\r\n"+"	   } "+"\r\n"+"	} "+"\r\n"+"	return $val; "+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check token"+"\r\n"+"function ew_CheckToken($token, $timeout = 0) {"+"\r\n"+"	if ($timeout <= 0)"+"\r\n"+"		$timeout = ew_SessionTimeoutTime();"+"\r\n"+"	return (time() - intval(ew_Decrypt($token))) < $timeout;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create token"+"\r\n"+"function ew_CreateToken() {"+"\r\n"+"	return ew_Encrypt(time());"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// HTTP request by cURL"+"\r\n"+"// Note: cURL must be enabled in PHP"+"\r\n"+"function ew_ClientUrl($url, $postdata = \"\", $method = \"GET\") {"+"\r\n"+"	if (!function_exists(\"curl_init\"))"+"\r\n"+"		die(\"cURL not installed.\");"+"\r\n"+"	$ch = curl_init();"+"\r\n"+"	$method = strtoupper($method);"+"\r\n"+"	if ($method == \"POST\") {"+"\r\n"+"		curl_setopt($ch, CURLOPT_URL, $url);"+"\r\n"+"		curl_setopt($ch, CURLOPT_POST, 1);"+"\r\n"+"		curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);"+"\r\n"+"	} elseif ($method == \"GET\") {"+"\r\n"+"		curl_setopt($ch, CURLOPT_URL, $url . \"?\" . $postdata);"+"\r\n"+"	}"+"\r\n"+"	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);"+"\r\n"+"	$res = curl_exec($ch);"+"\r\n"+"	curl_close($ch);"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Set client variable"+"\r\n"+"function ew_SetClientVar($name, $value) {"+"\r\n"+"	global $EW_CLIENT_VAR;"+"\r\n"+"	if (strval($name) <> \"\")"+"\r\n"+"		$EW_CLIENT_VAR[strval($name)] = $value;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Calculate date difference"+"\r\n"+"function ew_DateDiff($dateTimeBegin, $dateTimeEnd, $interval = \"d\") {"+"\r\n"+""+"\r\n"+"	$dateTimeBegin = strtotime($dateTimeBegin);"+"\r\n"+"	if ($dateTimeBegin === -1 || $dateTimeBegin === FALSE)"+"\r\n"+"		return FALSE;"+"\r\n"+"	"+"\r\n"+"	$dateTimeEnd = strtotime($dateTimeEnd);"+"\r\n"+"	if ($dateTimeEnd === -1 || $dateTimeEnd === FALSE)"+"\r\n"+"		return FALSE;"+"\r\n"+"	"+"\r\n"+"	$dif = $dateTimeEnd - $dateTimeBegin;"+"\r\n"+"	$arBegin = getdate($dateTimeBegin);"+"\r\n"+"	$dateBegin = mktime(0, 0, 0, $arBegin[\"mon\"], $arBegin[\"mday\"], $arBegin[\"year\"]);"+"\r\n"+"	$arEnd = getdate($dateTimeEnd);"+"\r\n"+"	$dateEnd = mktime(0, 0, 0, $arEnd[\"mon\"], $arEnd[\"mday\"], $arEnd[\"year\"]);"+"\r\n"+"	$difDate = $dateEnd - $dateBegin;"+"\r\n"+"	"+"\r\n"+"	switch ($interval) {"+"\r\n"+"		case \"s\": // Seconds"+"\r\n"+"			return $dif;"+"\r\n"+"		case \"n\": // Minutes"+"\r\n"+"			return ($dif > 0) ? floor($dif/60) : ceil($dif/60);"+"\r\n"+"		case \"h\": // Hours"+"\r\n"+"			return ($dif > 0) ? floor($dif/3600) : ceil($dif/3600);"+"\r\n"+"		case \"d\": // Days"+"\r\n"+"			return ($difDate > 0) ? floor($difDate/86400) : ceil($difDate/86400);"+"\r\n"+"		case \"w\": // Weeks"+"\r\n"+"			return ($difDate > 0) ? floor($difDate/604800) : ceil($difDate/604800);"+"\r\n"+"		case \"ww\": // Calendar weeks"+"\r\n"+"			$difWeek = (($dateEnd - $arEnd[\"wday\"]*86400) - ($dateBegin - $arBegin[\"wday\"]*86400))/604800;"+"\r\n"+"			return ($difWeek > 0) ? floor($difWeek) : ceil($difWeek);"+"\r\n"+"		case \"m\": // Months"+"\r\n"+"			return (($arEnd[\"year\"]*12 + $arEnd[\"mon\"]) -	($arBegin[\"year\"]*12 + $arBegin[\"mon\"]));"+"\r\n"+"		case \"yyyy\": // Years"+"\r\n"+"			return ($arEnd[\"year\"] - $arBegin[\"year\"]);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write global debug message"+"\r\n"+"function ew_DebugMsg() {"+"\r\n"+"	global $gsDebugMsg;"+"\r\n"+"	$msg = preg_replace('/^<br>\\n/', \"\", $gsDebugMsg);"+"\r\n"+"	$gsDebugMsg = \"\";"+"\r\n"+"	return ($msg <> \"\") ? \"<div class=\\\"alert alert-info ewAlert\\\">\" . $msg . \"</div>\" : \"\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write global debug message"+"\r\n"+"function ew_SetDebugMsg($v, $newline = TRUE) {"+"\r\n"+"	global $gsDebugMsg;"+"\r\n"+"	$gsDebugMsg .= $v;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Permission denied message"+"\r\n"+"function ew_DeniedMsg() {"+"\r\n"+"	global $Language;"+"\r\n"+"	return str_replace(\"%s\", ew_CurrentUrl(), $Language->Phrase(\"NoPermission\"));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Init array"+"\r\n"+"function &ew_InitArray($len, $value) {"+"\r\n"+"	if ($len > 0)"+"\r\n"+"		$ar = array_fill(0, $len, $value);"+"\r\n"+"	else"+"\r\n"+"		$ar = array();"+"\r\n"+"	return $ar;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Init 2D array"+"\r\n"+"function &ew_Init2DArray($len1, $len2, $value) {"+"\r\n"+"	return ew_InitArray($len1, ew_InitArray($len2, $value));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove elements from array by an array of keys and return the removed elements as array"+"\r\n"+"function ew_Splice(&$ar, $keys) {"+"\r\n"+"	$arkeys = array_fill_keys($keys, 0);"+"\r\n"+"	$res = array_intersect_key($ar, $arkeys);"+"\r\n"+"	$ar = array_diff_key($ar, $arkeys);"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Extract elements from array by an array of keys"+"\r\n"+"function ew_Slice(&$ar, $keys) {"+"\r\n"+"	$arkeys = array_fill_keys($keys, 0);"+"\r\n"+"	return array_intersect_key($ar, $arkeys);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"";
ewAr[161] = ""+"\r\n"+"/**"+"\r\n"+" * User Profile Class"+"\r\n"+" */"+"\r\n"+"class cUserProfile {"+"\r\n"+""+"\r\n"+"	var $Profile = array();"+"\r\n"+"	var $KeySep = EW_USER_PROFILE_KEY_SEPARATOR;"+"\r\n"+"	var $FldSep = EW_USER_PROFILE_FIELD_SEPARATOR;"+"\r\n"+"	var $TimeoutTime = EW_USER_PROFILE_SESSION_TIMEOUT;"+"\r\n"+"	var $MaxRetryCount = EW_USER_PROFILE_MAX_RETRY;"+"\r\n"+"	var $RetryLockoutTime = EW_USER_PROFILE_RETRY_LOCKOUT;"+"\r\n"+"	var $PasswordExpiryTime = EW_USER_PROFILE_PASSWORD_EXPIRE;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct() {"+"\r\n"+""+"\r\n"+"";
ewAr[162] = ""+"\r\n"+"		// Concurrent login checking"+"\r\n"+"		$this->Profile[EW_USER_PROFILE_SESSION_ID] = \"\";"+"\r\n"+"		$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME] = \"\";"+"\r\n"+"";
ewAr[163] = ""+"\r\n"+""+"\r\n"+"";
ewAr[164] = ""+"\r\n"+"		// Max login retry"+"\r\n"+"		$this->Profile[EW_USER_PROFILE_LOGIN_RETRY_COUNT] = 0;"+"\r\n"+"		$this->Profile[EW_USER_PROFILE_LAST_BAD_LOGIN_DATE_TIME] = \"\";"+"\r\n"+"";
ewAr[165] = ""+"\r\n"+""+"\r\n"+"";
ewAr[166] = ""+"\r\n"+"		// Password Expiry"+"\r\n"+"		$this->Profile[EW_USER_PROFILE_LAST_PASSWORD_CHANGED_DATE] = \"\";"+"\r\n"+"";
ewAr[167] = ""+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get value"+"\r\n"+"	function GetValue($Name) {"+"\r\n"+"		return @$this->Profile[$Name];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get value (alias)"+"\r\n"+"	function Get($Name) {"+"\r\n"+"		return $this->GetValue($Name);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set value"+"\r\n"+"	function SetValue($Name, $Value) {"+"\r\n"+"		$res = array_key_exists($Name, $this->Profile);"+"\r\n"+"		$this->Profile[$Name] = $Value;"+"\r\n"+"		return $res; // Return TRUE if existing value"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set value (alias)"+"\r\n"+"	function Set($Name, $Value) {"+"\r\n"+"		$this->SetValue($Name, $Value);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get language id"+"\r\n"+"	function GetLanguageId($usr) {"+"\r\n"+"		$p = $this->Profile; // Backup current profile"+"\r\n"+"		if ($this->LoadProfileFromDatabase($usr)) {"+"\r\n"+"			try {"+"\r\n"+"				$langid = @$this->Profile[EW_USER_PROFILE_LANGUAGE_ID];"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return $langid;"+"\r\n"+"			} catch (Exception $e) {"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return \"\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set language id"+"\r\n"+"	function SetLanguageId($usr, $langid) {"+"\r\n"+"		$p = $this->Profile; // Backup current profile"+"\r\n"+"		if ($this->LoadProfileFromDatabase($usr)) {"+"\r\n"+"			try {"+"\r\n"+"				$this->Profile[EW_USER_PROFILE_LANGUAGE_ID] = $langid;"+"\r\n"+"				$this->SaveProfileToDatabase($usr);"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return TRUE;"+"\r\n"+"			} catch (Exception $e) {"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return FALSE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load profile from database"+"\r\n"+"	function LoadProfileFromDatabase($usr) {"+"\r\n"+"		global $UserTable, $UserTableConn;"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return FALSE;"+"\r\n"+"		$sFilter = str_replace(\"%u\", ew_AdjustSql($usr, EW_USER_TABLE_DBID), EW_USER_NAME_FILTER);"+"\r\n"+"		// Get SQL from GetSQL function in <UserTable> class, <UserTable>info.php"+"\r\n"+"		$sSql = $UserTable->GetSQL($sFilter, \"\");"+"\r\n"+"		$rswrk = $UserTableConn->Execute($sSql);"+"\r\n"+"		if ($rswrk && !$rswrk->EOF) {"+"\r\n"+"			$this->LoadProfile($rswrk->fields(EW_USER_PROFILE_FIELD_NAME));"+"\r\n"+"			$rswrk->Close();"+"\r\n"+"			return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load profile for current user"+"\r\n"+"	function Load() {"+"\r\n"+"		if (empty($this->Profile))"+"\r\n"+"			$this->LoadProfileFromDatabase(CurrentUserName());"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load profile"+"\r\n"+"	function LoadProfile($Profile) {"+"\r\n"+"		$ar = unserialize(strval($Profile));"+"\r\n"+"		$this->Profile = (is_array($ar)) ? $ar : array();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Write profile"+"\r\n"+"	function WriteProfile() {"+"\r\n"+"		var_dump($this->Profile);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Clear profile"+"\r\n"+"	function ClearProfile() {"+"\r\n"+"		$this->Profile = array();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Clear profile (alias)"+"\r\n"+"	function Clear() {"+"\r\n"+"		$this->ClearProfile();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save profile to database"+"\r\n"+"	function SaveProfileToDatabase($usr) {"+"\r\n"+"		global $UserTableConn;"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return FALSE;"+"\r\n"+"		$sFilter = str_replace(\"%u\", ew_AdjustSql($usr, EW_USER_TABLE_DBID), EW_USER_NAME_FILTER);"+"\r\n"+"		$sSql = \"UPDATE \" . EW_USER_TABLE ."+"\r\n"+"			\" SET \" . ew_QuotedName(EW_USER_PROFILE_FIELD_NAME, EW_USER_TABLE_DBID) . \"='\" ."+"\r\n"+"			ew_AdjustSql($this->ProfileToString(), EW_USER_TABLE_DBID) . \"' WHERE \" . $sFilter;"+"\r\n"+"		$UserTableConn->Execute($sSql);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save profile for current user"+"\r\n"+"	function Save() {"+"\r\n"+"		$this->SaveProfileToDatabase(CurrentUserName());"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Profile to string"+"\r\n"+"	function ProfileToString() {"+"\r\n"+"		return serialize($this->Profile);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"";
ewAr[168] = ""+"\r\n"+"	// Is valid user"+"\r\n"+"	function IsValidUser($usr, $SessionID) {"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return TRUE;"+"\r\n"+"		$this->LoadProfileFromDatabase($usr);"+"\r\n"+"		$sessid = strval(@$this->Profile[EW_USER_PROFILE_SESSION_ID]);"+"\r\n"+"		$dt = strval(@$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME]);"+"\r\n"+"		$valid = FALSE;"+"\r\n"+"		if ($sessid == \"\" || $sessid == $SessionID || $dt == \"\") {"+"\r\n"+"			$sessid = $SessionID;"+"\r\n"+"			$dt = ew_StdCurrentDateTime();"+"\r\n"+"			$valid = TRUE;"+"\r\n"+"		} elseif ($sessid <> \"\" && $dt <> \"\") {"+"\r\n"+"			$ars = explode(\",\", $sessid);"+"\r\n"+"			$ard = explode(\",\", $dt);"+"\r\n"+"			$cnt = (count($ars) <= count($ard)) ? count($ars) : count($ard);"+"\r\n"+"			$ars = array_slice($ars, 0, $cnt);"+"\r\n"+"			$ard = array_slice($ard, 0, $cnt);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				$sessid = $ars[$i];"+"\r\n"+"				$dt = $ard[$i];"+"\r\n"+"				if ($sessid == \"\" || $sessid == $SessionID || $dt == \"\" || ew_DateDiff($dt, ew_StdCurrentDateTime(), \"n\") > $this->TimeoutTime) {"+"\r\n"+"					$valid = TRUE;"+"\r\n"+"					$ars[$i] = $SessionID;"+"\r\n"+"					$ard[$i] = ew_StdCurrentDateTime();"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if (!$valid && $cnt < EW_USER_PROFILE_CONCURRENT_SESSION_COUNT) {"+"\r\n"+"				$valid = TRUE;"+"\r\n"+"				$ars[] = $SessionID;"+"\r\n"+"				$ard[] = ew_StdCurrentDateTime();"+"\r\n"+"			}"+"\r\n"+"			$sessid = implode(\",\", $ars);"+"\r\n"+"			$dt = implode(\",\", $ard);"+"\r\n"+"		}"+"\r\n"+"		if ($valid) {"+"\r\n"+"			$this->Profile[EW_USER_PROFILE_SESSION_ID] = $sessid;"+"\r\n"+"			$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME] = $dt;"+"\r\n"+"			$this->SaveProfileToDatabase($usr);"+"\r\n"+"		}"+"\r\n"+"		return $valid;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Remove user"+"\r\n"+"	function RemoveUser($usr, $SessionID) {"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return TRUE;"+"\r\n"+"		$this->LoadProfileFromDatabase($usr);"+"\r\n"+"		$sessid = strval(@$this->Profile[EW_USER_PROFILE_SESSION_ID]);"+"\r\n"+"		$dt = strval(@$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME]);"+"\r\n"+"		if ($sessid == $SessionID) {"+"\r\n"+"			$this->Profile[EW_USER_PROFILE_SESSION_ID] = \"\";"+"\r\n"+"			$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME] = \"\";"+"\r\n"+"			$this->SaveProfileToDatabase($usr);"+"\r\n"+"			return TRUE;"+"\r\n"+"		} elseif ($sessid <> \"\" && $dt <> \"\") {"+"\r\n"+"			$ars = explode(\",\", $sessid);"+"\r\n"+"			$ard = explode(\",\", $dt);"+"\r\n"+"			$cnt = (count($ars) <= count($ard)) ? count($ars) : count($ard);"+"\r\n"+"			$ars = array_slice($ars, 0, $cnt);"+"\r\n"+"			$ard = array_slice($ard, 0, $cnt);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				$sessid = $ars[$i];"+"\r\n"+"				$dt = $ard[$i];"+"\r\n"+"				if ($sessid == $SessionID) {"+"\r\n"+"					unset($ars[$i]);"+"\r\n"+"					unset($ard[$i]);"+"\r\n"+"					$this->Profile[EW_USER_PROFILE_SESSION_ID] = implode(\",\", $ars);"+"\r\n"+"					$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME] = implode(\",\", $ard);"+"\r\n"+"					$this->SaveProfileToDatabase($usr);"+"\r\n"+"					return TRUE;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Reset concurrent user"+"\r\n"+"	function ResetConcurrentUser($usr) {"+"\r\n"+"		$p = $this->Profile; // Backup current profile"+"\r\n"+"		if ($this->LoadProfileFromDatabase($usr)) {"+"\r\n"+"			try {"+"\r\n"+"				$this->Profile[EW_USER_PROFILE_SESSION_ID] = \"\";"+"\r\n"+"				$this->Profile[EW_USER_PROFILE_LAST_ACCESSED_DATE_TIME] = \"\";"+"\r\n"+"				$this->SaveProfileToDatabase($usr);"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return TRUE;"+"\r\n"+"			} catch (Exception $e) {"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return FALSE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"";
ewAr[169] = ""+"\r\n"+""+"\r\n"+"";
ewAr[170] = ""+"\r\n"+"	// Exceed login retry"+"\r\n"+"	function ExceedLoginRetry($usr) {"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return FALSE;"+"\r\n"+"		$this->LoadProfileFromDatabase($usr);"+"\r\n"+"		$retrycount = @$this->Profile[EW_USER_PROFILE_LOGIN_RETRY_COUNT];"+"\r\n"+"		$dt = @$this->Profile[EW_USER_PROFILE_LAST_BAD_LOGIN_DATE_TIME];"+"\r\n"+"		if (intval($retrycount) >= intval($this->MaxRetryCount)) {"+"\r\n"+"			if (ew_DateDiff($dt, ew_StdCurrentDateTime(), \"n\") < $this->RetryLockoutTime) {"+"\r\n"+"				$exceed = TRUE;"+"\r\n"+"			} else {"+"\r\n"+"				$exceed = FALSE;"+"\r\n"+"				$this->Profile[EW_USER_PROFILE_LOGIN_RETRY_COUNT] = 0;"+"\r\n"+"				$this->SaveProfileToDatabase($usr);"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$exceed = FALSE;"+"\r\n"+"		}"+"\r\n"+"		return $exceed;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Reset login retry"+"\r\n"+"	function ResetLoginRetry($usr) {"+"\r\n"+"		$p = $this->Profile; // Backup current profile"+"\r\n"+"		if ($this->LoadProfileFromDatabase($usr)) {"+"\r\n"+"			try {"+"\r\n"+"				$this->Profile[EW_USER_PROFILE_LOGIN_RETRY_COUNT] = 0;"+"\r\n"+"				$this->SaveProfileToDatabase($usr);"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return TRUE;"+"\r\n"+"			} catch (Exception $e) {"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return FALSE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"";
ewAr[171] = ""+"\r\n"+""+"\r\n"+"";
ewAr[172] = ""+"\r\n"+"	// Password expired"+"\r\n"+"	function PasswordExpired($usr) {"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return FALSE;"+"\r\n"+"		$this->LoadProfileFromDatabase($usr);"+"\r\n"+"		$dt = @$this->Profile[EW_USER_PROFILE_LAST_PASSWORD_CHANGED_DATE];"+"\r\n"+"		if (strval($dt) == \"\")"+"\r\n"+"			$dt = ew_StdCurrentDate();"+"\r\n"+"		return (ew_DateDiff($dt, ew_StdCurrentDate(), \"d\") >= $this->PasswordExpiryTime);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Empty password changed date"+"\r\n"+"	function EmptyPasswordChangedDate($usr) {"+"\r\n"+"		if ($usr == \"\" || $usr == EW_ADMIN_USER_NAME) // Ignore hard code admin"+"\r\n"+"			return FALSE;"+"\r\n"+"		$this->LoadProfileFromDatabase($usr);"+"\r\n"+"		$dt = @$this->Profile[EW_USER_PROFILE_LAST_PASSWORD_CHANGED_DATE];"+"\r\n"+"		return (strval($dt) == \"\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set password expired"+"\r\n"+"	function SetPasswordExpired($usr) {"+"\r\n"+"		$p = $this->Profile; // Backup current profile"+"\r\n"+"		if ($this->LoadProfileFromDatabase($usr)) {"+"\r\n"+"			try {"+"\r\n"+"				$this->Profile[EW_USER_PROFILE_LAST_PASSWORD_CHANGED_DATE] = ew_StdDate(strtotime('-' . ($this->PasswordExpiryTime+1) . ' days'));"+"\r\n"+"				$this->SaveProfileToDatabase($usr);"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return TRUE;"+"\r\n"+"			} catch (Exception $e) {"+"\r\n"+"				$this->Profile = $p; // Restore current profile"+"\r\n"+"				return FALSE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"";
ewAr[173] = ""+"\r\n"+""+"\r\n"+"}"+"\r\n"+"";
ewAr[174] = ""+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Validation functions"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Check date format"+"\r\n"+"// Format: std/stdshort/us/usshort/euro/euroshort"+"\r\n"+"function ew_CheckDateEx($value, $format, $sep) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	while (strpos($value, \"  \") !== FALSE)"+"\r\n"+"		$value = str_replace(\"  \", \" \", $value);"+"\r\n"+"	$value = trim($value);"+"\r\n"+"	$arDT = explode(\" \", $value);"+"\r\n"+"	if (count($arDT) > 0) {"+"\r\n"+"		if (preg_match('/^([0-9]{4})-([0][1-9]|[1][0-2])-([0][1-9]|[1|2][0-9]|[3][0|1])$/', $arDT[0], $matches)) { // Accept yyyy-mm-dd"+"\r\n"+"			$sYear = $matches[1];"+"\r\n"+"			$sMonth = $matches[2];"+"\r\n"+"			$sDay = $matches[3];"+"\r\n"+"		} else {"+"\r\n"+"			$wrksep = \"\\\\$sep\";"+"\r\n"+"			switch ($format) {"+"\r\n"+"				case \"std\":"+"\r\n"+"					$pattern = '/^([0-9]{4})' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"stdshort\":"+"\r\n"+"					$pattern = '/^([0-9]{2})' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"us\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0-9]{4})$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"usshort\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0-9]{2})$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"euro\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0-9]{4})$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"euroshort\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0-9]{2})$/';"+"\r\n"+"					break;"+"\r\n"+"			}"+"\r\n"+"			if (!preg_match($pattern, $arDT[0])) return FALSE;"+"\r\n"+"			$arD = explode($sep, $arDT[0]); // Change EW_DATE_SEPARATOR to $sep"+"\r\n"+"			switch ($format) {"+"\r\n"+"				case \"std\":"+"\r\n"+"				case \"stdshort\":"+"\r\n"+"					$sYear = ew_UnformatYear($arD[0]);"+"\r\n"+"					$sMonth = $arD[1];"+"\r\n"+"					$sDay = $arD[2];"+"\r\n"+"					break;"+"\r\n"+"				case \"us\":"+"\r\n"+"				case \"usshort\":"+"\r\n"+"					$sYear = ew_UnformatYear($arD[2]);"+"\r\n"+"					$sMonth = $arD[0];"+"\r\n"+"					$sDay = $arD[1];"+"\r\n"+"					break;"+"\r\n"+"				case \"euro\":"+"\r\n"+"				case \"euroshort\":"+"\r\n"+"					$sYear = ew_UnformatYear($arD[2]);"+"\r\n"+"					$sMonth = $arD[1];"+"\r\n"+"					$sDay = $arD[0];"+"\r\n"+"					break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (!ew_CheckDay($sYear, $sMonth, $sDay)) return FALSE;"+"\r\n"+"	}"+"\r\n"+"	if (count($arDT) > 1 && !ew_CheckTime($arDT[1])) return FALSE;"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Unformat 2 digit year to 4 digit year"+"\r\n"+"function ew_UnformatYear($yr) {"+"\r\n"+"	if (strlen($yr) == 2) {"+"\r\n"+"		if ($yr > EW_UNFORMAT_YEAR)"+"\r\n"+"			return \"19\" . $yr;"+"\r\n"+"		else"+"\r\n"+"			return \"20\" . $yr;"+"\r\n"+"	} else {"+"\r\n"+"		return $yr;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Date format (yyyy/mm/dd)"+"\r\n"+"function ew_CheckDate($value) {"+"\r\n"+"	return ew_CheckDateEx($value, \"std\", EW_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Date format (yy/mm/dd)"+"\r\n"+"function ew_CheckShortDate($value) {"+"\r\n"+"	return ew_CheckDateEx($value, \"stdshort\", EW_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US Date format (mm/dd/yyyy)"+"\r\n"+"function ew_CheckUSDate($value) {"+"\r\n"+"	return ew_CheckDateEx($value, \"us\", EW_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US Date format (mm/dd/yy)"+"\r\n"+"function ew_CheckShortUSDate($value) {"+"\r\n"+"	return ew_CheckDateEx($value, \"usshort\", EW_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Euro Date format (dd/mm/yyyy)"+"\r\n"+"function ew_CheckEuroDate($value) {"+"\r\n"+"	return ew_CheckDateEx($value, \"euro\", EW_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Euro Date format (dd/mm/yy)"+"\r\n"+"function ew_CheckShortEuroDate($value) {"+"\r\n"+"	return ew_CheckDateEx($value, \"euroshort\", EW_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check day"+"\r\n"+"function ew_CheckDay($checkYear, $checkMonth, $checkDay) {"+"\r\n"+"	$maxDay = 31;"+"\r\n"+"	if ($checkMonth == 4 || $checkMonth == 6 ||	$checkMonth == 9 || $checkMonth == 11) {"+"\r\n"+"		$maxDay = 30;"+"\r\n"+"	} elseif ($checkMonth == 2)	{"+"\r\n"+"		if ($checkYear % 4 > 0) {"+"\r\n"+"			$maxDay = 28;"+"\r\n"+"		} elseif ($checkYear % 100 == 0 && $checkYear % 400 > 0) {"+"\r\n"+"			$maxDay = 28;"+"\r\n"+"		} else {"+"\r\n"+"			$maxDay = 29;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return ew_CheckRange($checkDay, 1, $maxDay);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check integer"+"\r\n"+"function ew_CheckInteger($value) {"+"\r\n"+"	global $DEFAULT_DECIMAL_POINT;"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	if (strpos($value, $DEFAULT_DECIMAL_POINT) !== FALSE)"+"\r\n"+"		return FALSE;"+"\r\n"+"	return ew_CheckNumber($value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check number"+"\r\n"+"function ew_CheckNumber($value) {"+"\r\n"+"	global $DEFAULT_THOUSANDS_SEP, $DEFAULT_DECIMAL_POINT;"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$pat = '/^[+-]?(\\d{1,3}(' . (($DEFAULT_THOUSANDS_SEP) ? '\\\\' . $DEFAULT_THOUSANDS_SEP . '?' : '') . '\\d{3})*(\\\\' ."+"\r\n"+"		$DEFAULT_DECIMAL_POINT . '\\d+)?|\\\\' . $DEFAULT_DECIMAL_POINT . '\\d+)$/';"+"\r\n"+"	return preg_match($pat, $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check range"+"\r\n"+"function ew_CheckRange($value, $min, $max) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	if (is_int($min) || is_float($min) || is_int($max) || is_float($max)) { // Number"+"\r\n"+"		if (ew_CheckNumber($value))"+"\r\n"+"			$value = floatval(ew_StrToFloat($value));"+"\r\n"+"	}"+"\r\n"+"	if ((!is_null($min) && $value < $min) || (!is_null($max) && $value > $max))"+"\r\n"+"		return FALSE;"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check time"+"\r\n"+"function ew_CheckTime($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US phone number"+"\r\n"+"function ew_CheckPhone($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^\\(\\d{3}\\) ?\\d{3}( |-)?\\d{4}|^\\d{3}( |-)?\\d{3}( |-)?\\d{4}$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US zip code"+"\r\n"+"function ew_CheckZip($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^\\d{5}$|^\\d{5}-\\d{4}$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check credit card"+"\r\n"+"function ew_CheckCreditCard($value, $type=\"\") {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$creditcard = array(\"visa\" => \"/^4\\d{3}[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"mastercard\" => \"/^5[1-5]\\d{2}[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"discover\" => \"/^6011[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"amex\" => \"/^3[4,7]\\d{13}$/\","+"\r\n"+"		\"diners\" => \"/^3[0,6,8]\\d{12}$/\","+"\r\n"+"		\"bankcard\" => \"/^5610[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"jcb\" => \"/^[3088|3096|3112|3158|3337|3528]\\d{12}$/\","+"\r\n"+"		\"enroute\" => \"/^[2014|2149]\\d{11}$/\","+"\r\n"+"		\"switch\" => \"/^[4903|4911|4936|5641|6333|6759|6334|6767]\\d{12}$/\");"+"\r\n"+"	if (empty($type))	{"+"\r\n"+"		$match = FALSE;"+"\r\n"+"		foreach ($creditcard as $type => $pattern) {"+"\r\n"+"			if (@preg_match($pattern, $value) == 1) {"+"\r\n"+"				$match = TRUE;"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return ($match) ? ew_CheckSum($value) : FALSE;"+"\r\n"+"	}	else {"+"\r\n"+"		if (!preg_match($creditcard[strtolower(trim($type))], $value)) return FALSE;"+"\r\n"+"		return ew_CheckSum($value);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check sum"+"\r\n"+"function ew_CheckSum($value) {"+"\r\n"+"	$value = str_replace(array('-',' '), array('',''), $value);"+"\r\n"+"	$checksum = 0;"+"\r\n"+"	for ($i=(2-(strlen($value) % 2)); $i<=strlen($value); $i+=2)"+"\r\n"+"		$checksum += (int)($value[$i-1]);"+"\r\n"+"  for ($i=(strlen($value)%2)+1; $i <strlen($value); $i+=2) {"+"\r\n"+"	  $digit = (int)($value[$i-1]) * 2;"+"\r\n"+"		$checksum += ($digit < 10) ? $digit : ($digit-9);"+"\r\n"+"  }"+"\r\n"+"	return ($checksum % 10 == 0);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US social security number"+"\r\n"+"function ew_CheckSSC($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^(?!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -]?)(?!00)\\d\\d\\3(?!0000)\\d{4}$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check emails"+"\r\n"+"function ew_CheckEmailList($value, $email_cnt) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$emailList = str_replace(\",\", \";\", $value);"+"\r\n"+"	$arEmails = explode(\";\", $emailList);"+"\r\n"+"	$cnt = count($arEmails);"+"\r\n"+"	if ($cnt > $email_cnt && $email_cnt > 0)"+"\r\n"+"		return FALSE;"+"\r\n"+"	foreach ($arEmails as $email) {"+"\r\n"+"		if (!ew_CheckEmail($email))"+"\r\n"+"			return FALSE;"+"\r\n"+"	}"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check email"+"\r\n"+"function ew_CheckEmail($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^[\\w.%+-]+@[\\w.-]+\\.[A-Z]{2,18}$/i', trim($value));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check GUID"+"\r\n"+"function ew_CheckGUID($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$p1 = '/^\\{\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\}$/';"+"\r\n"+"	$p2 = '/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/';"+"\r\n"+"	return preg_match($p1, $value) || preg_match($p2, $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check file extension"+"\r\n"+"function ew_CheckFileType($value, $exts = EW_UPLOAD_ALLOWED_FILE_EXT) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$extension = substr(strtolower(strrchr($value, \".\")), 1);"+"\r\n"+"	$allowExt = explode(\",\", strtolower($exts));"+"\r\n"+"	return (in_array($extension, $allowExt) || trim($exts) == \"\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check empty string"+"\r\n"+"function ew_EmptyStr($value) {"+"\r\n"+"	$str = strval($value);"+"\r\n"+"	$str = str_replace(\"&nbsp;\", \"\", $str);"+"\r\n"+"	return (trim($str) == \"\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check empty file"+"\r\n"+"function ew_Empty($value) {"+"\r\n"+"	return is_null($value) || strlen($value) == 0;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check by preg"+"\r\n"+"function ew_CheckByRegEx($value, $pattern) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match($pattern, $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Include shared code"+"\r\n"+"include_once \"";
ewAr[175] = "\";"+"\r\n"+""+"\r\n"+"";
ewAr[176] = ""+"\r\n"+"// Include html2text"+"\r\n"+"include_once \"html2text/html2text.php\";"+"\r\n"+"";
ewAr[177] = ""+"\r\n"+""+"\r\n"+"?>"+"\r\n"+"";

// *** Start Session phpcommon-config (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[1]);

	// Page object
	sPageObj = ew_PageObj();

	// Form object
	sFormName = ew_FormObj();

	// Handle grid object
	if (CTRL.CtrlID == "gridcls")
		sCtrlID = "grid";
	else
		sCtrlID = CTRL.CtrlID;

	// Control type
	switch (CTRL.CtrlType.toLowerCase()) {
		case "table":
			sCtrlType = "Table";
			break;
		case "report":
			sCtrlType = "Table";
			break;
		case "other":
			sCtrlType = "Other";
			break;
		default:
			sCtrlType = "Other";
			break;
	}

	// Common files
	sFnDefault = ew_GetFileNameByCtrlID("default");
	var sFnHomePage = PROJ.StartPage;
	if (sFnHomePage == "") sFnHomePage = PROJ.DefaultPage;
	if (sFnHomePage == "") sFnHomePage = sFnDefault;
	sFnLogin = ew_GetFileNameByCtrlID("login");
	sFnLogout = ew_GetFileNameByCtrlID("logout");
	sFnRegister = ew_GetFileNameByCtrlID("register");
	sFnForgotPwd = ew_GetFileNameByCtrlID("forgotpwd");
	sFnChangePwd = ew_GetFileNameByCtrlID("changepwd");
	if (DB.UseDynamicUserLevel && ew_IsNotEmpty(DB.UserLevelTbl) && ew_IsNotEmpty(DB.UserLevelIdFld)) {
		sFnUserPriv = ew_GetFileNameByCtrlID("userpriv");
		if (typeof(TABLE) != "undefined") WRKTABLE = TABLE; // Save table
		TABLE = DB.Tables(DB.UserLevelTbl);
		sUserLevelTblVar = TABLE.TblVar;
		sFnUserLevelTableList = ew_GetFileNameByCtrlID("list");
		WRKFIELD = TABLE.Fields(DB.UserLevelIdFld);
		sUserLevelIDFldParm = WRKFIELD.FldParm;
		sUrlUserPrivQuoted = "\"" + sFnUserPriv + "?" + sUserLevelIDFldParm + "=\" . $this->" + sUserLevelIDFldParm + "->CurrentValue";
		if (typeof(WRKTABLE) != "undefined") TABLE = WRKTABLE; // Restore table
	}
	
	// JavasSript popup message
	bUseJavaScriptMessage = PROJ.GetV("UseJavaScriptMessage");

	// Disable submit button
	bDisableButtonOnSubmit = PROJ.GetV("DisableButtonOnSubmit");

	// Language files
	sLanguageFiles = PROJ.LanguageFiles;
	sDefaultLanguageFile = PROJ.DefaultLanguageFile;
	if (sLanguageFiles == "") sLanguageFiles = "english.xml";
	if (sDefaultLanguageFile == "") sDefaultLanguageFile = "english.xml";
	arLanguageFile = sLanguageFiles.split(",");
	bMultiLanguage = PROJ.MultiLanguage;

	// CSS classes
	ewCSSDesktopTableClass = " class=\"table table-bordered table-striped ewDesktopTable\"";
	if (CTRL.CtrlID.toLowerCase() == "list" || CTRL.CtrlID.toLowerCase() == "grid" ||
		CTRL.CtrlID.toLowerCase() == "delete" ||
		CTRL.CtrlID.toLowerCase() == "userpriv" || CTRL.CtrlID.toLowerCase() == "master") {
		ewCSSTableClass = " class=\"table ewTable\"";
	} else if (CTRL.CtrlID.toLowerCase() == "preview") {
		ewCSSTableClass = " class=\"table ewTable ewPreviewTable\"";
	} else if (CTRL.CtrlID.toLowerCase() == "addopt") {
		ewCSSTableClass = " class=\"table ewTableAddOpt\"";
	} else if (CTRL.CtrlID.toLowerCase() == "add" || CTRL.CtrlID.toLowerCase() == "register" ||
		CTRL.CtrlID.toLowerCase() == "edit" || CTRL.CtrlID.toLowerCase() == "update" || CTRL.CtrlID.toLowerCase() == "search") {
		ewCSSTableClass = "";		
	} else {
		ewCSSTableClass = " class=\"table table-bordered table-striped ewViewTable\"";
	}
	if (CTRL.CtrlType.toLowerCase() == "table" || CTRL.CtrlType.toLowerCase() == "report")
		ewTableId = "tbl_" + TABLE.TblVar + CTRL.CtrlID;
	else
		ewTableId = "tbl_" + CTRL.CtrlID;
	ewCSSTableHeaderClass = " class=\"ewTableHeader\"";
	//ewCSSTableRowClass = " class=\"ewTableRow\"";
	ewCSSTableRowClass = "";
	ewCSSTableAltRowClass = " class=\"ewTableAltRow\"";
	ewCSSHighlightClass = " class=\"ewTableHighlightRow\"";
	ewCSSSelectClass = " class=\"ewTableSelectRow\"";
	ewCSSTableFooterClass = " class=\"ewTableFooter\"";
	// Report
	if (CTRL.CtrlType.toLowerCase() == "report") {
		ewCSSGroupField = " class=\"ewGroupField\"";
		ewCSSGroupName = " class=\"ewGroupName\"";
		ewCSSGroupHeader = " class=\"ewGroupHeader\"";
		ewCSSGroupSummary = " class=\"ewGroupSummary\"";
		ewCSSGroupAggregate = " class=\"ewGroupAggregate\"";
		ewCSSGrandSummary = " class=\"ewGrandSummary\"";
		ewCSSGroupIndent = " class=\"ewGroupIndent\"";
	}
	// Message
	ewCSSMsg = " class=\"ewMessage\"";
	// Bootstrap 3 classes
	ewBootstrapLeftColumnClass = "col-sm-2";
	ewBootstrapRightColumnClass = "col-sm-10";
	ewBootstrapOffsetClass = "col-sm-offset-2 col-sm-10";
	ewBootstrapLabelClass = ewBootstrapLeftColumnClass + " control-label ewLabel";
	ewBootstrapInputClass = "form-control ewControl";

	// Get mobile max width
	var sVisibleMobileClass = "";
	var sHiddenMobileClass = "";
	if (PROJ.GetV("UseResponsiveLayout")) {
		sVisibleMobileClass = "visible-xs";
		sHiddenMobileClass = "hidden-xs";
	}

	// Security
	bSecurityEnabled = !(PROJ.SecType == "None" || PROJ.SecType == "");
	bHardCodeAdmin = (PROJ.SecType == "Both" || PROJ.SecType == "Hard Code");
	var bUserTable = ew_HasUserTable();
	sSecTblVar = "";
	if (bUserTable) {
		SECTABLE = DB.Tables(PROJ.SecTbl);
		sSecTblVar = SECTABLE.TblVar;
	}
	bStaticUserLevel = (bUserTable && (!DB.UseDynamicUserLevel && ew_IsNotEmpty(DB.SecUserLevelFld)));
	bDynamicUserLevel = (bUserTable && (DB.UseDynamicUserLevel && ew_IsNotEmpty(DB.UserLevelTbl) && ew_IsNotEmpty(DB.SecUserLevelFld)));
	bUserLevel = (bStaticUserLevel || bDynamicUserLevel);
	bUserID = (bUserTable && ew_IsNotEmpty(DB.SecuUserIDFld));
	bParentUserID = (bUserID && ew_IsNotEmpty(DB.SecuParentUserIDFld));
	
	bUserProfile = (bUserTable && ew_IsNotEmpty(DB.SecUserProfileFld));
	bCheckConcurrentUser = (bUserProfile && PROJ.GetV("CheckConcurrentUser"));
	bCheckLoginRetry = (bUserProfile && PROJ.GetV("CheckLoginRetry"));
	bCheckPasswordExpiry = (bUserProfile && PROJ.GetV("CheckPasswordExpiry"));
	bResetConcurrentUser = (bCheckConcurrentUser && PROJ.GetV("ResetConcurrentUser"));
	bResetLoginRetry = (bCheckLoginRetry && PROJ.GetV("ResetLoginRetry"));
	bSetPasswordExpired = (bCheckPasswordExpiry && PROJ.GetV("SetPasswordExpired"));
	bResendRegisterEmail = (bUserTable && PROJ.SecRegisterEmail && ew_IsNotEmpty(PROJ.SecEmailFld) && PROJ.GetV("ResendRegisterEmail"));

	bCheckPasswordStrength = PROJ.GetV("CheckPasswordStrength");
	iMinPasswordStrength = PROJ.GetV("MinPasswordStrength");
	bGeneratePassword = PROJ.GetV("GeneratePassword");
	iGenPasswordLength = PROJ.GetV("GenPasswordLength");

	sSubmitButtonClass = "btn btn-primary ewButton";
	sResetButtonClass = "btn btn-default ewButton";
	sCancelButtonClass = sResetButtonClass;

	// Use place holder for textbox
	sUsePlaceHolder = PROJ.GetV("UsePlaceHolder");

	// Cutom file relative paths
	sRelativePath = "";
	sRelativePathPrefix = "";
	sAppRootRelativePath = "";

	bMultiPage = false;
	bShowMultiPageForDetails = false;

	bUseTabularFormForDesktop = PROJ.GetV("UseTabularFormForDesktop");

ewSB.Append(ewAr[2]);
// *** End Session phpcommon-config (key, 2/14/2016 9:08:34 PM)
// *** Start Session fieldclass (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[3]);

	var sFnFileViewer = ew_GetFileNameByCtrlID("file");

	var fn = ew_GetFileNameByCtrlID("info", "%cls%");
	// Database name
	sDbVar = DB.DBVar;
	sDbHelperFile = ew_GetFileNameByCtrlID("dbhelper");

ewSB.Append(ewAr[4]);
 if (PROJ.GetV("GenDatabaseHelper")) { 
ewSB.Append(ewAr[5]);
ewSB.Append(ew_Quote(sDbHelperFile));
ewSB.Append(ewAr[6]);
 } 
ewSB.Append(ewAr[7]);
ewSB.Append(ew_Quote(fn));
ewSB.Append(ewAr[8]);
 if (PROJ.OutputNameLCase) { 
ewSB.Append(ewAr[9]);
 } 
ewSB.Append(ewAr[10]);
 if (PROJ.GetV("GenDatabaseHelper")) { 
ewSB.Append(ewAr[11]);

	var dbcnt = 0;
	for (var i = 1, len = PROJ.LINKDBS.Count(); i <= len; i++) {
		var db = PROJ.LINKDBS.Seq(i);
		var dbid = db.DBID;
		var sDbName = db.DBName;
		var sLinkDbVar = db.DBVar;
		dbcnt += 1;
		var sCond = (dbcnt == 1) ? "if" : "elseif";

ewSB.Append(ewAr[12]);
ewSB.Append(sCond);
ewSB.Append(ewAr[13]);
ewSB.Append(dbid);
ewSB.Append(ewAr[14]);
ewSB.Append(i);
ewSB.Append(ewAr[15]);
ewSB.Append(dbid);
ewSB.Append(ewAr[16]);
ewSB.Append(sLinkDbVar);
ewSB.Append(ewAr[17]);

	}
	if (dbcnt > 0) {

ewSB.Append(ewAr[18]);
ewSB.Append(sDbVar);
ewSB.Append(ewAr[19]);

	} else { // No link database

ewSB.Append(ewAr[20]);
ewSB.Append(sDbVar);
ewSB.Append(ewAr[21]);

	}

ewSB.Append(ewAr[22]);
 } 
ewSB.Append(ewAr[23]);
ewSB.Append(PROJ.ProjID);
ewSB.Append(ewAr[24]);
ewSB.Append(sFnFileViewer);
ewSB.Append(ewAr[25]);
ewSB.Append(sFnFileViewer);
ewSB.Append(ewAr[26]);
ewSB.Append(ewAr[27]);
ewSB.Append(ewAr[28]);
ewSB.Append(sFnHomePage);
ewSB.Append(ewAr[29]);
ewSB.Append(ew_Quote(ew_CustomScriptTag("%t", "oh", "%c")).replace("%t", "\" . $ScriptId . \"").replace("%c", "\" . $ScriptClassName . \""));
ewSB.Append(ewAr[30]);
ewSB.Append(ew_Quote(ew_CustomScriptTag("%t", "ob", "%c", "%i")).replace("%t", "\" . $ScriptId . \"").replace("%i", "\" . $RowCnt . \"").replace("%c", "\" . $ScriptClassName . \""));
ewSB.Append(ewAr[31]);
ewSB.Append(ew_Quote(ew_CustomScriptTag("%t", "of", "%c")).replace("%t", "\" . $ScriptId . \"").replace("%c", "\" . $ScriptClassName . \""));
ewSB.Append(ewAr[32]);
ewSB.Append(ew_Quote(ew_CustomScriptTag("%t", "o2h", "%c")).replace("%t", "\" . $ScriptId . \"").replace("%c", "\" . $ScriptClassName . \""));
ewSB.Append(ewAr[33]);
ewSB.Append(ew_Quote(ew_CustomScriptTag("%t", "o2b", "%c", "%i")).replace("%t", "\" . $ScriptId . \"").replace("%i", "\" . $RowCnt . \"").replace("%c", "\" . $ScriptClassName . \""));
ewSB.Append(ewAr[34]);
ewSB.Append(ew_Quote(ew_CustomScriptTag("%t", "o2f", "%c")).replace("%t", "\" . $ScriptId . \"").replace("%c", "\" . $ScriptClassName . \""));
ewSB.Append(ewAr[35]);
// *** End Session fieldclass (key, 2/14/2016 9:08:34 PM)
// *** Start Session advancedsearchclass (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[36]);
// *** End Session advancedsearchclass (key, 2/14/2016 9:08:34 PM)
// *** Start Session fileuploadclass (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[37]);
// *** End Session fileuploadclass (key, 2/14/2016 9:08:34 PM)
// *** Start Session userprofileclass (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[38]);
 if (PROJ.SecLogInOutAuditTrail) { 
ewSB.Append(ewAr[39]);
 } 
ewSB.Append(ewAr[40]);
 if (bUserTable) { 
ewSB.Append(ewAr[41]);
 } 
ewSB.Append(ewAr[42]);
 if (bUserProfile) { 
ewSB.Append(ewAr[43]);
 } 
ewSB.Append(ewAr[44]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","User_CustomValidate")) { 
ewSB.Append(ewAr[45]);
 } 
ewSB.Append(ewAr[46]);
 if (bHardCodeAdmin) { 
ewSB.Append(ewAr[47]);
 if (bUserID) { 
ewSB.Append(ewAr[48]);
 } 
ewSB.Append(ewAr[49]);
 if (bUserLevel) { 
ewSB.Append(ewAr[50]);
 } 
ewSB.Append(ewAr[51]);
 if (bCheckPasswordExpiry) { 
ewSB.Append(ewAr[52]);
 } 
ewSB.Append(ewAr[53]);
 } 
ewSB.Append(ewAr[54]);
 if (bUserTable) { 
ewSB.Append(ewAr[55]);

			var sDbId = ew_GetDbId(SECTABLE.TblName);
			FIELD = SECTABLE.Fields(PROJ.SecLoginIDFld);
			gsFldName = ew_FieldSqlName(FIELD, sDbId);
			sFldQuoteS = FIELD.FldQuoteS;
			sFldQuoteE = FIELD.FldQuoteE;
			bUserNameIsNumeric = (ew_GetFieldType(FIELD.FldType) == 1);
			if (bUserNameIsNumeric) { // Numeric
		
ewSB.Append(ewAr[56]);

			}
		
ewSB.Append(ewAr[57]);

			if (PROJ.SecRegisterActivate && ew_IsNotEmpty(PROJ.SecRegisterActivateFld)) {
				FIELD = SECTABLE.Fields(PROJ.SecRegisterActivateFld);
				sActivateFld = ew_FieldSqlName(FIELD, sDbId);
				sActivateFldName = FIELD.FldName;
				sActivateFldVar = FIELD.FldVar;
				sActivateFldParm = FIELD.FldParm;
				sActivateFldQuoteS = FIELD.FldQuoteS;
				sActivateFldQuoteE = FIELD.FldQuoteE;
				sActivateFldValue = ActivateFieldValue(SECTABLE, FIELD);
		
ewSB.Append(ewAr[58]);

			}
		
ewSB.Append(ewAr[59]);
ewSB.Append(SQuote(PROJ.SecPasswdFld));
ewSB.Append(ewAr[60]);
 if (bCheckLoginRetry) { 
ewSB.Append(ewAr[61]);
 if (PROJ.SecLogInOutAuditTrail) { 
ewSB.Append(ewAr[62]);
 } 
ewSB.Append(ewAr[63]);
 } 
ewSB.Append(ewAr[64]);
 if (bCheckConcurrentUser) { 
ewSB.Append(ewAr[65]);
 if (PROJ.SecLogInOutAuditTrail) { 
ewSB.Append(ewAr[66]);
 } 
ewSB.Append(ewAr[67]);
 } 
ewSB.Append(ewAr[68]);
 if (bCheckPasswordExpiry) { 
ewSB.Append(ewAr[69]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","User_PasswordExpired")) { 
ewSB.Append(ewAr[70]);
 } 
ewSB.Append(ewAr[71]);
 if (PROJ.SecLogInOutAuditTrail) { 
ewSB.Append(ewAr[72]);
 } 
ewSB.Append(ewAr[73]);
 } 
ewSB.Append(ewAr[74]);

			FIELD = SECTABLE.Fields(PROJ.SecLoginIDFld);
			sFld = "$rs->fields('" + SQuote(PROJ.SecLoginIDFld) + "')";
		
ewSB.Append(ewAr[75]);
ewSB.Append(GetFldVal(SECTABLE, sFld, FIELD.FldType));
ewSB.Append(ewAr[76]);

			if (bUserID) {
				FIELD = SECTABLE.Fields(DB.SecuUserIDFld);
				sFld = "$rs->fields('" + SQuote(DB.SecuUserIDFld) + "')";
		
ewSB.Append(ewAr[77]);
ewSB.Append(GetFldVal(SECTABLE, sFld, FIELD.FldType));
ewSB.Append(ewAr[78]);

			}
			if (ew_IsNotEmpty(DB.SecuParentUserIDFld)) { // Parent User ID
				FIELD = SECTABLE.Fields(DB.SecuParentUserIDFld);
				sFld = "$rs->fields('" + SQuote(DB.SecuParentUserIDFld) + "')";
		
ewSB.Append(ewAr[79]);
ewSB.Append(GetFldVal(SECTABLE, sFld, FIELD.FldType));
ewSB.Append(ewAr[80]);

			}
			if (bUserLevel) { // User Level
				FIELD = SECTABLE.Fields(DB.SecUserLevelFld);
				sFld = "$rs->fields('" + SQuote(DB.SecUserLevelFld) + "')";
		
ewSB.Append(ewAr[81]);
ewSB.Append(sFld);
ewSB.Append(ewAr[82]);
ewSB.Append(GetFldVal(SECTABLE, sFld, FIELD.FldType));
ewSB.Append(ewAr[83]);

			}
		
ewSB.Append(ewAr[84]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","User_Validated")) { 
ewSB.Append(ewAr[85]);
 } 
ewSB.Append(ewAr[86]);
 } 
ewSB.Append(ewAr[87]);
 if (bStaticUserLevel || bDynamicUserLevel) { 
ewSB.Append(ewAr[88]);
 } 
ewSB.Append(ewAr[89]);
 if (bStaticUserLevel) { 
ewSB.Append(ewAr[90]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","UserLevel_Loaded")) { 
ewSB.Append(ewAr[91]);
 } 
ewSB.Append(ewAr[92]);
 } else if (bDynamicUserLevel) { 
ewSB.Append(ewAr[93]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","UserLevel_Loaded")) { 
ewSB.Append(ewAr[94]);
 } 
ewSB.Append(ewAr[95]);
ewSB.Append(sFnUserLevelTableList);
ewSB.Append(ewAr[96]);
 } else { 
ewSB.Append(ewAr[97]);
 } 
ewSB.Append(ewAr[98]);
 if (bUserLevel) { 
ewSB.Append(ewAr[99]);
 } else if (bUserTable) { 
ewSB.Append(ewAr[100]);
 } 
ewSB.Append(ewAr[101]);
 if (bUserLevel) { 
ewSB.Append(ewAr[102]);
 } 
ewSB.Append(ewAr[103]);
 if (bUserID) { 
ewSB.Append(ewAr[104]);
 } 
ewSB.Append(ewAr[105]);

		if (ew_IsNotEmpty(PROJ.SecTbl) && ew_IsNotEmpty(PROJ.SecEmailFld)) {
			EMAILFIELD = DB.Tables(PROJ.SecTbl).Fields(PROJ.SecEmailFld);
			sEmailFldName = EMAILFIELD.FldName;
	
ewSB.Append(ewAr[106]);
ewSB.Append(sEmailFldName);
ewSB.Append(ewAr[107]);

		}
	
ewSB.Append(ewAr[108]);
 if (bUserID) { 
ewSB.Append(ewAr[109]);
 } else { 
ewSB.Append(ewAr[110]);
 } 
ewSB.Append(ewAr[111]);

		if (bUserID) {
			// User id field
			var sDbId = ew_GetDbId(SECTABLE.TblName);
			FIELD = SECTABLE.Fields(DB.SecuUserIDFld);
			sFld = ew_FieldSqlName(FIELD, sDbId);
			sFldName = FIELD.FldName;
			sFldQuoteS = FIELD.FldQuoteS;
			sFldQuoteE = FIELD.FldQuoteE;
			sFldDataType = GetFieldTypeName(FIELD.FldType);
			bFldIsNumeric = (sFldDataType == "EW_DATATYPE_NUMBER");
			// User name field
			FIELD = SECTABLE.Fields(PROJ.SecLoginIDFld);
			sUserNameFld = ew_FieldSqlName(FIELD, sDbId);
			sUserNameFldQuoteS = FIELD.FldQuoteS;
			sUserNameFldQuoteE = FIELD.FldQuoteE;
			sUserNameFldDataType = GetFieldTypeName(FIELD.FldType);
			if (bParentUserID) {
				FIELD = SECTABLE.Fields(DB.SecuParentUserIDFld);
				sParentFld = ew_FieldSqlName(FIELD, sDbId);
				sParentFldName = FIELD.FldName;
			}
	
ewSB.Append(ewAr[112]);
ewSB.Append(SQuote(sFldName));
ewSB.Append(ewAr[113]);
ewSB.Append(SQuote(sFldName));
ewSB.Append(ewAr[114]);

			if (bParentUserID) {
	
ewSB.Append(ewAr[115]);
ewSB.Append(SQuote(sParentFld));
ewSB.Append(ewAr[116]);
ewSB.Append(SQuote(sFldName));
ewSB.Append(ewAr[117]);

			}
	
ewSB.Append(ewAr[118]);
 if (bFldIsNumeric) { 
ewSB.Append(ewAr[119]);
 } 
ewSB.Append(ewAr[120]);
 if (bFldIsNumeric) { 
ewSB.Append(ewAr[121]);
 } 
ewSB.Append(ewAr[122]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[123]);

		if (bParentUserID) {
	
ewSB.Append(ewAr[124]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[125]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[126]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[127]);

		}
	
ewSB.Append(ewAr[128]);

		}
	
ewSB.Append(ewAr[129]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","UserID_Loading"));
ewSB.Append(ewAr[130]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","UserID_Loaded"));
ewSB.Append(ewAr[131]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","UserLevel_Loaded"));
ewSB.Append(ewAr[132]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","TablePermission_Loading"));
ewSB.Append(ewAr[133]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","TablePermission_Loaded"));
ewSB.Append(ewAr[134]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","User_CustomValidate"));
ewSB.Append(ewAr[135]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","User_Validated"));
ewSB.Append(ewAr[136]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","User_PasswordExpired"));
ewSB.Append(ewAr[137]);
// *** End Session userprofileclass (key, 2/14/2016 9:08:34 PM)
// *** Start Session phpfunction (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[138]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Database_Connecting")) { 
ewSB.Append(ewAr[139]);
 } 
ewSB.Append(ewAr[140]);
 if (PROJ.GetV("OracleCompare") != "") { 
ewSB.Append(ewAr[141]);
ewSB.Append(PROJ.GetV("OracleCompare"));
ewSB.Append(ewAr[142]);
 } 
ewSB.Append(ewAr[143]);
 if (PROJ.GetV("OracleSort") != "") { 
ewSB.Append(ewAr[144]);
ewSB.Append(PROJ.GetV("OracleSort"));
ewSB.Append(ewAr[145]);
 } 
ewSB.Append(ewAr[146]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Database_Connected")) { 
ewSB.Append(ewAr[147]);
 } 
ewSB.Append(ewAr[148]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Database_Connecting"));
ewSB.Append(ewAr[149]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Database_Connected"));
ewSB.Append(ewAr[150]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","AuditTrail_Inserting")) { 
ewSB.Append(ewAr[151]);
 } else { 
ewSB.Append(ewAr[152]);
 } 
ewSB.Append(ewAr[153]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","AuditTrail_Inserting"));
ewSB.Append(ewAr[154]);
 if (PROJ.GetV("AddPlainTextEmail")) { 
ewSB.Append(ewAr[155]);
 } 
ewSB.Append(ewAr[156]);
// *** End Session phpfunction (key, 2/14/2016 9:08:34 PM)
// *** Start Session formfunction (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[157]);
// *** End Session formfunction (key, 2/14/2016 9:08:34 PM)
// *** Start Session thumbnailfunction (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[158]);
// *** End Session thumbnailfunction (key, 2/14/2016 9:08:34 PM)
// *** Start Session searchfunction (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[159]);
// *** End Session searchfunction (key, 2/14/2016 9:08:34 PM)
// *** Start Session autoidfunction (key, 2/14/2016 9:08:34 PM)
ewSB.Append(ewAr[160]);
 if (bUserTable && ew_IsNotEmpty(DB.SecUserProfileFld)) { 
ewSB.Append(ewAr[161]);
 if (bCheckConcurrentUser) { 
ewSB.Append(ewAr[162]);
 } 
ewSB.Append(ewAr[163]);
 if (bCheckLoginRetry) { 
ewSB.Append(ewAr[164]);
 } 
ewSB.Append(ewAr[165]);
 if (bCheckPasswordExpiry) { 
ewSB.Append(ewAr[166]);
 } 
ewSB.Append(ewAr[167]);
 if (bCheckConcurrentUser) { 
ewSB.Append(ewAr[168]);
 } 
ewSB.Append(ewAr[169]);
 if (bCheckLoginRetry) { 
ewSB.Append(ewAr[170]);
 } 
ewSB.Append(ewAr[171]);
 if (bCheckPasswordExpiry) { 
ewSB.Append(ewAr[172]);
 } 
ewSB.Append(ewAr[173]);
 } 
ewSB.Append(ewAr[174]);
ewSB.Append(ew_GetFileNameByCtrlID("ewshared"));
ewSB.Append(ewAr[175]);
 if (PROJ.GetV("SendPlainTextEmail")) { 
ewSB.Append(ewAr[176]);
 } 
ewSB.Append(ewAr[177]);
// *** End Session autoidfunction (key, 2/14/2016 9:08:34 PM)

return ewSB.ToString();
 } catch(e) {
  throw e;
 }
}
